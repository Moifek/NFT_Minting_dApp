[{"/home/adam/NFT_Minting_dApp/src/index.tsx":"1","/home/adam/NFT_Minting_dApp/src/App.tsx":"2","/home/adam/NFT_Minting_dApp/src/routes.ts":"3","/home/adam/NFT_Minting_dApp/src/components/Layout/index.tsx":"4","/home/adam/NFT_Minting_dApp/src/pages/PageNotFound/index.tsx":"5","/home/adam/NFT_Minting_dApp/src/config.tsx":"6","/home/adam/NFT_Minting_dApp/src/components/PageTitle/index.tsx":"7","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/index.tsx":"8","/home/adam/NFT_Minting_dApp/src/pages/Transaction/index.tsx":"9","/home/adam/NFT_Minting_dApp/src/pages/Home/index.tsx":"10","/home/adam/NFT_Minting_dApp/src/components/Layout/Navbar/index.tsx":"11","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/TopInfo.tsx":"12","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/index.tsx":"13","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Actions/index.tsx":"14","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/TransactionsList.tsx":"15","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/StatusIcon.tsx":"16","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/txStatus.tsx":"17","/home/adam/NFT_Minting_dApp/src/apiRequests/index.tsx":"18","/home/adam/NFT_Minting_dApp/src/pages/Home/utils.ts":"19"},{"size":204,"mtime":1650291225733,"results":"20","hashOfConfig":"21"},{"size":1449,"mtime":1650291225729,"results":"22","hashOfConfig":"21"},{"size":1128,"mtime":1650291225769,"results":"23","hashOfConfig":"21"},{"size":1015,"mtime":1650291225733,"results":"24","hashOfConfig":"21"},{"size":1080,"mtime":1650291225769,"results":"25","hashOfConfig":"21"},{"size":144,"mtime":1650291225733,"results":"26","hashOfConfig":"21"},{"size":282,"mtime":1650291225733,"results":"27","hashOfConfig":"21"},{"size":769,"mtime":1650291225733,"results":"28","hashOfConfig":"21"},{"size":1569,"mtime":1650291225769,"results":"29","hashOfConfig":"21"},{"size":7165,"mtime":1650501218315,"results":"30","hashOfConfig":"21"},{"size":1245,"mtime":1650291225733,"results":"31","hashOfConfig":"21"},{"size":822,"mtime":1650291225733,"results":"32","hashOfConfig":"21"},{"size":1591,"mtime":1650291225733,"results":"33","hashOfConfig":"21"},{"size":5710,"mtime":1650291225733,"results":"34","hashOfConfig":"21"},{"size":3845,"mtime":1650291225733,"results":"35","hashOfConfig":"21"},{"size":1190,"mtime":1650291225733,"results":"36","hashOfConfig":"21"},{"size":140,"mtime":1650291225733,"results":"37","hashOfConfig":"21"},{"size":944,"mtime":1650294774850,"results":"38","hashOfConfig":"21"},{"size":2386,"mtime":1650501216802,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"fvo1cj",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},"/home/adam/NFT_Minting_dApp/src/index.tsx",[],["83","84"],"/home/adam/NFT_Minting_dApp/src/App.tsx",[],"/home/adam/NFT_Minting_dApp/src/routes.ts",[],"/home/adam/NFT_Minting_dApp/src/components/Layout/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/PageNotFound/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/config.tsx",[],"/home/adam/NFT_Minting_dApp/src/components/PageTitle/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Transaction/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Home/index.tsx",["85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101"],"import React, { FC, useState } from \"react\";\nimport { logout, useGetAccountInfo } from \"@elrondnetwork/dapp-core\";\nimport { Link } from \"react-router-dom\";\nimport { dAppName } from \"config\";\nimport { routeNames } from \"routes\";\nimport { ProxyNetworkProvider } from \"@elrondnetwork/erdjs-network-providers\";\nimport {\n  Transaction,\n  Nonce,\n  Balance,\n  GasPrice,\n  GasLimit,\n  TransactionPayload,\n  ChainID,\n  TransactionVersion,\n  Address,\n  NetworkConfig,\n  GasPriceModifier,\n  AbiRegistry,\n  SmartContractAbi,\n  SmartContract,\n  ContractFunction,\n  IProvider,\n  ProxyProvider,\n  UserSigner,\n  parseUserKey,\n} from \"@elrondnetwork/erdjs\";\nimport { promises } from \"fs\";\nimport * as fs from \"fs\";\nimport logo from \"./logo.png\";\nimport gif1 from \"./gif1.gif\";\nimport \"./Homeindex.css\";\nimport { stringify } from \"querystring\";\nimport data from './test.json';\nimport { commonTxOperations, getMintTransaction, publicEndpointSetup } from \"./utils\";\n\ninterface Props {\n  title: string;\n  initialCount: number;\n}\n\nconst Home: FC<Props> = ({ title, initialCount }) => {\n  const [count, setCount] = useState(0);\n  const { address } = useGetAccountInfo();\n\n  const add = (factor = 1) => {\n    if (factor < 0) {\n      if (count > 0) setCount(count + factor);\n    } else {\n      setCount(count + factor);\n    }\n  };\n\n  const syncProviderConfig = async (provider: IProvider) => {\n    return NetworkConfig.getDefault().sync(provider);\n    //return UserSigner.fromWallet() get user wallet signer\n  };\n\n  function createSmartContractInstance(abi?: AbiRegistry, address?: string) {\n    const contract = new SmartContract({\n      address: address ? new Address(address) : undefined,\n      abi:\n        abi &&\n        new SmartContractAbi(\n          abi,\n          abi.interfaces.map((iface) => iface.name)\n        ),\n    });\n    \n    return contract;\n  }\n\n  const abi = async () => {\n    let networkProvider = new ProxyNetworkProvider(\n      \"https://devnet-gateway.elrond.com\"\n    );\n    let networkConfig = await networkProvider.getNetworkConfig();\n    let provider = new ProxyProvider(\"https://devnet-gateway.elrond.com\");\n    await syncProviderConfig(provider);\n    let jsonContent = JSON.parse(JSON.stringify(data));\n    //let abi = new SmartContractAbi(abiRegistry, [\"MyContract\"]);\n    let registry = new AbiRegistry().extend(jsonContent);\n    let abiRegistry = registry.remapToKnownTypes();\n    console.log(abiRegistry);\n    \n    let contract = createSmartContractInstance(abiRegistry, \"erd1qqqqqqqqqqqqqpgqdx22q4lg64w20fsscll2w5z5lc08whac5uhslwwwp7\")\n    console.log(contract);\n    console.log(contract.getAbi().getEndpoint(\"getNftPrice\"));\n    let response = await contract.runQuery(provider, {\n      func: new ContractFunction(\"getNftPrice\"),\n      args: [],\n      caller: new Address(\"erd16ht3gyfw6xfcm9s89swczscas85y882am3atdar487mz3dzy5uhszny4gn\")\n    });\n    let mintx = getMintTransaction(\"erd1qqqqqqqqqqqqqpgqdx22q4lg64w20fsscll2w5z5lc08whac5uhslwwwp7\", 14000000, 2);\n    const { userAccount, signer} = await publicEndpointSetup(provider);\n    await commonTxOperations(mintx, userAccount, signer, provider);\n    return contract;\n  };\n\n  console.log(abi());\n\n  return (\n    <div\n      className=\"d-flex flex-fill align-items-center container\"\n      style={{\n        backgroundColor: \"#1e8520\",\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <div className=\"row w-100 justify-content-between\">\n        <div className=\"col-12 col-md-8 col-lg-5 mx-auto\">\n          <img\n            src={String(logo)}\n            alt=\"Logo\"\n            className=\"rounded mx-auto d-block\"\n            style={{\n              width: \"370px\",\n              height: \"320px\",\n              margin: \"15px\",\n              padding: \"25px\",\n            }}\n          />\n\n          <div className=\"card shadow-sm rounded border border-warning p-4\">\n            <div className=\"card-body text-center\">\n              <img\n                src={String(gif1)}\n                className=\"rounded border rounded-circle mx-auto d-block\"\n                style={{\n                  width: \"320px\",\n                  height: \"320px\",\n                  border: \"10px\",\n                  margin: \"15px\",\n                }}\n                alt=\"gif\"\n              ></img>\n              <h2 className=\"mb-3\" data-testid=\"title\">\n                {dAppName}\n              </h2>\n              <div className=\"container\">\n                {address ? (\n                  <button\n                    className=\"btn btn-warning btn-lg mt-3 text-white\"\n                    style={{\n                      margin: \"10px\",\n                    }}\n                    onClick={() => add()}\n                  >\n                    +\n                  </button>\n                ) : null}\n                {address ? <h5>{count}</h5> : null}\n                {address ? (\n                  <button\n                    className=\"btn btn-secondary btn-lg mt-3 text-white\"\n                    style={{\n                      margin: \"5px\",\n                    }}\n                    onClick={() => add(-1)}\n                  >\n                    -\n                  </button>\n                ) : null}\n              </div>\n              {address ? (\n                <button\n                  className=\"btn btn-warning btn-lg mt-3 text-white\"\n                  style={{\n                    margin: \"5px\",\n                  }}\n                >\n                  Mint\n                </button>\n              ) : null}{\" \"}\n              {address ? (\n                <button\n                  className=\"btn btn-secondary btn-lg mt-3 text-white\"\n                  style={{\n                    margin: \"5px\",\n                  }}\n                  onClick={() => {\n                    window.open(\n                      \"https://deadrare.io/collection/ZEB-9k4d2j\",\n                      \"_blank\"\n                    );\n                  }}\n                >\n                  DeadRare\n                </button>\n              ) : null}\n              <br />\n              <br />\n              <p className=\"mb-3\">\n                This is the official N4P foresters NFTs Minting Site\n                <br /> Login using your Elrond wallet.\n              </p>\n              {!address ? (\n                <Link\n                  to={routeNames.unlock}\n                  className=\"btn btn-primary mt-3 text-white\"\n                  data-testid=\"loginBtn\"\n                >\n                  Login\n                </Link>\n              ) : null}\n            </div>\n            <img\n              src={String(logo)}\n              className=\"rounded float-right\"\n              alt=\"...\"\n            ></img>\n          </div>\n\n          <p\n            style={{\n              padding: \"15px\",\n              textAlign: \"center\",\n              alignContent: \"center\",\n              color: \"white\",\n            }}\n          >\n            We have set the gas limit to 1000 for the contract to successfully\n            mint your NFT. We recommend that you do not lower the gas limit.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/home/adam/NFT_Minting_dApp/src/components/Layout/Navbar/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/TopInfo.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/index.tsx",["102"],"import React from 'react';\nimport {\n  useGetAccountInfo,\n  DappUI,\n  transactionServices,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\nimport { getTransactions } from 'apiRequests';\nimport { contractAddress } from 'config';\nimport TransactionsList from './TransactionsList';\nimport { StateType } from './types';\n\nconst Transactions = () => {\n  const {\n    network: { apiAddress }\n  } = useGetNetworkConfig();\n  const { success, fail, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const [state, setState] = React.useState<StateType>({\n    transactions: [],\n    transactionsFetched: undefined\n  });\n  const account = useGetAccountInfo();\n\n  const fetchData = () => {\n    if (success || fail || !hasActiveTransactions) {\n      getTransactions({\n        apiAddress,\n        address: account.address,\n        timeout: 3000,\n        contractAddress\n      }).then(({ data, success: transactionsFetched }) => {\n        refreshAccount();\n        setState({\n          transactions: data,\n          transactionsFetched\n        });\n      });\n    }\n  };\n\n  React.useEffect(fetchData, [success, fail, hasActiveTransactions]);\n\n  const { transactions } = state;\n\n  return transactions.length > 0 ? (\n    <TransactionsList transactions={transactions} />\n  ) : (\n    <div className='my-5'>\n      <DappUI.PageState\n        icon={faExchangeAlt}\n        className='text-muted fa-3x'\n        title='No Transactions'\n      />\n    </div>\n  );\n};\n\nexport default Transactions;\n","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Actions/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/TransactionsList.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/StatusIcon.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/txStatus.tsx",[],"/home/adam/NFT_Minting_dApp/src/apiRequests/index.tsx",["103"],"import axios from \"axios\";\nimport { promises } from \"fs\";\ninterface GetLatestTransactionsType {\n  apiAddress: string;\n  address: string;\n  contractAddress: string;\n  timeout: number;\n  page?: number;\n  url?: string;\n}\n\nconst fetchTransactions = (url: string) =>\n  async function getTransactions({\n    apiAddress,\n    address,\n    contractAddress,\n    timeout,\n  }: GetLatestTransactionsType) {\n    try {\n      const { data } = await axios.get(`${apiAddress}${url}`, {\n        params: {\n          sender: address,\n          receiver: contractAddress,\n          condition: \"must\",\n          size: 25,\n        },\n        timeout,\n      });\n\n      return {\n        data: data,\n        success: data !== undefined,\n      };\n    } catch (err) {\n      return {\n        success: false,\n      };\n    }\n  };\n\nexport const getTransactions = fetchTransactions(\"/transactions\");\nexport const getTransactionsCount = fetchTransactions(\"/transactions/count\");\n","/home/adam/NFT_Minting_dApp/src/pages/Home/utils.ts",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],"import {\n    ProxyProvider,\n    IProvider,\n    NetworkConfig,\n    SmartContract,\n    Account,\n    parseUserKey,\n    UserSigner,\n    SmartContractAbi,\n    Code,\n    GasLimit,\n    AbiRegistry,\n    Address,\n    ContractFunction,\n    BytesValue,\n    Balance,\n    U32Value,\n    BigUIntValue,\n    AddressValue,\n    Transaction,\n    TransactionPayload,\n    QueryResponse,\n    TypedValue,\n    CodeMetadata,\n    BooleanValue,\n    List,\n    ListType,\n    AddressType,\n    ISigner,\n  } from '@elrondnetwork/erdjs';\nimport { Provider } from 'react';\n\n\n  import data from './wallet.json';\nexport const getMintTransaction = (\n    contractAddress: string,\n    baseGasLimit: number,\n    tokensAmount: number\n  ) => {\n    const tokens = tokensAmount || 1;\n    const tokenSellingPrice = \"500000000000000000\";\n      const contract = new SmartContract({\n        address: new Address(contractAddress),\n      });\n      return contract.call({\n        func: new ContractFunction(\"getNftPrice\"),\n        gasLimit: new GasLimit(\n          baseGasLimit + (baseGasLimit / 1.4) * (tokensAmount - 1)\n        ),\n        args: [new U32Value(tokens)],\n        value: Balance.fromString(tokenSellingPrice).times(tokens),\n      });\n    };\n\n\n  export const commonTxOperations = async (\n    tx: Transaction,\n    account: Account,\n    signer: ISigner,\n    provider: ProxyProvider\n  ) => {\n    tx.setNonce(account.nonce);\n    account.incrementNonce();\n    signer.sign(tx);\n  \n  \n    await tx.send(provider);\n    await tx.awaitExecuted(provider);\n    const txHash = tx.getHash();\n    \n    console.log(`Transaction: /transactions/${txHash}`);\n  };\n\n  export const prepareUserAccount = async (walletPemKey: string) => {\n    const userKey = parseUserKey(walletPemKey);\n    const address = userKey.generatePublicKey().toAddress();\n    return new Account(address);\n  };\n\n  export const publicEndpointSetup = async (provider: ProxyProvider) => {\n    let keyFileObject = JSON.parse(JSON.stringify(data));\n    // Provider type based on initial configuration\n    const core = require(\"@elrondnetwork/elrond-core-js\");\n    let account = new core.account();\n    const userAccount = await account.loadFromKeyFile(keyFileObject, \"u!D?G8Tf48fYL28\");\n    await userAccount.sync(provider);\n  \n    const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n    return {\n      signer,\n      userAccount,\n      provider,\n    };\n  };",{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":16},{"ruleId":"125","severity":1,"message":"129","line":8,"column":3,"nodeType":"127","messageId":"128","endLine":8,"endColumn":14},{"ruleId":"125","severity":1,"message":"130","line":9,"column":3,"nodeType":"127","messageId":"128","endLine":9,"endColumn":8},{"ruleId":"125","severity":1,"message":"131","line":10,"column":3,"nodeType":"127","messageId":"128","endLine":10,"endColumn":10},{"ruleId":"125","severity":1,"message":"132","line":11,"column":3,"nodeType":"127","messageId":"128","endLine":11,"endColumn":11},{"ruleId":"125","severity":1,"message":"133","line":12,"column":3,"nodeType":"127","messageId":"128","endLine":12,"endColumn":11},{"ruleId":"125","severity":1,"message":"134","line":13,"column":3,"nodeType":"127","messageId":"128","endLine":13,"endColumn":21},{"ruleId":"125","severity":1,"message":"135","line":14,"column":3,"nodeType":"127","messageId":"128","endLine":14,"endColumn":10},{"ruleId":"125","severity":1,"message":"136","line":15,"column":3,"nodeType":"127","messageId":"128","endLine":15,"endColumn":21},{"ruleId":"125","severity":1,"message":"137","line":18,"column":3,"nodeType":"127","messageId":"128","endLine":18,"endColumn":19},{"ruleId":"125","severity":1,"message":"138","line":25,"column":3,"nodeType":"127","messageId":"128","endLine":25,"endColumn":13},{"ruleId":"125","severity":1,"message":"139","line":26,"column":3,"nodeType":"127","messageId":"128","endLine":26,"endColumn":15},{"ruleId":"125","severity":1,"message":"140","line":28,"column":10,"nodeType":"127","messageId":"128","endLine":28,"endColumn":18},{"ruleId":"125","severity":1,"message":"141","line":29,"column":13,"nodeType":"127","messageId":"128","endLine":29,"endColumn":15},{"ruleId":"125","severity":1,"message":"142","line":33,"column":10,"nodeType":"127","messageId":"128","endLine":33,"endColumn":19},{"ruleId":"125","severity":1,"message":"143","line":77,"column":9,"nodeType":"127","messageId":"128","endLine":77,"endColumn":22},{"ruleId":"125","severity":1,"message":"144","line":89,"column":9,"nodeType":"127","messageId":"128","endLine":89,"endColumn":17},{"ruleId":"145","severity":1,"message":"146","line":45,"column":30,"nodeType":"147","endLine":45,"endColumn":68,"suggestions":"148"},{"ruleId":"125","severity":1,"message":"140","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":18},{"ruleId":"125","severity":1,"message":"149","line":3,"column":5,"nodeType":"127","messageId":"128","endLine":3,"endColumn":14},{"ruleId":"125","severity":1,"message":"150","line":4,"column":5,"nodeType":"127","messageId":"128","endLine":4,"endColumn":18},{"ruleId":"125","severity":1,"message":"151","line":9,"column":5,"nodeType":"127","messageId":"128","endLine":9,"endColumn":21},{"ruleId":"125","severity":1,"message":"152","line":10,"column":5,"nodeType":"127","messageId":"128","endLine":10,"endColumn":9},{"ruleId":"125","severity":1,"message":"153","line":12,"column":5,"nodeType":"127","messageId":"128","endLine":12,"endColumn":16},{"ruleId":"125","severity":1,"message":"154","line":15,"column":5,"nodeType":"127","messageId":"128","endLine":15,"endColumn":15},{"ruleId":"125","severity":1,"message":"155","line":18,"column":5,"nodeType":"127","messageId":"128","endLine":18,"endColumn":17},{"ruleId":"125","severity":1,"message":"156","line":19,"column":5,"nodeType":"127","messageId":"128","endLine":19,"endColumn":17},{"ruleId":"125","severity":1,"message":"134","line":21,"column":5,"nodeType":"127","messageId":"128","endLine":21,"endColumn":23},{"ruleId":"125","severity":1,"message":"157","line":22,"column":5,"nodeType":"127","messageId":"128","endLine":22,"endColumn":18},{"ruleId":"125","severity":1,"message":"158","line":23,"column":5,"nodeType":"127","messageId":"128","endLine":23,"endColumn":15},{"ruleId":"125","severity":1,"message":"159","line":24,"column":5,"nodeType":"127","messageId":"128","endLine":24,"endColumn":17},{"ruleId":"125","severity":1,"message":"160","line":25,"column":5,"nodeType":"127","messageId":"128","endLine":25,"endColumn":17},{"ruleId":"125","severity":1,"message":"161","line":26,"column":5,"nodeType":"127","messageId":"128","endLine":26,"endColumn":9},{"ruleId":"125","severity":1,"message":"162","line":27,"column":5,"nodeType":"127","messageId":"128","endLine":27,"endColumn":13},{"ruleId":"125","severity":1,"message":"163","line":28,"column":5,"nodeType":"127","messageId":"128","endLine":28,"endColumn":16},{"ruleId":"125","severity":1,"message":"164","line":31,"column":10,"nodeType":"127","messageId":"128","endLine":31,"endColumn":18},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"@typescript-eslint/no-unused-vars","'logout' is defined but never used.","Identifier","unusedVar","'Transaction' is defined but never used.","'Nonce' is defined but never used.","'Balance' is defined but never used.","'GasPrice' is defined but never used.","'GasLimit' is defined but never used.","'TransactionPayload' is defined but never used.","'ChainID' is defined but never used.","'TransactionVersion' is defined but never used.","'GasPriceModifier' is defined but never used.","'UserSigner' is defined but never used.","'parseUserKey' is defined but never used.","'promises' is defined but never used.","'fs' is defined but never used.","'stringify' is defined but never used.","'networkConfig' is assigned a value but never used.","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'account.address' and 'apiAddress'. Either include them or remove the dependency array.","ArrayExpression",["167"],"'IProvider' is defined but never used.","'NetworkConfig' is defined but never used.","'SmartContractAbi' is defined but never used.","'Code' is defined but never used.","'AbiRegistry' is defined but never used.","'BytesValue' is defined but never used.","'BigUIntValue' is defined but never used.","'AddressValue' is defined but never used.","'QueryResponse' is defined but never used.","'TypedValue' is defined but never used.","'CodeMetadata' is defined but never used.","'BooleanValue' is defined but never used.","'List' is defined but never used.","'ListType' is defined but never used.","'AddressType' is defined but never used.","'Provider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},"Update the dependencies array to be: [success, fail, hasActiveTransactions, apiAddress, account.address]",{"range":"170","text":"171"},[1209,1247],"[success, fail, hasActiveTransactions, apiAddress, account.address]"]