[{"/home/adam/NFT_Minting_dApp/src/index.tsx":"1","/home/adam/NFT_Minting_dApp/src/App.tsx":"2","/home/adam/NFT_Minting_dApp/src/routes.ts":"3","/home/adam/NFT_Minting_dApp/src/pages/PageNotFound/index.tsx":"4","/home/adam/NFT_Minting_dApp/src/components/Layout/index.tsx":"5","/home/adam/NFT_Minting_dApp/src/config.tsx":"6","/home/adam/NFT_Minting_dApp/src/components/PageTitle/index.tsx":"7","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/index.tsx":"8","/home/adam/NFT_Minting_dApp/src/pages/Transaction/index.tsx":"9","/home/adam/NFT_Minting_dApp/src/pages/Home/index.tsx":"10","/home/adam/NFT_Minting_dApp/src/pages/Home/utils.ts":"11","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/TopInfo.tsx":"12","/home/adam/NFT_Minting_dApp/src/components/Layout/Navbar/index.tsx":"13","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/index.tsx":"14","/home/adam/NFT_Minting_dApp/src/apiRequests/index.tsx":"15","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/TransactionsList.tsx":"16","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/txStatus.tsx":"17","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/StatusIcon.tsx":"18","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Actions/index.tsx":"19"},{"size":206,"mtime":1651540256357,"results":"20","hashOfConfig":"21"},{"size":1449,"mtime":1651540256357,"results":"22","hashOfConfig":"21"},{"size":1128,"mtime":1651540256397,"results":"23","hashOfConfig":"21"},{"size":1080,"mtime":1651540256397,"results":"24","hashOfConfig":"21"},{"size":1016,"mtime":1651540256357,"results":"25","hashOfConfig":"21"},{"size":144,"mtime":1651540256357,"results":"26","hashOfConfig":"21"},{"size":282,"mtime":1651540256357,"results":"27","hashOfConfig":"21"},{"size":769,"mtime":1651540256361,"results":"28","hashOfConfig":"21"},{"size":1569,"mtime":1651540256397,"results":"29","hashOfConfig":"21"},{"size":9331,"mtime":1651540256377,"results":"30","hashOfConfig":"21"},{"size":2079,"mtime":1651542516421,"results":"31","hashOfConfig":"21"},{"size":822,"mtime":1651540256361,"results":"32","hashOfConfig":"21"},{"size":1245,"mtime":1651540256357,"results":"33","hashOfConfig":"21"},{"size":1591,"mtime":1651540256361,"results":"34","hashOfConfig":"21"},{"size":914,"mtime":1651540256357,"results":"35","hashOfConfig":"21"},{"size":3845,"mtime":1651540256361,"results":"36","hashOfConfig":"21"},{"size":140,"mtime":1651540256361,"results":"37","hashOfConfig":"21"},{"size":1190,"mtime":1651540256361,"results":"38","hashOfConfig":"21"},{"size":5710,"mtime":1651540256361,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iw104x",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/adam/NFT_Minting_dApp/src/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/App.tsx",[],"/home/adam/NFT_Minting_dApp/src/routes.ts",[],"/home/adam/NFT_Minting_dApp/src/pages/PageNotFound/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/components/Layout/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/config.tsx",[],"/home/adam/NFT_Minting_dApp/src/components/PageTitle/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Transaction/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Home/index.tsx",["81","82","83","84","85","86","87","88","89","90","91","92"],"import React, { FC, useState } from \"react\";\nimport {\n  transactionServices,\n  useGetAccountInfo,\n  useGetNetworkConfig,\n  refreshAccount,\n} from \"@elrondnetwork/dapp-core\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { dAppName } from \"config\";\nimport { routeNames } from \"routes\";\nimport BigNumber from 'bignumber.js';\nimport { ProxyNetworkProvider } from \"@elrondnetwork/erdjs-network-providers\";\nimport {\n  Address,\n  NetworkConfig,\n  AbiRegistry,\n  SmartContractAbi,\n  SmartContract,\n  ContractFunction,\n  IProvider,\n  ProxyProvider,\n  Nonce,\n  QueryResponse,\n} from \"@elrondnetwork/erdjs\";\n//import { promises } from \"fs\";\n//import * as fs from \"fs\";\nimport { TransactionOnNetwork } from \"@elrondnetwork/erdjs/out/transactionOnNetwork\";\nimport { getTransactions } from \"apiRequests\";\nimport { contractAddress } from \"config\";\nimport logo from \"./logo.png\";\nimport gif1 from \"./gif1.gif\";\nimport { StateType } from \"./types\";\nimport \"./Homeindex.css\";\n//import { stringify } from \"querystring\";\nimport data from \"./test.json\";\nimport {\n  commonTxOperations,\n  getMintTransaction,\n  publicEndpointSetup,\n  GetAddress,\n} from \"./utils\";\nimport { sign } from \"crypto\";\nimport { config } from \"process\";\n//import { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n  title: string;\n  initialCount: number;\n  SCaddress: Address;\n}\n\nexport const Home: FC<Props> = () => {\n  const [count, setCount] = useState(0);\n  const { address } = useGetAccountInfo();\n\n  /**************************************************Block Jdid **************************/\n  const { success, fail, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const {\n    network: { apiAddress },\n  } = useGetNetworkConfig();\n  //console.log(\"******************\", apiAddress); //https://devnet-api.elrond.com\n\n  const [state, setState] = React.useState<StateType>({\n    transactions: [],\n    transactionsFetched: undefined,\n  });\n  const account = useGetAccountInfo();\n  console.log(\"***ACCOUNT ADRESS***:\", account.address); //erd14vwdlxxn93nxpph830f00y5g6qal3nndp7mtjg00verhtykp9nnqrmethw\n\n  const fetchData = () => {\n    if (success || fail || !hasActiveTransactions) {\n      getTransactions({\n        apiAddress,\n        address: account.address,\n        timeout: 3000,\n        contractAddress,\n      }).then(({ data, success: transactionsFetched }) => {\n        refreshAccount();\n        setState({\n          transactions: data,\n          transactionsFetched,\n        });\n      });\n    }\n  };\n  React.useEffect(fetchData, [success, fail, hasActiveTransactions]);\n\n  const add = (factor = 1) => {\n    if (factor < 0) {\n      if (count > 0) setCount(count + factor);\n    } else {\n      setCount(count + factor);\n    }\n  };\n\n  const syncProviderConfig = async (provider: IProvider) => {\n    return NetworkConfig.getDefault().sync(provider);\n    //return UserSigner.fromWallet() get user wallet signer\n  };\n\n  function createSmartContractInstance(abi?: AbiRegistry, SCaddress?: string) {\n    const contract = new SmartContract({\n      address: SCaddress ? new Address(SCaddress) : undefined,\n      abi:\n        abi &&\n        new SmartContractAbi(\n          abi,\n          abi.interfaces.map((iface) => iface.name)\n        ),\n    });\n\n    return contract;\n  }\n\n  const abi = async () => {\n    let networkProvider = new ProxyNetworkProvider(\n      \"https://devnet-gateway.elrond.com\"\n    );\n    let networkConfig = await networkProvider.getNetworkConfig();\n    let provider = new ProxyProvider(\"https://devnet-gateway.elrond.com\");\n    await GetAddress(address);\n    await syncProviderConfig(provider);\n    let jsonContent = JSON.parse(JSON.stringify(data));\n    //let abi = new SmartContractAbi(abiRegistry, [\"MyContract\"]);\n    let registry = new AbiRegistry().extend(jsonContent);\n    let abiRegistry = registry.remapToKnownTypes();\n    console.log(abiRegistry);\n\n    let contract = createSmartContractInstance(\n      abiRegistry,\n      \"erd1qqqqqqqqqqqqqpgqdx22q4lg64w20fsscll2w5z5lc08whac5uhslwwwp7\"\n    );\n    console.log(contract);\n    console.log(contract.getAbi().getEndpoint(\"getNftPrice\"));\n    let response = await contract.runQuery(provider, {\n      func: new ContractFunction(\"getNftPrice\"),\n      args: [],\n      caller: new Address(\n        \"erd16ht3gyfw6xfcm9s89swczscas85y882am3atdar487mz3dzy5uhszny4gn\"\n      ),\n    });\n    let mintx = getMintTransaction(\n      \"erd1qqqqqqqqqqqqqpgqdx22q4lg64w20fsscll2w5z5lc08whac5uhslwwwp7\",\n      14000000,\n      2\n    );\n    const { signer, LoggedUserAccount } = await publicEndpointSetup(provider);\n    console.log(LoggedUserAccount.nonce);\n    mintx.setNonce(LoggedUserAccount.getNonceThenIncrement());\n    console.log(mintx.getNonce());\n    console.log(LoggedUserAccount.nonce);\n    signer.sign(mintx);\n    // await commonTxOperations(mintx, LoggedUserAccount, signer, provider);\n    console.log(LoggedUserAccount);\n    await mintx.send(provider);\n    await mintx.awaitExecuted(provider);\n    const txHash = mintx.getHash();\n    console.log(txHash.toString());\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n    console.log(`Transaction: /transactions/${txHash}`);\n    let explorer = `https://devnet-gateway.elrond.com/transaction/${txHash}?withResults=true`;\n    let res = await axios.get(explorer);\n    let value = res.data.data.transaction.smartContractResults[0].data;\n    var result = value.substring(value.lastIndexOf(\"@\") + 1);\n    let pricestr = parseInt(result, 16);\n    console.log(pricestr);\n    return contract;\n  };\n\n  console.log(abi());\n\n  return (\n    <div\n      className=\"d-flex flex-fill align-items-center  rounded-pill\"\n      style={{\n        height: \"70vh\",\n        paddingTop: \"25%\",\n        marginTop: \"15%\",\n        marginRight: \"5%\",\n        marginLeft: \"5%\",\n        marginBottom: \"15%\",\n        paddingBottom: \"40%\",\n        backgroundColor: \"#2e765e\",\n      }}\n    >\n      <div className=\"row w-100 justify-content-between\">\n        <div className=\"col-12 col-md-8 col-lg-5 mx-auto\">\n          <img\n            src={String(logo)}\n            alt=\"Logo\"\n            className=\"rounded mx-auto d-block\"\n            style={{\n              width: \"370px\",\n              height: \"320px\",\n              marginTop: \"30%\",\n              padding: \"25px\",\n            }}\n          />\n\n          <div\n            className=\"card shadow-sm rounded-pill border border-warning p-4\"\n            style={{\n              width: \"100%\",\n              height: \"60%\",\n            }}\n          >\n            <div className=\"card-body text-center\">\n              <img\n                src={String(gif1)}\n                className=\"rounded border rounded-circle mx-auto d-block\"\n                style={{\n                  width: \"50%\",\n                  height: \"50%\",\n                  border: \"10px\",\n                  margin: \"2%\",\n                }}\n                alt=\"gif\"\n              ></img>\n              <h2 className=\"mb-3\" data-testid=\"title\">\n                {dAppName}\n              </h2>\n              <div className=\"container \">\n                {address ? (\n                  <button\n                    className=\"btn btn-lg mt-3 text-white\"\n                    style={{\n                      margin: \"10px\",\n                      backgroundColor: \"#00665d\",\n                    }}\n                    onClick={() => add()}\n                  >\n                    +\n                  </button>\n                ) : null}\n                {address ? <h5>{count}</h5> : null}\n                {address ? (\n                  <button\n                    className=\"btn btn-lg mt-3 text-white\"\n                    style={{\n                      margin: \"5px\",\n                      backgroundColor: \"#d2b48c\",\n                    }}\n                    onClick={() => add(-1)}\n                  >\n                    -\n                  </button>\n                ) : null}\n              </div>\n              {address ? (\n                <button\n                  className=\"btn btn-lg mt-3 text-white golden\"\n                  style={{\n                    margin: \"5px\",\n                    borderColor: \"#d2b48c\",\n                    backgroundColor: \"#00665d\",\n                  }}\n                >\n                  Mint\n                </button>\n              ) : null}{\" \"}\n              <br />\n              <br />\n              <p className=\"mb-3\">\n                This is the official N4P foresters NFTs Minting Site\n                <br /> Login using your Elrond wallet.\n              </p>\n              {!address ? (\n                <Link\n                  to={routeNames.unlock}\n                  className=\"btn btn-primary mt-3 text-white golden\"\n                  data-testid=\"loginBtn\"\n                >\n                  Login\n                </Link>\n              ) : null}\n            </div>\n          </div>\n\n          <p\n            style={{\n              padding: \"15px\",\n              textAlign: \"center\",\n              alignContent: \"center\",\n              color: \"white\",\n            }}\n          >\n            We have set the gas limit to 14000000 for the contract to successfully\n            mint your NFT. We recommend that you do not lower the gas limit.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/home/adam/NFT_Minting_dApp/src/pages/Home/utils.ts",["93"],"import {\n  ProxyProvider,\n  SmartContract,\n  Account,\n  parseUserKey,\n  UserSigner,\n  GasLimit,\n  Address,\n  ContractFunction,\n  Balance,\n  U32Value,\n  Transaction,\n  ISigner,\n  QueryResponse,\n} from \"@elrondnetwork/erdjs\";\n//import { Provider } from \"react\";\nimport data from \"./wallet.json\";\n\nlet LoggedUseraddress = \"\";\n\nexport const getMintTransaction = (\n  contractAddress: string,\n  baseGasLimit: number,\n  tokensAmount: number\n) => {\n  const tokens = tokensAmount || 1;\n  const tokenSellingPrice = \"500000000000000000\";\n  const contract = new SmartContract({\n    address: new Address(contractAddress),\n  });\n  return contract.call({\n    func: new ContractFunction(\"mint\"),\n    gasLimit: new GasLimit(\n      baseGasLimit + (baseGasLimit / 1.4) * (tokensAmount - 1)\n    ),\n    args: [new U32Value(tokens)],\n    value: Balance.fromString(tokenSellingPrice).times(tokens),\n  });\n};\n\nexport const commonTxOperations = async (\n  tx: Transaction,\n  account: Account,\n  signer: ISigner,\n  provider: ProxyProvider\n) => {\n  tx.setNonce(account.nonce);\n  account.incrementNonce();\n  signer.sign(tx);\n\n  await tx.send(provider);\n  await tx.awaitExecuted(provider);\n  const txHash = tx.getHash();\n\n  console.log(`Transaction: /transactions/${txHash}`);\n};\n\nexport const GetAddress = async (LoggedUserAddress: string) => {\n  LoggedUseraddress = LoggedUserAddress;\n};\nexport const prepareUserAccount = async (walletPemKey: string) => {\n  const userKey = parseUserKey(walletPemKey);\n  const address = userKey.generatePublicKey().toAddress();\n  return new Account(address);\n};\n\nexport const publicEndpointSetup = async (provider: ProxyProvider) => {\n  let keyFileObject = JSON.parse(JSON.stringify(data));\n  // Provider type based on initial configuration\n  let LoggedUserAddress = new Address(LoggedUseraddress);\n  let LoggedUserAccount = new Account(LoggedUserAddress);\n  let syncc = await LoggedUserAccount.sync(provider);\n  console.log(syncc);\n  const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n  return {\n    signer,\n    LoggedUserAccount,\n    provider,\n  };\n};","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/TopInfo.tsx",[],"/home/adam/NFT_Minting_dApp/src/components/Layout/Navbar/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/index.tsx",["94"],"import React from 'react';\nimport {\n  useGetAccountInfo,\n  DappUI,\n  transactionServices,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\nimport { getTransactions } from 'apiRequests';\nimport { contractAddress } from 'config';\nimport TransactionsList from './TransactionsList';\nimport { StateType } from './types';\n\nconst Transactions = () => {\n  const {\n    network: { apiAddress }\n  } = useGetNetworkConfig();\n  const { success, fail, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const [state, setState] = React.useState<StateType>({\n    transactions: [],\n    transactionsFetched: undefined\n  });\n  const account = useGetAccountInfo();\n\n  const fetchData = () => {\n    if (success || fail || !hasActiveTransactions) {\n      getTransactions({\n        apiAddress,\n        address: account.address,\n        timeout: 3000,\n        contractAddress\n      }).then(({ data, success: transactionsFetched }) => {\n        refreshAccount();\n        setState({\n          transactions: data,\n          transactionsFetched\n        });\n      });\n    }\n  };\n\n  React.useEffect(fetchData, [success, fail, hasActiveTransactions]);\n\n  const { transactions } = state;\n\n  return transactions.length > 0 ? (\n    <TransactionsList transactions={transactions} />\n  ) : (\n    <div className='my-5'>\n      <DappUI.PageState\n        icon={faExchangeAlt}\n        className='text-muted fa-3x'\n        title='No Transactions'\n      />\n    </div>\n  );\n};\n\nexport default Transactions;\n","/home/adam/NFT_Minting_dApp/src/apiRequests/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/TransactionsList.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/txStatus.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/StatusIcon.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Actions/index.tsx",[],{"ruleId":"95","severity":1,"message":"96","line":8,"column":17,"nodeType":"97","messageId":"98","endLine":8,"endColumn":30},{"ruleId":"95","severity":1,"message":"99","line":12,"column":8,"nodeType":"97","messageId":"98","endLine":12,"endColumn":17},{"ruleId":"95","severity":1,"message":"100","line":23,"column":3,"nodeType":"97","messageId":"98","endLine":23,"endColumn":8},{"ruleId":"95","severity":1,"message":"101","line":24,"column":3,"nodeType":"97","messageId":"98","endLine":24,"endColumn":16},{"ruleId":"95","severity":1,"message":"102","line":28,"column":10,"nodeType":"97","messageId":"98","endLine":28,"endColumn":30},{"ruleId":"95","severity":1,"message":"103","line":38,"column":3,"nodeType":"97","messageId":"98","endLine":38,"endColumn":21},{"ruleId":"95","severity":1,"message":"104","line":43,"column":10,"nodeType":"97","messageId":"98","endLine":43,"endColumn":14},{"ruleId":"95","severity":1,"message":"105","line":44,"column":10,"nodeType":"97","messageId":"98","endLine":44,"endColumn":16},{"ruleId":"95","severity":1,"message":"106","line":66,"column":10,"nodeType":"97","messageId":"98","endLine":66,"endColumn":15},{"ruleId":"107","severity":1,"message":"108","line":89,"column":30,"nodeType":"109","endLine":89,"endColumn":68,"suggestions":"110"},{"ruleId":"95","severity":1,"message":"111","line":122,"column":9,"nodeType":"97","messageId":"98","endLine":122,"endColumn":22},{"ruleId":"95","severity":1,"message":"112","line":138,"column":9,"nodeType":"97","messageId":"98","endLine":138,"endColumn":17},{"ruleId":"95","severity":1,"message":"101","line":14,"column":3,"nodeType":"97","messageId":"98","endLine":14,"endColumn":16},{"ruleId":"107","severity":1,"message":"108","line":45,"column":30,"nodeType":"109","endLine":45,"endColumn":68,"suggestions":"113"},"@typescript-eslint/no-unused-vars","'AxiosResponse' is defined but never used.","Identifier","unusedVar","'BigNumber' is defined but never used.","'Nonce' is defined but never used.","'QueryResponse' is defined but never used.","'TransactionOnNetwork' is defined but never used.","'commonTxOperations' is defined but never used.","'sign' is defined but never used.","'config' is defined but never used.","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'account.address' and 'apiAddress'. Either include them or remove the dependency array.","ArrayExpression",["114"],"'networkConfig' is assigned a value but never used.","'response' is assigned a value but never used.",["115"],{"desc":"116","fix":"117"},{"desc":"116","fix":"118"},"Update the dependencies array to be: [success, fail, hasActiveTransactions, apiAddress, account.address]",{"range":"119","text":"120"},{"range":"121","text":"120"},[2592,2630],"[success, fail, hasActiveTransactions, apiAddress, account.address]",[1209,1247]]