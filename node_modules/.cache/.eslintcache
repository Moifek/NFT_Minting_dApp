[{"/home/adam/NFT_Minting_dApp/src/index.tsx":"1","/home/adam/NFT_Minting_dApp/src/App.tsx":"2","/home/adam/NFT_Minting_dApp/src/routes.ts":"3","/home/adam/NFT_Minting_dApp/src/components/Layout/index.tsx":"4","/home/adam/NFT_Minting_dApp/src/pages/PageNotFound/index.tsx":"5","/home/adam/NFT_Minting_dApp/src/config.tsx":"6","/home/adam/NFT_Minting_dApp/src/components/PageTitle/index.tsx":"7","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/index.tsx":"8","/home/adam/NFT_Minting_dApp/src/pages/Transaction/index.tsx":"9","/home/adam/NFT_Minting_dApp/src/pages/Home/index.tsx":"10","/home/adam/NFT_Minting_dApp/src/components/Layout/Navbar/index.tsx":"11","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/TopInfo.tsx":"12","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/index.tsx":"13","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Actions/index.tsx":"14","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/TransactionsList.tsx":"15","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/StatusIcon.tsx":"16","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/txStatus.tsx":"17","/home/adam/NFT_Minting_dApp/src/apiRequests/index.tsx":"18"},{"size":204,"mtime":1650291225733,"results":"19","hashOfConfig":"20"},{"size":1449,"mtime":1650291225729,"results":"21","hashOfConfig":"20"},{"size":1128,"mtime":1650291225769,"results":"22","hashOfConfig":"20"},{"size":1015,"mtime":1650291225733,"results":"23","hashOfConfig":"20"},{"size":1080,"mtime":1650291225769,"results":"24","hashOfConfig":"20"},{"size":144,"mtime":1650291225733,"results":"25","hashOfConfig":"20"},{"size":282,"mtime":1650291225733,"results":"26","hashOfConfig":"20"},{"size":769,"mtime":1650291225733,"results":"27","hashOfConfig":"20"},{"size":1569,"mtime":1650291225769,"results":"28","hashOfConfig":"20"},{"size":5748,"mtime":1650294691562,"results":"29","hashOfConfig":"20"},{"size":1245,"mtime":1650291225733,"results":"30","hashOfConfig":"20"},{"size":822,"mtime":1650291225733,"results":"31","hashOfConfig":"20"},{"size":1591,"mtime":1650291225733,"results":"32","hashOfConfig":"20"},{"size":5710,"mtime":1650291225733,"results":"33","hashOfConfig":"20"},{"size":3845,"mtime":1650291225733,"results":"34","hashOfConfig":"20"},{"size":1190,"mtime":1650291225733,"results":"35","hashOfConfig":"20"},{"size":140,"mtime":1650291225733,"results":"36","hashOfConfig":"20"},{"size":944,"mtime":1650294774850,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"fvo1cj",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},"/home/adam/NFT_Minting_dApp/src/index.tsx",[],["78","79"],"/home/adam/NFT_Minting_dApp/src/App.tsx",[],"/home/adam/NFT_Minting_dApp/src/routes.ts",[],"/home/adam/NFT_Minting_dApp/src/components/Layout/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/PageNotFound/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/config.tsx",[],"/home/adam/NFT_Minting_dApp/src/components/PageTitle/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Transaction/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Home/index.tsx",["80","81","82","83","84","85","86","87","88","89","90","91"],"import React, { FC, useState } from \"react\";\nimport { logout, useGetAccountInfo } from \"@elrondnetwork/dapp-core\";\nimport { Link } from \"react-router-dom\";\nimport { dAppName } from \"config\";\nimport { routeNames } from \"routes\";\nimport { ProxyNetworkProvider } from \"@elrondnetwork/erdjs-network-providers\";\nimport {\n  Transaction,\n  Nonce,\n  Balance,\n  GasPrice,\n  GasLimit,\n  TransactionPayload,\n  ChainID,\n  TransactionVersion,\n  Address,\n  NetworkConfig,\n  GasPriceModifier,\n  AbiRegistry,\n  SmartContractAbi,\n  SmartContract,\n} from \"@elrondnetwork/erdjs\";\nimport { promises } from \"fs\";\n\nimport logo from \"./logo.png\";\nimport gif1 from \"./gif1.gif\";\nimport \"./Homeindex.css\";\n\nasync function abi() {\n  let networkProvider = new ProxyNetworkProvider(\n    \"https://devnet-gateway.elrond.com\"\n  );\n\n  let networkConfig = await networkProvider.getNetworkConfig();\n  console.log(networkConfig.MinGasPrice);\n  console.log(networkConfig.ChainID);\n\n  let jsonContent = await promises.readFile(\"elven-nft-minter.abi.json\", {\n    encoding: \"utf8\",\n  });\n  let json = JSON.parse(jsonContent);\n  let abi;\n  let abiRegistry = AbiRegistry.load(json).then(\n    (result) => (abi = new SmartContractAbi(result, [\"test\"]))\n  );\n  let contract = new SmartContract({\n    address: new Address(\"erd1...\"),\n    abi: abi,\n  });\n  console.log(contract);\n}\n\nabi().then((res) => {\n  console.log(res);\n});\ninterface Props {\n  title: string;\n  initialCount: number;\n}\n\nconst Home: FC<Props> = ({ title, initialCount }) => {\n  const [count, setCount] = useState(0);\n  const { address } = useGetAccountInfo();\n  const add = (factor = 1) => {\n    if (factor < 0) {\n      if (count > 0) setCount(count + factor);\n    } else {\n      setCount(count + factor);\n    }\n  };\n\n  return (\n    <div\n      className=\"d-flex flex-fill align-items-center container\"\n      style={{\n        backgroundColor: \"#1e8520\",\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <div className=\"row w-100 justify-content-between\">\n        <div className=\"col-12 col-md-8 col-lg-5 mx-auto\">\n          <img\n            src={String(logo)}\n            alt=\"Logo\"\n            className=\"rounded mx-auto d-block\"\n            style={{\n              width: \"370px\",\n              height: \"320px\",\n              margin: \"15px\",\n              padding: \"25px\",\n            }}\n          />\n\n          <div className=\"card shadow-sm rounded border border-warning p-4\">\n            <div className=\"card-body text-center\">\n              <img\n                src={String(gif1)}\n                className=\"rounded border rounded-circle mx-auto d-block\"\n                style={{\n                  width: \"320px\",\n                  height: \"320px\",\n                  border: \"10px\",\n                  margin: \"15px\",\n                }}\n                alt=\"gif\"\n              ></img>\n              <h2 className=\"mb-3\" data-testid=\"title\">\n                {dAppName}\n              </h2>\n              <div className=\"container\">\n                {address ? (\n                  <button\n                    className=\"btn btn-warning btn-lg mt-3 text-white\"\n                    style={{\n                      margin: \"10px\",\n                    }}\n                    onClick={() => add()}\n                  >\n                    +\n                  </button>\n                ) : null}\n                {address ? <h5>{count}</h5> : null}\n                {address ? (\n                  <button\n                    className=\"btn btn-secondary btn-lg mt-3 text-white\"\n                    style={{\n                      margin: \"5px\",\n                    }}\n                    onClick={() => add(-1)}\n                  >\n                    -\n                  </button>\n                ) : null}\n              </div>\n              {address ? (\n                <button\n                  className=\"btn btn-warning btn-lg mt-3 text-white\"\n                  style={{\n                    margin: \"5px\",\n                  }}\n                >\n                  Mint\n                </button>\n              ) : null}{\" \"}\n              {address ? (\n                <button\n                  className=\"btn btn-secondary btn-lg mt-3 text-white\"\n                  style={{\n                    margin: \"5px\",\n                  }}\n                  onClick={() => {\n                    window.open(\n                      \"https://deadrare.io/collection/ZEB-9k4d2j\",\n                      \"_blank\"\n                    );\n                  }}\n                >\n                  DeadRare\n                </button>\n              ) : null}\n              <br />\n              <br />\n              <p className=\"mb-3\">\n                This is the official N4P foresters NFTs Minting Site\n                <br /> Login using your Elrond wallet.\n              </p>\n              {!address ? (\n                <Link\n                  to={routeNames.unlock}\n                  className=\"btn btn-primary mt-3 text-white\"\n                  data-testid=\"loginBtn\"\n                >\n                  Login\n                </Link>\n              ) : null}\n            </div>\n            <img\n              src={String(logo)}\n              className=\"rounded float-right\"\n              alt=\"...\"\n            ></img>\n          </div>\n\n          <p\n            style={{\n              padding: \"15px\",\n              textAlign: \"center\",\n              alignContent: \"center\",\n              color: \"white\",\n            }}\n          >\n            We have set the gas limit to 1000 for the contract to successfully\n            mint your NFT. We recommend that you do not lower the gas limit.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/home/adam/NFT_Minting_dApp/src/components/Layout/Navbar/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/TopInfo.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/index.tsx",["92"],"import React from 'react';\nimport {\n  useGetAccountInfo,\n  DappUI,\n  transactionServices,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\nimport { getTransactions } from 'apiRequests';\nimport { contractAddress } from 'config';\nimport TransactionsList from './TransactionsList';\nimport { StateType } from './types';\n\nconst Transactions = () => {\n  const {\n    network: { apiAddress }\n  } = useGetNetworkConfig();\n  const { success, fail, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const [state, setState] = React.useState<StateType>({\n    transactions: [],\n    transactionsFetched: undefined\n  });\n  const account = useGetAccountInfo();\n\n  const fetchData = () => {\n    if (success || fail || !hasActiveTransactions) {\n      getTransactions({\n        apiAddress,\n        address: account.address,\n        timeout: 3000,\n        contractAddress\n      }).then(({ data, success: transactionsFetched }) => {\n        refreshAccount();\n        setState({\n          transactions: data,\n          transactionsFetched\n        });\n      });\n    }\n  };\n\n  React.useEffect(fetchData, [success, fail, hasActiveTransactions]);\n\n  const { transactions } = state;\n\n  return transactions.length > 0 ? (\n    <TransactionsList transactions={transactions} />\n  ) : (\n    <div className='my-5'>\n      <DappUI.PageState\n        icon={faExchangeAlt}\n        className='text-muted fa-3x'\n        title='No Transactions'\n      />\n    </div>\n  );\n};\n\nexport default Transactions;\n","/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Actions/index.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/TransactionsList.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/StatusIcon.tsx",[],"/home/adam/NFT_Minting_dApp/src/pages/Dashboard/Transactions/txStatus.tsx",[],"/home/adam/NFT_Minting_dApp/src/apiRequests/index.tsx",["93"],"import axios from \"axios\";\nimport { promises } from \"fs\";\ninterface GetLatestTransactionsType {\n  apiAddress: string;\n  address: string;\n  contractAddress: string;\n  timeout: number;\n  page?: number;\n  url?: string;\n}\n\nconst fetchTransactions = (url: string) =>\n  async function getTransactions({\n    apiAddress,\n    address,\n    contractAddress,\n    timeout,\n  }: GetLatestTransactionsType) {\n    try {\n      const { data } = await axios.get(`${apiAddress}${url}`, {\n        params: {\n          sender: address,\n          receiver: contractAddress,\n          condition: \"must\",\n          size: 25,\n        },\n        timeout,\n      });\n\n      return {\n        data: data,\n        success: data !== undefined,\n      };\n    } catch (err) {\n      return {\n        success: false,\n      };\n    }\n  };\n\nexport const getTransactions = fetchTransactions(\"/transactions\");\nexport const getTransactionsCount = fetchTransactions(\"/transactions/count\");\n",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":16},{"ruleId":"98","severity":1,"message":"102","line":8,"column":3,"nodeType":"100","messageId":"101","endLine":8,"endColumn":14},{"ruleId":"98","severity":1,"message":"103","line":9,"column":3,"nodeType":"100","messageId":"101","endLine":9,"endColumn":8},{"ruleId":"98","severity":1,"message":"104","line":10,"column":3,"nodeType":"100","messageId":"101","endLine":10,"endColumn":10},{"ruleId":"98","severity":1,"message":"105","line":11,"column":3,"nodeType":"100","messageId":"101","endLine":11,"endColumn":11},{"ruleId":"98","severity":1,"message":"106","line":12,"column":3,"nodeType":"100","messageId":"101","endLine":12,"endColumn":11},{"ruleId":"98","severity":1,"message":"107","line":13,"column":3,"nodeType":"100","messageId":"101","endLine":13,"endColumn":21},{"ruleId":"98","severity":1,"message":"108","line":14,"column":3,"nodeType":"100","messageId":"101","endLine":14,"endColumn":10},{"ruleId":"98","severity":1,"message":"109","line":15,"column":3,"nodeType":"100","messageId":"101","endLine":15,"endColumn":21},{"ruleId":"98","severity":1,"message":"110","line":17,"column":3,"nodeType":"100","messageId":"101","endLine":17,"endColumn":16},{"ruleId":"98","severity":1,"message":"111","line":18,"column":3,"nodeType":"100","messageId":"101","endLine":18,"endColumn":19},{"ruleId":"98","severity":1,"message":"112","line":43,"column":7,"nodeType":"100","messageId":"101","endLine":43,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":45,"column":30,"nodeType":"115","endLine":45,"endColumn":68,"suggestions":"116"},{"ruleId":"98","severity":1,"message":"117","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":18},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"@typescript-eslint/no-unused-vars","'logout' is defined but never used.","Identifier","unusedVar","'Transaction' is defined but never used.","'Nonce' is defined but never used.","'Balance' is defined but never used.","'GasPrice' is defined but never used.","'GasLimit' is defined but never used.","'TransactionPayload' is defined but never used.","'ChainID' is defined but never used.","'TransactionVersion' is defined but never used.","'NetworkConfig' is defined but never used.","'GasPriceModifier' is defined but never used.","'abiRegistry' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'account.address' and 'apiAddress'. Either include them or remove the dependency array.","ArrayExpression",["120"],"'promises' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [success, fail, hasActiveTransactions, apiAddress, account.address]",{"range":"123","text":"124"},[1209,1247],"[success, fail, hasActiveTransactions, apiAddress, account.address]"]