{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProxyNetworkProvider = void 0;\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst accounts_1 = require(\"./accounts\");\n\nconst networkConfig_1 = require(\"./networkConfig\");\n\nconst tokens_1 = require(\"./tokens\");\n\nconst transactions_1 = require(\"./transactions\");\n\nconst transactionStatus_1 = require(\"./transactionStatus\");\n\nconst errors_1 = require(\"./errors\");\n\nconst config_1 = require(\"./config\");\n\nconst networkStatus_1 = require(\"./networkStatus\");\n\nconst contractQueryResponse_1 = require(\"./contractQueryResponse\");\n\nconst tokenDefinitions_1 = require(\"./tokenDefinitions\");\n\nconst contractQueryRequest_1 = require(\"./contractQueryRequest\");\n\nconst constants_1 = require(\"./constants\"); // TODO: Find & remove duplicate code between \"ProxyNetworkProvider\" and \"ApiNetworkProvider\".\n\n\nclass ProxyNetworkProvider {\n  constructor(url, config) {\n    this.url = url;\n    this.config = Object.assign(Object.assign({}, config_1.defaultAxiosConfig), config);\n  }\n\n  getNetworkConfig() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(\"network/config\");\n      let networkConfig = networkConfig_1.NetworkConfig.fromHttpResponse(response.config);\n      return networkConfig;\n    });\n  }\n\n  getNetworkStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(\"network/status/4294967295\");\n      let networkStatus = networkStatus_1.NetworkStatus.fromHttpResponse(response.status);\n      return networkStatus;\n    });\n  }\n\n  getNetworkStakeStatistics() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: Implement wrt.:\n      // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/stake/stake.service.ts\n      throw new Error(\"Method not implemented.\");\n    });\n  }\n\n  getNetworkGeneralStatistics() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: Implement wrt. (full implementation may not be possible):\n      // https://github.com/ElrondNetwork/api.elrond.com/blob/main/src/endpoints/network/network.service.ts\n      throw new Error(\"Method not implemented.\");\n    });\n  }\n\n  getAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`address/${address.bech32()}`);\n      let account = accounts_1.AccountOnNetwork.fromHttpResponse(response.account);\n      return account;\n    });\n  }\n\n  getFungibleTokensOfAccount(address, _pagination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `address/${address.bech32()}/esdt`;\n      let response = yield this.doGetGeneric(url);\n      let responseItems = Object.values(response.esdts); // Skip NFTs / SFTs.\n\n      let responseItemsFiltered = responseItems.filter(item => !item.nonce);\n      let tokens = responseItemsFiltered.map(item => tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(item)); // TODO: Fix sorting\n\n      tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n      return tokens;\n    });\n  }\n\n  getNonFungibleTokensOfAccount(address, _pagination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `address/${address.bech32()}/esdt`;\n      let response = yield this.doGetGeneric(url);\n      let responseItems = Object.values(response.esdts); // Skip fungible tokens.\n\n      let responseItemsFiltered = responseItems.filter(item => item.nonce >= 0);\n      let tokens = responseItemsFiltered.map(item => tokens_1.NonFungibleTokenOfAccountOnNetwork.fromProxyHttpResponse(item)); // TODO: Fix sorting\n\n      tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n      return tokens;\n    });\n  }\n\n  getFungibleTokenOfAccount(address, tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`address/${address.bech32()}/esdt/${tokenIdentifier}`);\n      let tokenData = tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(response.tokenData);\n      return tokenData;\n    });\n  }\n\n  getNonFungibleTokenOfAccount(address, collection, nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`address/${address.bech32()}/nft/${collection}/nonce/${nonce.valueOf()}`);\n      let tokenData = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromProxyHttpResponseByNonce(response.tokenData);\n      return tokenData;\n    });\n  }\n\n  getTransaction(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = this.buildUrlWithQueryParameters(`transaction/${txHash}`, {\n        withResults: \"true\"\n      });\n      let response = yield this.doGetGeneric(url);\n      let transaction = transactions_1.TransactionOnNetwork.fromProxyHttpResponse(txHash, response.transaction);\n      return transaction;\n    });\n  }\n\n  getTransactionStatus(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`transaction/${txHash}/status`);\n      let status = new transactionStatus_1.TransactionStatus(response.status);\n      return status;\n    });\n  }\n\n  sendTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPostGeneric(\"transaction/send\", tx.toSendable());\n      return response.txHash;\n    });\n  }\n\n  simulateTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPostGeneric(\"transaction/simulate\", tx.toSendable());\n      return response;\n    });\n  }\n\n  queryContract(query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let request = new contractQueryRequest_1.ContractQueryRequest(query).toHttpRequest();\n        let response = yield this.doPostGeneric(\"vm-values/query\", request);\n        return contractQueryResponse_1.ContractQueryResponse.fromHttpResponse(response.data);\n      } catch (error) {\n        throw new errors_1.ErrContractQuery(error);\n      }\n    });\n  }\n\n  getDefinitionOfFungibleToken(tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let properties = yield this.getTokenProperties(tokenIdentifier);\n      let definition = tokenDefinitions_1.DefinitionOfFungibleTokenOnNetwork.fromResponseOfGetTokenProperties(tokenIdentifier, properties);\n      return definition;\n    });\n  }\n\n  getTokenProperties(identifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let encodedIdentifier = Buffer.from(identifier).toString(\"hex\");\n      let queryResponse = yield this.queryContract({\n        address: constants_1.EsdtContractAddress,\n        func: \"getTokenProperties\",\n        getEncodedArguments: () => [encodedIdentifier]\n      });\n      let properties = queryResponse.getReturnDataParts();\n      return properties;\n    });\n  }\n\n  getDefinitionOfTokenCollection(collection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let properties = yield this.getTokenProperties(collection);\n      let definition = tokenDefinitions_1.DefinitionOfTokenCollectionOnNetwork.fromResponseOfGetTokenProperties(collection, properties);\n      return definition;\n    });\n  }\n\n  getNonFungibleToken(_collection, _nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new Error(\"Method not implemented.\");\n    });\n  }\n\n  doGetGeneric(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGet(resourceUrl);\n      return response;\n    });\n  }\n\n  doPostGeneric(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPost(resourceUrl, payload);\n      return response;\n    });\n  }\n\n  doGet(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `${this.url}/${resourceUrl}`;\n\n      try {\n        let response = yield axios_1.default.get(url, this.config);\n        let payload = response.data.data;\n        return payload;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  doPost(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `${this.url}/${resourceUrl}`;\n\n      try {\n        let response = yield axios_1.default.post(url, payload, Object.assign(Object.assign({}, this.config), {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }));\n        let responsePayload = response.data.data;\n        return responsePayload;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  buildUrlWithQueryParameters(endpoint, params) {\n    let searchParams = new URLSearchParams();\n\n    for (let [key, value] of Object.entries(params)) {\n      if (value) {\n        searchParams.append(key, value);\n      }\n    }\n\n    return `${endpoint}?${searchParams.toString()}`;\n  }\n\n  handleApiError(error, resourceUrl) {\n    if (!error.response) {\n      console.warn(error);\n      throw new errors_1.ErrNetworkProvider(resourceUrl, error.toString(), error);\n    }\n\n    let errorData = error.response.data;\n    let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\n    throw new errors_1.ErrNetworkProvider(resourceUrl, originalErrorMessage, error);\n  }\n\n}\n\nexports.ProxyNetworkProvider = ProxyNetworkProvider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,2C,CAEA;;;AACA,MAAaA,oBAAb,CAAiC;AAI7BC,cAAYC,GAAZ,EAAyBC,MAAzB,EAAoD;AAChD,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAWC,gCAAQC,2BAAR,GAA+BF,MAA/B,CAAX;AACH;;AAEKG,kBAAgB;;AAClB,UAAIC,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkB,gBAAlB,CAArB;AACA,UAAIC,aAAa,GAAGC,8BAAcC,gBAAd,CAA+BJ,QAAQ,CAACJ,MAAxC,CAApB;AACA,aAAOM,aAAP;AACH;AAAA;;AAEKG,kBAAgB;;AAClB,UAAIL,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkB,2BAAlB,CAArB;AACA,UAAIK,aAAa,GAAGC,8BAAcH,gBAAd,CAA+BJ,QAAQ,CAACQ,MAAxC,CAApB;AACA,aAAOF,aAAP;AACH;AAAA;;AAEKG,2BAAyB;;AAC3B;AACA;AACA,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;AAAA;;AAEKC,6BAA2B;;AAC7B;AACA;AACA,YAAM,IAAID,KAAJ,CAAU,yBAAV,CAAN;AACH;AAAA;;AAEKE,YAAU,CAACC,OAAD,EAAkB;;AAC9B,UAAIb,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkB,WAAWY,OAAO,CAACC,MAAR,EAAgB,EAA7C,CAArB;AACA,UAAIC,OAAO,GAAGC,4BAAiBZ,gBAAjB,CAAkCJ,QAAQ,CAACe,OAA3C,CAAd;AACA,aAAOA,OAAP;AACH;AAAA;;AAEKE,4BAA0B,CAACJ,OAAD,EAAoBK,WAApB,EAA6C;;AACzE,UAAIvB,GAAG,GAAG,WAAWkB,OAAO,CAACC,MAAR,EAAgB,OAArC;AACA,UAAId,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkBN,GAAlB,CAArB;AACA,UAAIwB,aAAa,GAAUtB,MAAM,CAACuB,MAAP,CAAcpB,QAAQ,CAACqB,KAAvB,CAA3B,EACA;;AACA,UAAIC,qBAAqB,GAAGH,aAAa,CAACI,MAAd,CAAqBC,IAAI,IAAI,CAACA,IAAI,CAACC,KAAnC,CAA5B;AACA,UAAIC,MAAM,GAAGJ,qBAAqB,CAACK,GAAtB,CAA0BH,IAAI,IAAII,yCAAgCxB,gBAAhC,CAAiDoB,IAAjD,CAAlC,CAAb,EAEA;;AACAE,YAAM,CAACG,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,UAAF,CAAaC,aAAb,CAA2BF,CAAC,CAACC,UAA7B,CAAtB;AACA,aAAON,MAAP;AACH;AAAA;;AAEKQ,+BAA6B,CAACrB,OAAD,EAAoBK,WAApB,EAA6C;;AAC5E,UAAIvB,GAAG,GAAG,WAAWkB,OAAO,CAACC,MAAR,EAAgB,OAArC;AACA,UAAId,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkBN,GAAlB,CAArB;AACA,UAAIwB,aAAa,GAAUtB,MAAM,CAACuB,MAAP,CAAcpB,QAAQ,CAACqB,KAAvB,CAA3B,EACA;;AACA,UAAIC,qBAAqB,GAAGH,aAAa,CAACI,MAAd,CAAqBC,IAAI,IAAIA,IAAI,CAACC,KAAL,IAAc,CAA3C,CAA5B;AACA,UAAIC,MAAM,GAAGJ,qBAAqB,CAACK,GAAtB,CAA0BH,IAAI,IAAII,4CAAmCO,qBAAnC,CAAyDX,IAAzD,CAAlC,CAAb,EAEA;;AACAE,YAAM,CAACG,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,UAAF,CAAaC,aAAb,CAA2BF,CAAC,CAACC,UAA7B,CAAtB;AACA,aAAON,MAAP;AACH;AAAA;;AAEKU,2BAAyB,CAACvB,OAAD,EAAoBwB,eAApB,EAA2C;;AACtE,UAAIrC,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkB,WAAWY,OAAO,CAACC,MAAR,EAAgB,SAASuB,eAAe,EAArE,CAArB;AACA,UAAIC,SAAS,GAAGV,yCAAgCxB,gBAAhC,CAAiDJ,QAAQ,CAACsC,SAA1D,CAAhB;AACA,aAAOA,SAAP;AACH;AAAA;;AAEKC,8BAA4B,CAAC1B,OAAD,EAAoB2B,UAApB,EAAwCf,KAAxC,EAAqD;;AACnF,UAAIzB,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkB,WAAWY,OAAO,CAACC,MAAR,EAAgB,QAAQ0B,UAAU,UAAUf,KAAK,CAACgB,OAAN,EAAe,EAAxF,CAArB;AACA,UAAIH,SAAS,GAAGV,4CAAmCc,4BAAnC,CAAgE1C,QAAQ,CAACsC,SAAzE,CAAhB;AACA,aAAOA,SAAP;AACH;AAAA;;AAEKK,gBAAc,CAACC,MAAD,EAAe;;AAC/B,UAAIjD,GAAG,GAAG,KAAKkD,2BAAL,CAAiC,eAAeD,MAAM,EAAtD,EAA0D;AAAEE,mBAAW,EAAE;AAAf,OAA1D,CAAV;AACA,UAAI9C,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkBN,GAAlB,CAArB;AACA,UAAIoD,WAAW,GAAGC,oCAAqBb,qBAArB,CAA2CS,MAA3C,EAAmD5C,QAAQ,CAAC+C,WAA5D,CAAlB;AACA,aAAOA,WAAP;AACH;AAAA;;AAEKE,sBAAoB,CAACL,MAAD,EAAe;;AACrC,UAAI5C,QAAQ,GAAG,MAAM,KAAKC,YAAL,CAAkB,eAAe2C,MAAM,SAAvC,CAArB;AACA,UAAIpC,MAAM,GAAG,IAAI0C,qCAAJ,CAAsBlD,QAAQ,CAACQ,MAA/B,CAAb;AACA,aAAOA,MAAP;AACH;AAAA;;AAEK2C,iBAAe,CAACC,EAAD,EAAiB;;AAClC,UAAIpD,QAAQ,GAAG,MAAM,KAAKqD,aAAL,CAAmB,kBAAnB,EAAuCD,EAAE,CAACE,UAAH,EAAvC,CAArB;AACA,aAAOtD,QAAQ,CAAC4C,MAAhB;AACH;AAAA;;AAEKW,qBAAmB,CAACH,EAAD,EAAiB;;AACtC,UAAIpD,QAAQ,GAAG,MAAM,KAAKqD,aAAL,CAAmB,sBAAnB,EAA2CD,EAAE,CAACE,UAAH,EAA3C,CAArB;AACA,aAAOtD,QAAP;AACH;AAAA;;AAEKwD,eAAa,CAACC,KAAD,EAAsB;;AACrC,UAAI;AACA,YAAIC,OAAO,GAAG,IAAIC,2CAAJ,CAAyBF,KAAzB,EAAgCG,aAAhC,EAAd;AACA,YAAI5D,QAAQ,GAAG,MAAM,KAAKqD,aAAL,CAAmB,iBAAnB,EAAsCK,OAAtC,CAArB;AACA,eAAOG,8CAAsBzD,gBAAtB,CAAuCJ,QAAQ,CAAC8D,IAAhD,CAAP;AACH,OAJD,CAIE,OAAOC,KAAP,EAAmB;AACjB,cAAM,IAAIC,yBAAJ,CAAqBD,KAArB,CAAN;AACH;AACJ;AAAA;;AAEKE,8BAA4B,CAAC5B,eAAD,EAAwB;;AACtD,UAAI6B,UAAU,GAAG,MAAM,KAAKC,kBAAL,CAAwB9B,eAAxB,CAAvB;AACA,UAAI+B,UAAU,GAAGC,sDAAmCC,gCAAnC,CAAoEjC,eAApE,EAAqF6B,UAArF,CAAjB;AACA,aAAOE,UAAP;AACH;AAAA;;AAEaD,oBAAkB,CAACnC,UAAD,EAAmB;;AAC/C,UAAIuC,iBAAiB,GAAGC,MAAM,CAACC,IAAP,CAAYzC,UAAZ,EAAwB0C,QAAxB,CAAiC,KAAjC,CAAxB;AAEA,UAAIC,aAAa,GAAG,MAAM,KAAKnB,aAAL,CAAmB;AACzC3C,eAAO,EAAE+D,+BADgC;AAEzCC,YAAI,EAAE,oBAFmC;AAGzCC,2BAAmB,EAAE,MAAM,CAACP,iBAAD;AAHc,OAAnB,CAA1B;AAMA,UAAIL,UAAU,GAAGS,aAAa,CAACI,kBAAd,EAAjB;AACA,aAAOb,UAAP;AACH;AAAA;;AAEKc,gCAA8B,CAACxC,UAAD,EAAmB;;AACnD,UAAI0B,UAAU,GAAG,MAAM,KAAKC,kBAAL,CAAwB3B,UAAxB,CAAvB;AACA,UAAI4B,UAAU,GAAGC,wDAAqCC,gCAArC,CAAsE9B,UAAtE,EAAkF0B,UAAlF,CAAjB;AACA,aAAOE,UAAP;AACH;AAAA;;AAEKa,qBAAmB,CAACC,WAAD,EAAsBC,MAAtB,EAAoC;;AACzD,YAAM,IAAIzE,KAAJ,CAAU,yBAAV,CAAN;AACH;AAAA;;AAEKT,cAAY,CAACmF,WAAD,EAAoB;;AAClC,UAAIpF,QAAQ,GAAG,MAAM,KAAKqF,KAAL,CAAWD,WAAX,CAArB;AACA,aAAOpF,QAAP;AACH;AAAA;;AAEKqD,eAAa,CAAC+B,WAAD,EAAsBE,OAAtB,EAAkC;;AACjD,UAAItF,QAAQ,GAAG,MAAM,KAAKuF,MAAL,CAAYH,WAAZ,EAAyBE,OAAzB,CAArB;AACA,aAAOtF,QAAP;AACH;AAAA;;AAEaqF,OAAK,CAACD,WAAD,EAAoB;;AACnC,UAAIzF,GAAG,GAAG,GAAG,KAAKA,GAAG,IAAIyF,WAAW,EAApC;;AAEA,UAAI;AACA,YAAIpF,QAAQ,GAAG,MAAMwF,gBAAMC,GAAN,CAAU9F,GAAV,EAAe,KAAKC,MAApB,CAArB;AACA,YAAI0F,OAAO,GAAGtF,QAAQ,CAAC8D,IAAT,CAAcA,IAA5B;AACA,eAAOwB,OAAP;AACH,OAJD,CAIE,OAAOvB,KAAP,EAAc;AACZ,aAAK2B,cAAL,CAAoB3B,KAApB,EAA2BqB,WAA3B;AACH;AACJ;AAAA;;AAEaG,QAAM,CAACH,WAAD,EAAsBE,OAAtB,EAAkC;;AAClD,UAAI3F,GAAG,GAAG,GAAG,KAAKA,GAAG,IAAIyF,WAAW,EAApC;;AAEA,UAAI;AACA,YAAIpF,QAAQ,GAAG,MAAMwF,gBAAMG,IAAN,CAAWhG,GAAX,EAAgB2F,OAAhB,EAAuBzF,gCACrC,KAAKD,MADgC,GAC1B;AACdgG,iBAAO,EAAE;AACL,4BAAgB;AADX;AADK,SAD0B,CAAvB,CAArB;AAMA,YAAIC,eAAe,GAAG7F,QAAQ,CAAC8D,IAAT,CAAcA,IAApC;AACA,eAAO+B,eAAP;AACH,OATD,CASE,OAAO9B,KAAP,EAAc;AACZ,aAAK2B,cAAL,CAAoB3B,KAApB,EAA2BqB,WAA3B;AACH;AACJ;AAAA;;AAEOvC,6BAA2B,CAACiD,QAAD,EAAmBC,MAAnB,EAAiD;AAChF,QAAIC,YAAY,GAAG,IAAIC,eAAJ,EAAnB;;AAEA,SAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBtG,MAAM,CAACuG,OAAP,CAAeL,MAAf,CAAzB,EAAiD;AAC7C,UAAII,KAAJ,EAAW;AACPH,oBAAY,CAACK,MAAb,CAAoBH,GAApB,EAAyBC,KAAzB;AACH;AACJ;;AAED,WAAO,GAAGL,QAAQ,IAAIE,YAAY,CAACtB,QAAb,EAAuB,EAA7C;AACH;;AAEOgB,gBAAc,CAAC3B,KAAD,EAAaqB,WAAb,EAAgC;AAClD,QAAI,CAACrB,KAAK,CAAC/D,QAAX,EAAqB;AACjBsG,aAAO,CAACC,IAAR,CAAaxC,KAAb;AACA,YAAM,IAAIC,2BAAJ,CAAuBoB,WAAvB,EAAoCrB,KAAK,CAACW,QAAN,EAApC,EAAsDX,KAAtD,CAAN;AACH;;AAED,QAAIyC,SAAS,GAAGzC,KAAK,CAAC/D,QAAN,CAAe8D,IAA/B;AACA,QAAI2C,oBAAoB,GAAGD,SAAS,CAACzC,KAAV,IAAmByC,SAAS,CAACE,OAA7B,IAAwCC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAAnE;AACA,UAAM,IAAIxC,2BAAJ,CAAuBoB,WAAvB,EAAoCqB,oBAApC,EAA0D1C,KAA1D,CAAN;AACH;;AAvM4B;;AAAjC8C","names":["ProxyNetworkProvider","constructor","url","config","Object","config_1","getNetworkConfig","response","doGetGeneric","networkConfig","networkConfig_1","fromHttpResponse","getNetworkStatus","networkStatus","networkStatus_1","status","getNetworkStakeStatistics","Error","getNetworkGeneralStatistics","getAccount","address","bech32","account","accounts_1","getFungibleTokensOfAccount","_pagination","responseItems","values","esdts","responseItemsFiltered","filter","item","nonce","tokens","map","tokens_1","sort","a","b","identifier","localeCompare","getNonFungibleTokensOfAccount","fromProxyHttpResponse","getFungibleTokenOfAccount","tokenIdentifier","tokenData","getNonFungibleTokenOfAccount","collection","valueOf","fromProxyHttpResponseByNonce","getTransaction","txHash","buildUrlWithQueryParameters","withResults","transaction","transactions_1","getTransactionStatus","transactionStatus_1","sendTransaction","tx","doPostGeneric","toSendable","simulateTransaction","queryContract","query","request","contractQueryRequest_1","toHttpRequest","contractQueryResponse_1","data","error","errors_1","getDefinitionOfFungibleToken","properties","getTokenProperties","definition","tokenDefinitions_1","fromResponseOfGetTokenProperties","encodedIdentifier","Buffer","from","toString","queryResponse","constants_1","func","getEncodedArguments","getReturnDataParts","getDefinitionOfTokenCollection","getNonFungibleToken","_collection","_nonce","resourceUrl","doGet","payload","doPost","axios_1","get","handleApiError","post","headers","responsePayload","endpoint","params","searchParams","URLSearchParams","key","value","entries","append","console","warn","errorData","originalErrorMessage","message","JSON","stringify","exports"],"sourceRoot":"","sources":["../src/proxyNetworkProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}