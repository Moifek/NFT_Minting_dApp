{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionStatus = void 0;\n/**\n * An abstraction for handling and interpreting the \"status\" field of a transaction.\n */\n\nclass TransactionStatus {\n  /**\n   * Creates a new TransactionStatus object.\n   */\n  constructor(status) {\n    this.status = (status || \"\").toLowerCase();\n  }\n  /**\n   * Creates an unknown status.\n   */\n\n\n  static createUnknown() {\n    return new TransactionStatus(\"unknown\");\n  }\n  /**\n   * Returns whether the transaction is pending (e.g. in mempool).\n   */\n\n\n  isPending() {\n    return this.status == \"received\" || this.status == \"pending\";\n  }\n  /**\n   * Returns whether the transaction has been executed (not necessarily with success).\n   */\n\n\n  isExecuted() {\n    return this.isSuccessful() || this.isFailed() || this.isInvalid();\n  }\n  /**\n   * Returns whether the transaction has been executed successfully.\n   */\n\n\n  isSuccessful() {\n    return this.status == \"executed\" || this.status == \"success\" || this.status == \"successful\";\n  }\n  /**\n   * Returns whether the transaction has been executed, but with a failure.\n   */\n\n\n  isFailed() {\n    return this.status == \"fail\" || this.status == \"failed\" || this.status == \"unsuccessful\" || this.isInvalid();\n  }\n  /**\n   * Returns whether the transaction has been executed, but marked as invalid (e.g. due to \"insufficient funds\").\n   */\n\n\n  isInvalid() {\n    return this.status == \"invalid\";\n  }\n\n  toString() {\n    return this.status;\n  }\n\n  valueOf() {\n    return this.status;\n  }\n\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.status == other.status;\n  }\n\n}\n\nexports.TransactionStatus = TransactionStatus;","map":{"version":3,"sources":["../src/transactionStatus.ts"],"names":[],"mappings":";;;;;;AAAA;;AAEG;;AACH,MAAa,iBAAb,CAA8B;EAM1B;;AAEG;EACH,WAAA,CAAY,MAAZ,EAA0B;IACtB,KAAK,MAAL,GAAc,CAAC,MAAM,IAAI,EAAX,EAAe,WAAf,EAAd;EACH;EAED;;AAEG;;;EACiB,OAAb,aAAa,GAAA;IAChB,OAAO,IAAI,iBAAJ,CAAsB,SAAtB,CAAP;EACH;EAED;;AAEG;;;EACH,SAAS,GAAA;IACL,OACI,KAAK,MAAL,IAAe,UAAf,IACA,KAAK,MAAL,IAAe,SAFnB;EAIH;EAED;;AAEG;;;EACH,UAAU,GAAA;IACN,OAAO,KAAK,YAAL,MAAuB,KAAK,QAAL,EAAvB,IAA0C,KAAK,SAAL,EAAjD;EACH;EAED;;AAEG;;;EACH,YAAY,GAAA;IACR,OACI,KAAK,MAAL,IAAe,UAAf,IACA,KAAK,MAAL,IAAe,SADf,IAEA,KAAK,MAAL,IAAe,YAHnB;EAKH;EAED;;AAEG;;;EACH,QAAQ,GAAA;IACJ,OACI,KAAK,MAAL,IAAe,MAAf,IACA,KAAK,MAAL,IAAe,QADf,IAEA,KAAK,MAAL,IAAe,cAFf,IAGA,KAAK,SAAL,EAJJ;EAMH;EAED;;AAEG;;;EACH,SAAS,GAAA;IACL,OAAO,KAAK,MAAL,IAAe,SAAtB;EACH;;EAED,QAAQ,GAAA;IACJ,OAAO,KAAK,MAAZ;EACH;;EAED,OAAO,GAAA;IACH,OAAO,KAAK,MAAZ;EACH;;EAED,MAAM,CAAC,KAAD,EAAyB;IAC3B,IAAI,CAAC,KAAL,EAAY;MACR,OAAO,KAAP;IACH;;IAED,OAAO,KAAK,MAAL,IAAe,KAAK,CAAC,MAA5B;EACH;;AAjFyB;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionStatus = void 0;\n/**\n * An abstraction for handling and interpreting the \"status\" field of a transaction.\n */\nclass TransactionStatus {\n    /**\n     * Creates a new TransactionStatus object.\n     */\n    constructor(status) {\n        this.status = (status || \"\").toLowerCase();\n    }\n    /**\n     * Creates an unknown status.\n     */\n    static createUnknown() {\n        return new TransactionStatus(\"unknown\");\n    }\n    /**\n     * Returns whether the transaction is pending (e.g. in mempool).\n     */\n    isPending() {\n        return (this.status == \"received\" ||\n            this.status == \"pending\");\n    }\n    /**\n     * Returns whether the transaction has been executed (not necessarily with success).\n     */\n    isExecuted() {\n        return this.isSuccessful() || this.isFailed() || this.isInvalid();\n    }\n    /**\n     * Returns whether the transaction has been executed successfully.\n     */\n    isSuccessful() {\n        return (this.status == \"executed\" ||\n            this.status == \"success\" ||\n            this.status == \"successful\");\n    }\n    /**\n     * Returns whether the transaction has been executed, but with a failure.\n     */\n    isFailed() {\n        return (this.status == \"fail\" ||\n            this.status == \"failed\" ||\n            this.status == \"unsuccessful\" ||\n            this.isInvalid());\n    }\n    /**\n     * Returns whether the transaction has been executed, but marked as invalid (e.g. due to \"insufficient funds\").\n     */\n    isInvalid() {\n        return this.status == \"invalid\";\n    }\n    toString() {\n        return this.status;\n    }\n    valueOf() {\n        return this.status;\n    }\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        return this.status == other.status;\n    }\n}\nexports.TransactionStatus = TransactionStatus;\n//# sourceMappingURL=transactionStatus.js.map"]},"metadata":{},"sourceType":"script"}