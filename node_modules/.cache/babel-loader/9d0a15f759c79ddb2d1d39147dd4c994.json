{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserVerifier = void 0;\n\nconst userKeys_1 = require(\"./userKeys\");\n/**\r\n * ed25519 signature verification\r\n */\n\n\nclass UserVerifier {\n  constructor(publicKey) {\n    this.publicKey = publicKey;\n  }\n\n  static fromAddress(address) {\n    let publicKey = new userKeys_1.UserPublicKey(address.pubkey());\n    return new UserVerifier(publicKey);\n  }\n  /**\r\n   * Verify a message's signature.\r\n   * @param message the message to be verified.\r\n   */\n\n\n  verify(message) {\n    return this.publicKey.verify(message.serializeForSigning(this.publicKey.toAddress()), Buffer.from(message.getSignature().hex(), 'hex'));\n  }\n\n}\n\nexports.UserVerifier = UserVerifier;","map":{"version":3,"sources":["../../src/walletcore/userVerifier.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,YAAb,CAAyB;EAGvB,WAAA,CAAY,SAAZ,EAAoC;IAClC,KAAK,SAAL,GAAiB,SAAjB;EACD;;EAEiB,OAAX,WAAW,CAAC,OAAD,EAAiB;IACjC,IAAI,SAAS,GAAG,IAAI,UAAA,CAAA,aAAJ,CAAkB,OAAO,CAAC,MAAR,EAAlB,CAAhB;IACA,OAAO,IAAI,YAAJ,CAAiB,SAAjB,CAAP;EACD;EAED;;;AAGG;;;EACH,MAAM,CAAC,OAAD,EAAqB;IACzB,OAAO,KAAK,SAAL,CAAe,MAAf,CACL,OAAO,CAAC,mBAAR,CAA4B,KAAK,SAAL,CAAe,SAAf,EAA5B,CADK,EAEL,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,YAAR,GAAuB,GAAvB,EAAZ,EAA0C,KAA1C,CAFK,CAAP;EAGD;;AApBsB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserVerifier = void 0;\r\nconst userKeys_1 = require(\"./userKeys\");\r\n/**\r\n * ed25519 signature verification\r\n */\r\nclass UserVerifier {\r\n    constructor(publicKey) {\r\n        this.publicKey = publicKey;\r\n    }\r\n    static fromAddress(address) {\r\n        let publicKey = new userKeys_1.UserPublicKey(address.pubkey());\r\n        return new UserVerifier(publicKey);\r\n    }\r\n    /**\r\n     * Verify a message's signature.\r\n     * @param message the message to be verified.\r\n     */\r\n    verify(message) {\r\n        return this.publicKey.verify(message.serializeForSigning(this.publicKey.toAddress()), Buffer.from(message.getSignature().hex(), 'hex'));\r\n    }\r\n}\r\nexports.UserVerifier = UserVerifier;\r\n//# sourceMappingURL=userVerifier.js.map"]},"metadata":{},"sourceType":"script"}