{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypedEvent = void 0;\n/**\r\n * An event (a \"Subject\" in the context of the Observer pattern).\r\n * One or more {@link Listener} objects can register to this.\r\n *\r\n * Based on: https://basarat.gitbook.io/typescript/main-1/typed-event\r\n */\n\nclass TypedEvent {\n  constructor() {\n    this.listeners = [];\n    this.listenersOnce = [];\n  }\n  /**\r\n   * Registers a listener to this event.\r\n   */\n\n\n  on(listener) {\n    this.listeners.push(listener);\n    return {\n      dispose: () => this.off(listener)\n    };\n  }\n  /**\r\n   * Registers a one-time listener to this event.\r\n   */\n\n\n  once(listener) {\n    this.listenersOnce.push(listener);\n  }\n  /**\r\n   * Unregisters a listener from this event.\r\n   */\n\n\n  off(listener) {\n    var callbackIndex = this.listeners.indexOf(listener);\n\n    if (callbackIndex > -1) {\n      this.listeners.splice(callbackIndex, 1);\n    }\n  }\n  /**\r\n   * Emits an event (with a payload).\r\n   */\n\n\n  emit(event) {\n    // Notify all listeners\n    this.listeners.forEach(listener => listener(event)); // Notify (then clear) \"once\" listeners\n\n    this.listenersOnce.forEach(listener => listener(event));\n    this.listenersOnce = [];\n  }\n\n}\n\nexports.TypedEvent = TypedEvent;","map":{"version":3,"sources":["../src/events.ts"],"names":[],"mappings":";;;;;;AASA;;;;;AAKG;;AACH,MAAa,UAAb,CAAuB;EAAvB,WAAA,GAAA;IACY,KAAA,SAAA,GAA2B,EAA3B;IACA,KAAA,aAAA,GAA+B,EAA/B;EAwCX;EAtCG;;AAEG;;;EACH,EAAE,CAAC,QAAD,EAAsB;IACpB,KAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;IACA,OAAO;MACH,OAAO,EAAE,MAAM,KAAK,GAAL,CAAS,QAAT;IADZ,CAAP;EAGH;EAED;;AAEG;;;EACH,IAAI,CAAC,QAAD,EAAsB;IACtB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,QAAxB;EACH;EAED;;AAEG;;;EACH,GAAG,CAAC,QAAD,EAAsB;IACrB,IAAI,aAAa,GAAG,KAAK,SAAL,CAAe,OAAf,CAAuB,QAAvB,CAApB;;IACA,IAAI,aAAa,GAAG,CAAC,CAArB,EAAwB;MACpB,KAAK,SAAL,CAAe,MAAf,CAAsB,aAAtB,EAAqC,CAArC;IACH;EACJ;EAED;;AAEG;;;EACH,IAAI,CAAC,KAAD,EAAS;IACT;IACA,KAAK,SAAL,CAAe,OAAf,CAAwB,QAAD,IAAc,QAAQ,CAAC,KAAD,CAA7C,EAFS,CAIT;;IACA,KAAK,aAAL,CAAmB,OAAnB,CAA4B,QAAD,IAAc,QAAQ,CAAC,KAAD,CAAjD;IACA,KAAK,aAAL,GAAqB,EAArB;EACH;;AAzCkB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TypedEvent = void 0;\r\n/**\r\n * An event (a \"Subject\" in the context of the Observer pattern).\r\n * One or more {@link Listener} objects can register to this.\r\n *\r\n * Based on: https://basarat.gitbook.io/typescript/main-1/typed-event\r\n */\r\nclass TypedEvent {\r\n    constructor() {\r\n        this.listeners = [];\r\n        this.listenersOnce = [];\r\n    }\r\n    /**\r\n     * Registers a listener to this event.\r\n     */\r\n    on(listener) {\r\n        this.listeners.push(listener);\r\n        return {\r\n            dispose: () => this.off(listener)\r\n        };\r\n    }\r\n    /**\r\n     * Registers a one-time listener to this event.\r\n     */\r\n    once(listener) {\r\n        this.listenersOnce.push(listener);\r\n    }\r\n    /**\r\n     * Unregisters a listener from this event.\r\n     */\r\n    off(listener) {\r\n        var callbackIndex = this.listeners.indexOf(listener);\r\n        if (callbackIndex > -1) {\r\n            this.listeners.splice(callbackIndex, 1);\r\n        }\r\n    }\r\n    /**\r\n     * Emits an event (with a payload).\r\n     */\r\n    emit(event) {\r\n        // Notify all listeners\r\n        this.listeners.forEach((listener) => listener(event));\r\n        // Notify (then clear) \"once\" listeners\r\n        this.listenersOnce.forEach((listener) => listener(event));\r\n        this.listenersOnce = [];\r\n    }\r\n}\r\nexports.TypedEvent = TypedEvent;\r\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"script"}