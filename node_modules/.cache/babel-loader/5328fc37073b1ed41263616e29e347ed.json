{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeMetadata = void 0;\n/**\r\n * The metadata of a Smart Contract, as an abstraction.\r\n */\n\nclass CodeMetadata {\n  /**\r\n   * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.\r\n   *\r\n   * @param upgradeable Whether the contract is upgradeable\r\n   * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)\r\n   * @param payable Whether the contract is payable\r\n   * @param payableBySc Whether the contract is payable by other smart contracts\r\n   */\n  constructor() {\n    let upgradeable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let readable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let payable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let payableBySc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this.upgradeable = upgradeable;\n    this.readable = readable;\n    this.payable = payable;\n    this.payableBySc = payableBySc;\n  }\n  /**\r\n   * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.\r\n   */\n\n\n  toggleUpgradeable(value) {\n    this.upgradeable = value;\n  }\n  /**\r\n   * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.\r\n   */\n\n\n  toggleReadable(value) {\n    this.readable = value;\n  }\n  /**\r\n   * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.\r\n   */\n\n\n  togglePayable(value) {\n    this.payable = value;\n  }\n  /**\r\n   * Adjust the metadata (the `payableBySc` attribute), when preparing the deployment transaction.\r\n   */\n\n\n  togglePayableBySc(value) {\n    this.payableBySc = value;\n  }\n  /**\r\n   * Converts the metadata to the protocol-friendly representation.\r\n   */\n\n\n  toBuffer() {\n    let byteZero = 0;\n    let byteOne = 0;\n\n    if (this.upgradeable) {\n      byteZero |= ByteZero.Upgradeable;\n    }\n\n    if (this.readable) {\n      byteZero |= ByteZero.Readable;\n    }\n\n    if (this.payable) {\n      byteOne |= ByteOne.Payable;\n    }\n\n    if (this.payableBySc) {\n      byteOne |= ByteOne.PayableBySc;\n    }\n\n    return Buffer.from([byteZero, byteOne]);\n  }\n  /**\r\n   * Converts the metadata to a hex-encoded string.\r\n   */\n\n\n  toString() {\n    return this.toBuffer().toString(\"hex\");\n  }\n  /**\r\n   * Converts the metadata to a pretty, plain JavaScript object.\r\n   */\n\n\n  toJSON() {\n    return {\n      upgradeable: this.upgradeable,\n      readable: this.readable,\n      payable: this.payable,\n      payableBySc: this.payableBySc\n    };\n  }\n\n  equals(other) {\n    return this.upgradeable == other.upgradeable && this.readable == other.readable && this.payable == other.payable && this.payableBySc == other.payableBySc;\n  }\n\n}\n\nexports.CodeMetadata = CodeMetadata;\nvar ByteZero;\n\n(function (ByteZero) {\n  ByteZero[ByteZero[\"Upgradeable\"] = 1] = \"Upgradeable\";\n  ByteZero[ByteZero[\"Reserved2\"] = 2] = \"Reserved2\";\n  ByteZero[ByteZero[\"Readable\"] = 4] = \"Readable\";\n})(ByteZero || (ByteZero = {}));\n\nvar ByteOne;\n\n(function (ByteOne) {\n  ByteOne[ByteOne[\"Reserved1\"] = 1] = \"Reserved1\";\n  ByteOne[ByteOne[\"Payable\"] = 2] = \"Payable\";\n  ByteOne[ByteOne[\"PayableBySc\"] = 4] = \"PayableBySc\";\n})(ByteOne || (ByteOne = {}));","map":{"version":3,"sources":["../../src/smartcontracts/codeMetadata.ts"],"names":[],"mappings":";;;;;;AAAA;;AAEG;;AACH,MAAa,YAAb,CAAyB;EAMrB;;;;;;;AAOG;EACH,WAAA,GAA0H;IAAA,IAA9G,WAA8G,uEAAvF,IAAuF;IAAA,IAAjF,QAAiF,uEAA7D,KAA6D;IAAA,IAAtD,OAAsD,uEAAnC,KAAmC;IAAA,IAA5B,WAA4B,uEAAL,KAAK;IACtH,KAAK,WAAL,GAAmB,WAAnB;IACA,KAAK,QAAL,GAAgB,QAAhB;IACA,KAAK,OAAL,GAAe,OAAf;IACA,KAAK,WAAL,GAAmB,WAAnB;EACH;EAED;;AAEG;;;EACH,iBAAiB,CAAC,KAAD,EAAe;IAC5B,KAAK,WAAL,GAAmB,KAAnB;EACH;EAED;;AAEG;;;EACH,cAAc,CAAC,KAAD,EAAe;IACzB,KAAK,QAAL,GAAgB,KAAhB;EACH;EAED;;AAEG;;;EACH,aAAa,CAAC,KAAD,EAAe;IACxB,KAAK,OAAL,GAAe,KAAf;EACH;EAED;;AAEG;;;EACH,iBAAiB,CAAC,KAAD,EAAe;IAC5B,KAAK,WAAL,GAAmB,KAAnB;EACH;EAED;;AAEG;;;EACH,QAAQ,GAAA;IACJ,IAAI,QAAQ,GAAG,CAAf;IACA,IAAI,OAAO,GAAG,CAAd;;IAEA,IAAI,KAAK,WAAT,EAAsB;MAClB,QAAQ,IAAI,QAAQ,CAAC,WAArB;IACH;;IACD,IAAI,KAAK,QAAT,EAAmB;MACf,QAAQ,IAAI,QAAQ,CAAC,QAArB;IACH;;IACD,IAAI,KAAK,OAAT,EAAkB;MACd,OAAO,IAAI,OAAO,CAAC,OAAnB;IACH;;IACD,IAAI,KAAK,WAAT,EAAsB;MAClB,OAAO,IAAI,OAAO,CAAC,WAAnB;IACH;;IAED,OAAO,MAAM,CAAC,IAAP,CAAY,CAAC,QAAD,EAAW,OAAX,CAAZ,CAAP;EACH;EAED;;AAEG;;;EACH,QAAQ,GAAA;IACJ,OAAO,KAAK,QAAL,GAAgB,QAAhB,CAAyB,KAAzB,CAAP;EACH;EAED;;AAEG;;;EACH,MAAM,GAAA;IACF,OAAO;MACH,WAAW,EAAE,KAAK,WADf;MAEH,QAAQ,EAAE,KAAK,QAFZ;MAGH,OAAO,EAAE,KAAK,OAHX;MAIH,WAAW,EAAE,KAAK;IAJf,CAAP;EAMH;;EAED,MAAM,CAAC,KAAD,EAAoB;IACtB,OAAO,KAAK,WAAL,IAAoB,KAAK,CAAC,WAA1B,IACH,KAAK,QAAL,IAAiB,KAAK,CAAC,QADpB,IAEH,KAAK,OAAL,IAAgB,KAAK,CAAC,OAFnB,IAGH,KAAK,WAAL,IAAoB,KAAK,CAAC,WAH9B;EAIH;;AAhGoB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA;AAmGA,IAAK,QAAL;;AAAA,CAAA,UAAK,QAAL,EAAa;EACT,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;EACA,QAAA,CAAA,QAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACH,CAJD,EAAK,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAb;;AAMA,IAAK,OAAL;;AAAA,CAAA,UAAK,OAAL,EAAY;EACR,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;EACA,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACH,CAJD,EAAK,OAAO,KAAP,OAAO,GAAA,EAAA,CAAZ","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CodeMetadata = void 0;\r\n/**\r\n * The metadata of a Smart Contract, as an abstraction.\r\n */\r\nclass CodeMetadata {\r\n    /**\r\n     * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.\r\n     *\r\n     * @param upgradeable Whether the contract is upgradeable\r\n     * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)\r\n     * @param payable Whether the contract is payable\r\n     * @param payableBySc Whether the contract is payable by other smart contracts\r\n     */\r\n    constructor(upgradeable = true, readable = false, payable = false, payableBySc = false) {\r\n        this.upgradeable = upgradeable;\r\n        this.readable = readable;\r\n        this.payable = payable;\r\n        this.payableBySc = payableBySc;\r\n    }\r\n    /**\r\n     * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.\r\n     */\r\n    toggleUpgradeable(value) {\r\n        this.upgradeable = value;\r\n    }\r\n    /**\r\n     * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.\r\n     */\r\n    toggleReadable(value) {\r\n        this.readable = value;\r\n    }\r\n    /**\r\n     * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.\r\n     */\r\n    togglePayable(value) {\r\n        this.payable = value;\r\n    }\r\n    /**\r\n     * Adjust the metadata (the `payableBySc` attribute), when preparing the deployment transaction.\r\n     */\r\n    togglePayableBySc(value) {\r\n        this.payableBySc = value;\r\n    }\r\n    /**\r\n     * Converts the metadata to the protocol-friendly representation.\r\n     */\r\n    toBuffer() {\r\n        let byteZero = 0;\r\n        let byteOne = 0;\r\n        if (this.upgradeable) {\r\n            byteZero |= ByteZero.Upgradeable;\r\n        }\r\n        if (this.readable) {\r\n            byteZero |= ByteZero.Readable;\r\n        }\r\n        if (this.payable) {\r\n            byteOne |= ByteOne.Payable;\r\n        }\r\n        if (this.payableBySc) {\r\n            byteOne |= ByteOne.PayableBySc;\r\n        }\r\n        return Buffer.from([byteZero, byteOne]);\r\n    }\r\n    /**\r\n     * Converts the metadata to a hex-encoded string.\r\n     */\r\n    toString() {\r\n        return this.toBuffer().toString(\"hex\");\r\n    }\r\n    /**\r\n     * Converts the metadata to a pretty, plain JavaScript object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            upgradeable: this.upgradeable,\r\n            readable: this.readable,\r\n            payable: this.payable,\r\n            payableBySc: this.payableBySc\r\n        };\r\n    }\r\n    equals(other) {\r\n        return this.upgradeable == other.upgradeable &&\r\n            this.readable == other.readable &&\r\n            this.payable == other.payable &&\r\n            this.payableBySc == other.payableBySc;\r\n    }\r\n}\r\nexports.CodeMetadata = CodeMetadata;\r\nvar ByteZero;\r\n(function (ByteZero) {\r\n    ByteZero[ByteZero[\"Upgradeable\"] = 1] = \"Upgradeable\";\r\n    ByteZero[ByteZero[\"Reserved2\"] = 2] = \"Reserved2\";\r\n    ByteZero[ByteZero[\"Readable\"] = 4] = \"Readable\";\r\n})(ByteZero || (ByteZero = {}));\r\nvar ByteOne;\r\n(function (ByteOne) {\r\n    ByteOne[ByteOne[\"Reserved1\"] = 1] = \"Reserved1\";\r\n    ByteOne[ByteOne[\"Payable\"] = 2] = \"Payable\";\r\n    ByteOne[ByteOne[\"PayableBySc\"] = 4] = \"PayableBySc\";\r\n})(ByteOne || (ByteOne = {}));\r\n//# sourceMappingURL=codeMetadata.js.map"]},"metadata":{},"sourceType":"script"}