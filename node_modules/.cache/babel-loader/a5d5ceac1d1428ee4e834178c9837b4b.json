{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrTransactionEventNotFound = exports.ErrInvalidTxSignReturnValue = exports.ErrNotImplemented = exports.ErrInvalidEsdtTransferDataField = exports.ErrInvalidScCallDataField = exports.ErrBadPEM = exports.ErrContractInteraction = exports.ErrWrongMnemonic = exports.ErrWallet = exports.ErrCodec = exports.ErrTypingSystem = exports.ErrSerialization = exports.ErrTest = exports.ErrMock = exports.ErrContractQuery = exports.ErrContract = exports.ErrExpectedTransactionStatusNotReached = exports.ErrTransactionWatcherTimeout = exports.ErrAsyncTimerAborted = exports.ErrAsyncTimerAlreadyRunning = exports.ErrApiProviderPost = exports.ErrApiProviderGet = exports.ErrNetworkProvider = exports.ErrInvalidFunctionName = exports.ErrSignatureEmpty = exports.ErrSignatureCannotCreate = exports.ErrTransactionNotSigned = exports.ErrTransactionHashUnknown = exports.ErrGasPriceModifierInvalid = exports.ErrTransactionOptionsInvalid = exports.ErrTransactionVersionInvalid = exports.ErrChainIDInvalid = exports.ErrNonceInvalid = exports.ErrNotEnoughGas = exports.ErrGasLimitInvalid = exports.ErrGasPriceInvalid = exports.ErrBalanceInvalid = exports.ErrSignerCannotSign = exports.ErrAddressEmpty = exports.ErrAddressBadHrp = exports.ErrAddressCannotCreate = exports.ErrInvariantFailed = exports.ErrBadType = exports.ErrUnsupportedOperation = exports.ErrInvalidArgument = exports.Err = void 0;\n\nclass Err extends Error {\n  constructor(message, inner) {\n    super(message);\n    this.inner = undefined;\n    this.inner = inner;\n  }\n  /**\r\n   * Returns a pretty, friendly summary for the error or for the chain of errros (if appropriate).\r\n   */\n\n\n  summary() {\n    let result = [];\n    result.push({\n      name: this.name,\n      message: this.message\n    });\n    let inner = this.inner;\n\n    while (inner) {\n      result.push({\n        name: inner.name,\n        message: inner.message\n      });\n      inner = inner.inner;\n    }\n\n    return result;\n  }\n  /**\r\n   * Returns a HTML-friendly summary for the error or for the chain of errros (if appropriate).\r\n   */\n\n\n  html() {\n    let summary = this.summary();\n    let error = summary[0];\n    let causedBy = summary.slice(1);\n    let html = `\n            An error of type <strong>${error.name}</strong> occurred: ${error.message}.\n        `;\n    causedBy.forEach(cause => {\n      html += `<br /> ... <strong>${cause.name}</strong>: ${cause.message}`;\n    });\n    return html;\n  }\n  /**\r\n   * Returns a HTML-friendly summary for the error or for the chain of errros (if appropriate).\r\n   */\n\n\n  static html(error) {\n    if (error instanceof Err) {\n      return error.html();\n    } else {\n      return `Unexpected error of type <strong>${error.name}</strong> occurred: ${error.message}.`;\n    }\n  }\n\n}\n\nexports.Err = Err;\n/**\r\n * Signals invalid arguments for a function, for an operation.\r\n */\n\nclass ErrInvalidArgument extends Err {\n  constructor(name, value) {\n    let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"not specified\";\n    let inner = arguments.length > 3 ? arguments[3] : undefined;\n    super(ErrInvalidArgument.getMessage(name, value, reason), inner);\n  }\n\n  static getMessage(name, value, reason) {\n    if (value) {\n      return `Invalid argument \"${name}\": ${value}. Reason: ${reason}`;\n    }\n\n    return `Invalid argument \"${name}\"`;\n  }\n\n}\n\nexports.ErrInvalidArgument = ErrInvalidArgument;\n/**\r\n * Signals an unsupported operation.\r\n */\n\nclass ErrUnsupportedOperation extends Err {\n  constructor(operation) {\n    let reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"not specified\";\n    super(`Operation \"${operation}\" not supported. Reason: ${reason}`);\n  }\n\n}\n\nexports.ErrUnsupportedOperation = ErrUnsupportedOperation;\n/**\r\n * Signals the provisioning of objects of unexpected (bad) types.\r\n */\n\nclass ErrBadType extends Err {\n  constructor(name, type, value) {\n    super(`Bad type of \"${name}\": ${value}. Expected type: ${type}`);\n  }\n\n}\n\nexports.ErrBadType = ErrBadType;\n/**\r\n * Signals that an invariant failed.\r\n */\n\nclass ErrInvariantFailed extends Err {\n  constructor(message) {\n    super(`\"Invariant failed: ${message}`);\n  }\n\n}\n\nexports.ErrInvariantFailed = ErrInvariantFailed;\n/**\r\n * Signals issues with {@link Address} instantiation.\r\n */\n\nclass ErrAddressCannotCreate extends Err {\n  constructor(input, inner) {\n    let message = `Cannot create address from: ${input}`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrAddressCannotCreate = ErrAddressCannotCreate;\n/**\r\n * Signals issues with the HRP of an {@link Address}.\r\n */\n\nclass ErrAddressBadHrp extends Err {\n  constructor(expected, got) {\n    super(`Wrong address HRP. Expected: ${expected}, got ${got}`);\n  }\n\n}\n\nexports.ErrAddressBadHrp = ErrAddressBadHrp;\n/**\r\n * Signals the presence of an empty / invalid address.\r\n */\n\nclass ErrAddressEmpty extends Err {\n  constructor() {\n    super(`Address is empty`);\n  }\n\n}\n\nexports.ErrAddressEmpty = ErrAddressEmpty;\n/**\r\n * Signals an error related to signing a message (a transaction).\r\n */\n\nclass ErrSignerCannotSign extends Err {\n  constructor(inner) {\n    super(`Cannot sign`, inner);\n  }\n\n}\n\nexports.ErrSignerCannotSign = ErrSignerCannotSign;\n/**\r\n * Signals an invalid value for {@link Balance} objects.\r\n */\n\nclass ErrBalanceInvalid extends Err {\n  constructor(value) {\n    super(`Invalid balance: ${value.toString()}`);\n  }\n\n}\n\nexports.ErrBalanceInvalid = ErrBalanceInvalid;\n/**\r\n * Signals an invalid value for {@link GasPrice} objects.\r\n */\n\nclass ErrGasPriceInvalid extends Err {\n  constructor(value) {\n    super(`Invalid gas price: ${value}`);\n  }\n\n}\n\nexports.ErrGasPriceInvalid = ErrGasPriceInvalid;\n/**\r\n * Signals an invalid value for {@link GasLimit} objects.\r\n */\n\nclass ErrGasLimitInvalid extends Err {\n  constructor(value) {\n    super(`Invalid gas limit: ${value}`);\n  }\n\n}\n\nexports.ErrGasLimitInvalid = ErrGasLimitInvalid;\n/**\r\n * Signals an invalid value for {@link GasLimit} objects.\r\n */\n\nclass ErrNotEnoughGas extends Err {\n  constructor(value) {\n    super(`Not enough gas provided: ${value}`);\n  }\n\n}\n\nexports.ErrNotEnoughGas = ErrNotEnoughGas;\n/**\r\n * Signals an invalid value for {@link Nonce} objects.\r\n */\n\nclass ErrNonceInvalid extends Err {\n  constructor(value) {\n    super(`Invalid nonce: ${value}`);\n  }\n\n}\n\nexports.ErrNonceInvalid = ErrNonceInvalid;\n/**\r\n * Signals an invalid value for {@link ChainID} objects.\r\n */\n\nclass ErrChainIDInvalid extends Err {\n  constructor(value) {\n    super(`Invalid chain ID: ${value}`);\n  }\n\n}\n\nexports.ErrChainIDInvalid = ErrChainIDInvalid;\n/**\r\n * Signals an invalid value for {@link TransactionVersion} objects.\r\n */\n\nclass ErrTransactionVersionInvalid extends Err {\n  constructor(value) {\n    super(`Invalid transaction version: ${value}`);\n  }\n\n}\n\nexports.ErrTransactionVersionInvalid = ErrTransactionVersionInvalid;\n/**\r\n * Signals an invalid value for {@link TransactionOptions} objects.\r\n */\n\nclass ErrTransactionOptionsInvalid extends Err {\n  constructor(value) {\n    super(`Invalid transaction options: ${value}`);\n  }\n\n}\n\nexports.ErrTransactionOptionsInvalid = ErrTransactionOptionsInvalid;\n/**\r\n * Signals an invalid value for {@link GasPriceModifier} objects.\r\n */\n\nclass ErrGasPriceModifierInvalid extends Err {\n  constructor(value) {\n    super(`Invalid gas price modifier: ${value}`);\n  }\n\n}\n\nexports.ErrGasPriceModifierInvalid = ErrGasPriceModifierInvalid;\n/**\r\n * Signals that the hash of the {@link Transaction} is not known (not set).\r\n */\n\nclass ErrTransactionHashUnknown extends Err {\n  constructor() {\n    super(`Transaction hash isn't known`);\n  }\n\n}\n\nexports.ErrTransactionHashUnknown = ErrTransactionHashUnknown;\n/**\r\n * Signals that a {@link Transaction} cannot be used within an operation, since it isn't signed.\r\n */\n\nclass ErrTransactionNotSigned extends Err {\n  constructor() {\n    super(`Transaction isn't signed`);\n  }\n\n}\n\nexports.ErrTransactionNotSigned = ErrTransactionNotSigned;\n/**\r\n * Signals an error related to signing a message (a transaction).\r\n */\n\nclass ErrSignatureCannotCreate extends Err {\n  constructor(input, inner) {\n    let message = `Cannot create signature from: ${input}`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrSignatureCannotCreate = ErrSignatureCannotCreate;\n/**\r\n * Signals the usage of an empty signature.\r\n */\n\nclass ErrSignatureEmpty extends Err {\n  constructor() {\n    super(`Signature is empty`);\n  }\n\n}\n\nexports.ErrSignatureEmpty = ErrSignatureEmpty;\n/**\r\n * Signals an invalid value for the name of a {@link ContractFunction}.\r\n */\n\nclass ErrInvalidFunctionName extends Err {\n  constructor() {\n    super(`Invalid function name`);\n  }\n\n}\n\nexports.ErrInvalidFunctionName = ErrInvalidFunctionName;\n/**\r\n * Signals an error that happened during a request against the Network.\r\n */\n\nclass ErrNetworkProvider extends Err {\n  constructor(url, error, inner) {\n    let message = `Request error on url [${url}]: [${error}]`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrNetworkProvider = ErrNetworkProvider;\n/**\r\n * Signals an error that happened during a HTTP GET request.\r\n */\n\nclass ErrApiProviderGet extends Err {\n  constructor(url, error, inner) {\n    let message = `Cannot GET ${url}: [${error}]`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrApiProviderGet = ErrApiProviderGet;\n/**\r\n * Signals an error that happened during a HTTP POST request.\r\n */\n\nclass ErrApiProviderPost extends Err {\n  constructor(url, error, inner) {\n    let message = `Cannot POST ${url}: [${error}]`;\n    super(message, inner);\n    this.originalErrorMessage = error || \"\";\n  }\n\n}\n\nexports.ErrApiProviderPost = ErrApiProviderPost;\n/**\r\n * Signals a failed operation, since the Timer is already running.\r\n */\n\nclass ErrAsyncTimerAlreadyRunning extends Err {\n  constructor() {\n    super(\"Async timer already running\");\n  }\n\n}\n\nexports.ErrAsyncTimerAlreadyRunning = ErrAsyncTimerAlreadyRunning;\n/**\r\n * Signals a failed operation, since the Timer has been aborted.\r\n */\n\nclass ErrAsyncTimerAborted extends Err {\n  constructor() {\n    super(\"Async timer aborted\");\n  }\n\n}\n\nexports.ErrAsyncTimerAborted = ErrAsyncTimerAborted;\n/**\r\n * Signals a timout for a {@link TransactionWatcher}.\r\n */\n\nclass ErrTransactionWatcherTimeout extends Err {\n  constructor() {\n    super(`TransactionWatcher has timed out`);\n  }\n\n}\n\nexports.ErrTransactionWatcherTimeout = ErrTransactionWatcherTimeout;\n/**\r\n * Signals an issue related to waiting for a specific {@link TransactionStatus}.\r\n */\n\nclass ErrExpectedTransactionStatusNotReached extends Err {\n  constructor() {\n    super(`Expected transaction status not reached`);\n  }\n\n}\n\nexports.ErrExpectedTransactionStatusNotReached = ErrExpectedTransactionStatusNotReached;\n/**\r\n * Signals a generic error in the context of Smart Contracts.\r\n */\n\nclass ErrContract extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrContract = ErrContract;\n/**\r\n * Signals a generic error in the context of querying Smart Contracts.\r\n */\n\nclass ErrContractQuery extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n  static increaseSpecificity(err) {\n    if (err instanceof ErrApiProviderPost) {\n      if (err.originalErrorMessage.indexOf(\"error running vm func\")) {\n        let newErrorMessage = err.originalErrorMessage.replace(new RegExp(\"executeQuery:\", \"g\"), \"\").trim();\n        return new ErrContractQuery(newErrorMessage);\n      }\n    }\n\n    return err;\n  }\n\n}\n\nexports.ErrContractQuery = ErrContractQuery;\n/**\r\n * Signals an error thrown by the mock-like test objects.\r\n */\n\nclass ErrMock extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrMock = ErrMock;\n/**\r\n * Signals an error thrown when setting up a test.\r\n */\n\nclass ErrTest extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrTest = ErrTest;\n/**\r\n * Signals a generic serialization error.\r\n */\n\nclass ErrSerialization extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrSerialization = ErrSerialization;\n/**\r\n * Signals a generic type error.\r\n */\n\nclass ErrTypingSystem extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrTypingSystem = ErrTypingSystem;\n/**\r\n * Signals a generic codec (encode / decode) error.\r\n */\n\nclass ErrCodec extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrCodec = ErrCodec;\n/**\r\n * Signals a generic wallet error.\r\n */\n\nclass ErrWallet extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrWallet = ErrWallet;\n/**\r\n * Signals a wrong mnemonic format.\r\n */\n\nclass ErrWrongMnemonic extends ErrWallet {\n  constructor() {\n    super(\"Wrong mnemonic format\");\n  }\n\n}\n\nexports.ErrWrongMnemonic = ErrWrongMnemonic;\n/**\r\n * Signals a generic contract interaction error.\r\n */\n\nclass ErrContractInteraction extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrContractInteraction = ErrContractInteraction;\n/**\r\n * Signals a bad PEM file.\r\n */\n\nclass ErrBadPEM extends ErrWallet {\n  constructor(message) {\n    super(message ? `Bad PEM: ${message}` : `Bad PEM`);\n  }\n\n}\n\nexports.ErrBadPEM = ErrBadPEM;\n/**\r\n * Signals an invalid smart contract call data field\r\n */\n\nclass ErrInvalidScCallDataField extends Err {\n  constructor(message) {\n    message = \" \" + message ? message : \".\";\n    super(\"Invalid smart contract call data field\" + message);\n  }\n\n}\n\nexports.ErrInvalidScCallDataField = ErrInvalidScCallDataField;\n/**\r\n * Signals an invalid ESDT transfer data field\r\n */\n\nclass ErrInvalidEsdtTransferDataField extends Err {\n  constructor() {\n    super(\"Invalid ESDT transfer call data field\");\n  }\n\n}\n\nexports.ErrInvalidEsdtTransferDataField = ErrInvalidEsdtTransferDataField;\n/**\r\n * Signals that a method is not yet implemented\r\n */\n\nclass ErrNotImplemented extends Err {\n  constructor() {\n    super(\"Method not yet implemented\");\n  }\n\n}\n\nexports.ErrNotImplemented = ErrNotImplemented;\n/**\r\n * Signals that the data inside the url is not a valid one for a transaction sign response\r\n */\n\nclass ErrInvalidTxSignReturnValue extends Err {\n  constructor() {\n    super(\"Invalid response in transaction sign return url\");\n  }\n\n}\n\nexports.ErrInvalidTxSignReturnValue = ErrInvalidTxSignReturnValue;\n/**\r\n * Signals that a specific transaction event was not found (i.e. in the transaction logs).\r\n */\n\nclass ErrTransactionEventNotFound extends Err {\n  constructor(identifier) {\n    super(`Transaction event with identifier [${identifier}] not found (in logs)`);\n  }\n\n}\n\nexports.ErrTransactionEventNotFound = ErrTransactionEventNotFound;","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":";;;;;;;AAKA,MAAa,GAAb,SAAyB,KAAzB,CAA8B;EAG5B,WAAA,CAAmB,OAAnB,EAAoC,KAApC,EAAiD;IAC/C,MAAM,OAAN;IAHF,KAAA,KAAA,GAA2B,SAA3B;IAIE,KAAK,KAAL,GAAa,KAAb;EACD;EAED;;AAEG;;;EACH,OAAO,GAAA;IACL,IAAI,MAAM,GAAG,EAAb;IAEA,MAAM,CAAC,IAAP,CAAY;MAAE,IAAI,EAAE,KAAK,IAAb;MAAmB,OAAO,EAAE,KAAK;IAAjC,CAAZ;IAEA,IAAI,KAAK,GAAQ,KAAK,KAAtB;;IACA,OAAO,KAAP,EAAc;MACZ,MAAM,CAAC,IAAP,CAAY;QAAE,IAAI,EAAE,KAAK,CAAC,IAAd;QAAoB,OAAO,EAAE,KAAK,CAAC;MAAnC,CAAZ;MACA,KAAK,GAAG,KAAK,CAAC,KAAd;IACD;;IAED,OAAO,MAAP;EACD;EAED;;AAEG;;;EACH,IAAI,GAAA;IACF,IAAI,OAAO,GAAG,KAAK,OAAL,EAAd;IACA,IAAI,KAAK,GAAG,OAAO,CAAC,CAAD,CAAnB;IACA,IAAI,QAAQ,GAAG,OAAO,CAAC,KAAR,CAAc,CAAd,CAAf;IAEA,IAAI,IAAI,GAAG;uCACwB,KAAK,CAAC,IAAI,uBAAuB,KAAK,CAAC,OAAO;AAC5E,SAFL;IAIA,QAAQ,CAAC,OAAT,CAAkB,KAAD,IAAU;MACzB,IAAI,IAAI,sBAAsB,KAAK,CAAC,IAAI,cAAc,KAAK,CAAC,OAAO,EAAnE;IACD,CAFD;IAIA,OAAO,IAAP;EACD;EAED;;AAEG;;;EACQ,OAAJ,IAAI,CAAC,KAAD,EAAa;IACtB,IAAI,KAAK,YAAY,GAArB,EAA0B;MACxB,OAAO,KAAK,CAAC,IAAN,EAAP;IACD,CAFD,MAEO;MACL,OAAO,oCAAoC,KAAK,CAAC,IAAI,uBAAuB,KAAK,CAAC,OAAO,GAAzF;IACD;EACF;;AArD2B;;AAA9B,OAAA,CAAA,GAAA,GAAA,GAAA;AAwDA;;AAEG;;AACH,MAAa,kBAAb,SAAwC,GAAxC,CAA2C;EACzC,WAAA,CACE,IADF,EAEE,KAFF,EAIe;IAAA,IADb,MACa,uEADI,eACJ;IAAA,IAAb,KAAa;IAEb,MAAM,kBAAkB,CAAC,UAAnB,CAA8B,IAA9B,EAAoC,KAApC,EAA2C,MAA3C,CAAN,EAA0D,KAA1D;EACD;;EAEgB,OAAV,UAAU,CAAC,IAAD,EAAe,KAAf,EAA4B,MAA5B,EAA2C;IAC1D,IAAI,KAAJ,EAAW;MACT,OAAO,qBAAqB,IAAI,MAAM,KAAK,aAAa,MAAM,EAA9D;IACD;;IAED,OAAO,qBAAqB,IAAI,GAAhC;EACD;;AAhBwC;;AAA3C,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAmBA;;AAEG;;AACH,MAAa,uBAAb,SAA6C,GAA7C,CAAgD;EAC9C,WAAA,CAAmB,SAAnB,EAAsE;IAAA,IAAhC,MAAgC,uEAAf,eAAe;IACpE,MAAM,cAAc,SAAS,4BAA4B,MAAM,EAA/D;EACD;;AAH6C;;AAAhD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAMA;;AAEG;;AACH,MAAa,UAAb,SAAgC,GAAhC,CAAmC;EACjC,WAAA,CAAmB,IAAnB,EAAiC,IAAjC,EAA4C,KAA5C,EAAuD;IACrD,MAAM,gBAAgB,IAAI,MAAM,KAAK,oBAAoB,IAAI,EAA7D;EACD;;AAHgC;;AAAnC,OAAA,CAAA,UAAA,GAAA,UAAA;AAMA;;AAEG;;AACH,MAAa,kBAAb,SAAwC,GAAxC,CAA2C;EACzC,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,sBAAsB,OAAO,EAAnC;EACD;;AAHwC;;AAA3C,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAMA;;AAEG;;AACH,MAAa,sBAAb,SAA4C,GAA5C,CAA+C;EAC7C,WAAA,CAAmB,KAAnB,EAA+B,KAA/B,EAA4C;IAC1C,IAAI,OAAO,GAAG,+BAA+B,KAAK,EAAlD;IACA,MAAM,OAAN,EAAe,KAAf;EACD;;AAJ4C;;AAA/C,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAOA;;AAEG;;AACH,MAAa,gBAAb,SAAsC,GAAtC,CAAyC;EACvC,WAAA,CAAmB,QAAnB,EAAqC,GAArC,EAAgD;IAC9C,MAAM,gCAAgC,QAAQ,SAAS,GAAG,EAA1D;EACD;;AAHsC;;AAAzC,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAMA;;AAEG;;AACH,MAAa,eAAb,SAAqC,GAArC,CAAwC;EACtC,WAAA,GAAA;IACE,MAAM,kBAAN;EACD;;AAHqC;;AAAxC,OAAA,CAAA,eAAA,GAAA,eAAA;AAMA;;AAEG;;AACH,MAAa,mBAAb,SAAyC,GAAzC,CAA4C;EAC1C,WAAA,CAAmB,KAAnB,EAA+B;IAC7B,MAAM,aAAN,EAAqB,KAArB;EACD;;AAHyC;;AAA5C,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAMA;;AAEG;;AACH,MAAa,iBAAb,SAAuC,GAAvC,CAA0C;EACxC,WAAA,CAAmB,KAAnB,EAAmC;IACjC,MAAM,oBAAoB,KAAK,CAAC,QAAN,EAAgB,EAA1C;EACD;;AAHuC;;AAA1C,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAMA;;AAEG;;AACH,MAAa,kBAAb,SAAwC,GAAxC,CAA2C;EACzC,WAAA,CAAmB,KAAnB,EAAgC;IAC9B,MAAM,sBAAsB,KAAK,EAAjC;EACD;;AAHwC;;AAA3C,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAMA;;AAEG;;AACH,MAAa,kBAAb,SAAwC,GAAxC,CAA2C;EACzC,WAAA,CAAmB,KAAnB,EAAgC;IAC9B,MAAM,sBAAsB,KAAK,EAAjC;EACD;;AAHwC;;AAA3C,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAMA;;AAEG;;AACH,MAAa,eAAb,SAAqC,GAArC,CAAwC;EACtC,WAAA,CAAmB,KAAnB,EAAgC;IAC9B,MAAM,4BAA4B,KAAK,EAAvC;EACD;;AAHqC;;AAAxC,OAAA,CAAA,eAAA,GAAA,eAAA;AAMA;;AAEG;;AACH,MAAa,eAAb,SAAqC,GAArC,CAAwC;EACtC,WAAA,CAAmB,KAAnB,EAAgC;IAC9B,MAAM,kBAAkB,KAAK,EAA7B;EACD;;AAHqC;;AAAxC,OAAA,CAAA,eAAA,GAAA,eAAA;AAMA;;AAEG;;AACH,MAAa,iBAAb,SAAuC,GAAvC,CAA0C;EACxC,WAAA,CAAmB,KAAnB,EAAgC;IAC9B,MAAM,qBAAqB,KAAK,EAAhC;EACD;;AAHuC;;AAA1C,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAMA;;AAEG;;AACH,MAAa,4BAAb,SAAkD,GAAlD,CAAqD;EACnD,WAAA,CAAmB,KAAnB,EAAgC;IAC9B,MAAM,gCAAgC,KAAK,EAA3C;EACD;;AAHkD;;AAArD,OAAA,CAAA,4BAAA,GAAA,4BAAA;AAMA;;AAEG;;AACH,MAAa,4BAAb,SAAkD,GAAlD,CAAqD;EACnD,WAAA,CAAmB,KAAnB,EAAgC;IAC9B,MAAM,gCAAgC,KAAK,EAA3C;EACD;;AAHkD;;AAArD,OAAA,CAAA,4BAAA,GAAA,4BAAA;AAMA;;AAEG;;AACH,MAAa,0BAAb,SAAgD,GAAhD,CAAmD;EACjD,WAAA,CAAmB,KAAnB,EAAgC;IAC9B,MAAM,+BAA+B,KAAK,EAA1C;EACD;;AAHgD;;AAAnD,OAAA,CAAA,0BAAA,GAAA,0BAAA;AAMA;;AAEG;;AACH,MAAa,yBAAb,SAA+C,GAA/C,CAAkD;EAChD,WAAA,GAAA;IACE,MAAM,8BAAN;EACD;;AAH+C;;AAAlD,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAMA;;AAEG;;AACH,MAAa,uBAAb,SAA6C,GAA7C,CAAgD;EAC9C,WAAA,GAAA;IACE,MAAM,0BAAN;EACD;;AAH6C;;AAAhD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAMA;;AAEG;;AACH,MAAa,wBAAb,SAA8C,GAA9C,CAAiD;EAC/C,WAAA,CAAmB,KAAnB,EAA+B,KAA/B,EAA4C;IAC1C,IAAI,OAAO,GAAG,iCAAiC,KAAK,EAApD;IACA,MAAM,OAAN,EAAe,KAAf;EACD;;AAJ8C;;AAAjD,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAOA;;AAEG;;AACH,MAAa,iBAAb,SAAuC,GAAvC,CAA0C;EACxC,WAAA,GAAA;IACE,MAAM,oBAAN;EACD;;AAHuC;;AAA1C,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAMA;;AAEG;;AACH,MAAa,sBAAb,SAA4C,GAA5C,CAA+C;EAC7C,WAAA,GAAA;IACE,MAAM,uBAAN;EACD;;AAH4C;;AAA/C,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAMA;;AAEG;;AACF,MAAa,kBAAb,SAAwC,GAAxC,CAA2C;EAC1C,WAAA,CAAmB,GAAnB,EAAgC,KAAhC,EAA+C,KAA/C,EAA4D;IAC1D,IAAI,OAAO,GAAG,yBAAyB,GAAG,OAAO,KAAK,GAAtD;IACA,MAAM,OAAN,EAAe,KAAf;EACD;;AAJyC;;AAA3C,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAOD;;AAEG;;AACH,MAAa,iBAAb,SAAuC,GAAvC,CAA0C;EACxC,WAAA,CAAmB,GAAnB,EAAgC,KAAhC,EAA+C,KAA/C,EAA4D;IAC1D,IAAI,OAAO,GAAG,cAAc,GAAG,MAAM,KAAK,GAA1C;IACA,MAAM,OAAN,EAAe,KAAf;EACD;;AAJuC;;AAA1C,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAOA;;AAEG;;AACH,MAAa,kBAAb,SAAwC,GAAxC,CAA2C;EAGzC,WAAA,CAAmB,GAAnB,EAAgC,KAAhC,EAA+C,KAA/C,EAA4D;IAC1D,IAAI,OAAO,GAAG,eAAe,GAAG,MAAM,KAAK,GAA3C;IACA,MAAM,OAAN,EAAe,KAAf;IAEA,KAAK,oBAAL,GAA4B,KAAK,IAAI,EAArC;EACD;;AARwC;;AAA3C,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAWA;;AAEG;;AACH,MAAa,2BAAb,SAAiD,GAAjD,CAAoD;EAClD,WAAA,GAAA;IACE,MAAM,6BAAN;EACD;;AAHiD;;AAApD,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAMA;;AAEG;;AACH,MAAa,oBAAb,SAA0C,GAA1C,CAA6C;EAC3C,WAAA,GAAA;IACE,MAAM,qBAAN;EACD;;AAH0C;;AAA7C,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAMA;;AAEG;;AACH,MAAa,4BAAb,SAAkD,GAAlD,CAAqD;EACjD,WAAA,GAAA;IACI,MAAM,kCAAN;EACH;;AAHgD;;AAArD,OAAA,CAAA,4BAAA,GAAA,4BAAA;AAMA;;AAEG;;AACH,MAAa,sCAAb,SAA4D,GAA5D,CAA+D;EAC7D,WAAA,GAAA;IACE,MAAM,yCAAN;EACD;;AAH4D;;AAA/D,OAAA,CAAA,sCAAA,GAAA,sCAAA;AAMA;;AAEG;;AACH,MAAa,WAAb,SAAiC,GAAjC,CAAoC;EAClC,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,OAAN;EACD;;AAHiC;;AAApC,OAAA,CAAA,WAAA,GAAA,WAAA;AAMA;;AAEG;;AACH,MAAa,gBAAb,SAAsC,GAAtC,CAAyC;EACvC,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,OAAN;EACD;;EAEyB,OAAnB,mBAAmB,CAAC,GAAD,EAAS;IACjC,IAAI,GAAG,YAAY,kBAAnB,EAAuC;MACrC,IAAI,GAAG,CAAC,oBAAJ,CAAyB,OAAzB,CAAiC,uBAAjC,CAAJ,EAA+D;QAC7D,IAAI,eAAe,GAAG,GAAG,CAAC,oBAAJ,CACnB,OADmB,CACX,IAAI,MAAJ,CAAW,eAAX,EAA4B,GAA5B,CADW,EACuB,EADvB,EAEnB,IAFmB,EAAtB;QAGA,OAAO,IAAI,gBAAJ,CAAqB,eAArB,CAAP;MACD;IACF;;IAED,OAAO,GAAP;EACD;;AAhBsC;;AAAzC,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAmBA;;AAEG;;AACH,MAAa,OAAb,SAA6B,GAA7B,CAAgC;EAC9B,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,OAAN;EACD;;AAH6B;;AAAhC,OAAA,CAAA,OAAA,GAAA,OAAA;AAMA;;AAEG;;AACH,MAAa,OAAb,SAA6B,GAA7B,CAAgC;EAC9B,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,OAAN;EACD;;AAH6B;;AAAhC,OAAA,CAAA,OAAA,GAAA,OAAA;AAMA;;AAEG;;AACH,MAAa,gBAAb,SAAsC,GAAtC,CAAyC;EACvC,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,OAAN;EACD;;AAHsC;;AAAzC,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAMA;;AAEG;;AACH,MAAa,eAAb,SAAqC,GAArC,CAAwC;EACtC,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,OAAN;EACD;;AAHqC;;AAAxC,OAAA,CAAA,eAAA,GAAA,eAAA;AAMA;;AAEG;;AACH,MAAa,QAAb,SAA8B,GAA9B,CAAiC;EAC/B,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,OAAN;EACD;;AAH8B;;AAAjC,OAAA,CAAA,QAAA,GAAA,QAAA;AAMA;;AAEG;;AACH,MAAa,SAAb,SAA+B,GAA/B,CAAkC;EAChC,WAAA,CAAmB,OAAnB,EAAkC;IAChC,MAAM,OAAN;EACD;;AAH+B;;AAAlC,OAAA,CAAA,SAAA,GAAA,SAAA;AAMA;;AAEG;;AACH,MAAa,gBAAb,SAAsC,SAAtC,CAA+C;EAC7C,WAAA,GAAA;IACE,MAAM,uBAAN;EACD;;AAH4C;;AAA/C,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAMA;;AAEG;;AACH,MAAa,sBAAb,SAA4C,GAA5C,CAA+C;EAC3C,WAAA,CAAmB,OAAnB,EAAkC;IAC9B,MAAM,OAAN;EACH;;AAH0C;;AAA/C,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAMA;;AAEG;;AACH,MAAa,SAAb,SAA+B,SAA/B,CAAwC;EACtC,WAAA,CAAmB,OAAnB,EAAmC;IACjC,MAAM,OAAO,GAAG,YAAY,OAAO,EAAtB,GAA2B,SAAxC;EACD;;AAHqC;;AAAxC,OAAA,CAAA,SAAA,GAAA,SAAA;AAMA;;AAEG;;AACH,MAAa,yBAAb,SAA+C,GAA/C,CAAkD;EAChD,WAAA,CAAmB,OAAnB,EAAmC;IACjC,OAAO,GAAG,MAAM,OAAN,GAAgB,OAAhB,GAA0B,GAApC;IACA,MAAM,2CAA2C,OAAjD;EACD;;AAJ+C;;AAAlD,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAOA;;AAEG;;AACH,MAAa,+BAAb,SAAqD,GAArD,CAAwD;EACtD,WAAA,GAAA;IACE,MAAM,uCAAN;EACD;;AAHqD;;AAAxD,OAAA,CAAA,+BAAA,GAAA,+BAAA;AAMA;;AAEG;;AACH,MAAa,iBAAb,SAAuC,GAAvC,CAA0C;EACxC,WAAA,GAAA;IACE,MAAM,4BAAN;EACD;;AAHuC;;AAA1C,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAMA;;AAEG;;AACH,MAAa,2BAAb,SAAiD,GAAjD,CAAoD;EAClD,WAAA,GAAA;IACE,MAAM,iDAAN;EACD;;AAHiD;;AAApD,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAMA;;AAEG;;AACH,MAAa,2BAAb,SAAiD,GAAjD,CAAoD;EAClD,WAAA,CAAmB,UAAnB,EAAqC;IACnC,MAAM,sCAAsC,UAAU,uBAAtD;EACD;;AAHiD;;AAApD,OAAA,CAAA,2BAAA,GAAA,2BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ErrTransactionEventNotFound = exports.ErrInvalidTxSignReturnValue = exports.ErrNotImplemented = exports.ErrInvalidEsdtTransferDataField = exports.ErrInvalidScCallDataField = exports.ErrBadPEM = exports.ErrContractInteraction = exports.ErrWrongMnemonic = exports.ErrWallet = exports.ErrCodec = exports.ErrTypingSystem = exports.ErrSerialization = exports.ErrTest = exports.ErrMock = exports.ErrContractQuery = exports.ErrContract = exports.ErrExpectedTransactionStatusNotReached = exports.ErrTransactionWatcherTimeout = exports.ErrAsyncTimerAborted = exports.ErrAsyncTimerAlreadyRunning = exports.ErrApiProviderPost = exports.ErrApiProviderGet = exports.ErrNetworkProvider = exports.ErrInvalidFunctionName = exports.ErrSignatureEmpty = exports.ErrSignatureCannotCreate = exports.ErrTransactionNotSigned = exports.ErrTransactionHashUnknown = exports.ErrGasPriceModifierInvalid = exports.ErrTransactionOptionsInvalid = exports.ErrTransactionVersionInvalid = exports.ErrChainIDInvalid = exports.ErrNonceInvalid = exports.ErrNotEnoughGas = exports.ErrGasLimitInvalid = exports.ErrGasPriceInvalid = exports.ErrBalanceInvalid = exports.ErrSignerCannotSign = exports.ErrAddressEmpty = exports.ErrAddressBadHrp = exports.ErrAddressCannotCreate = exports.ErrInvariantFailed = exports.ErrBadType = exports.ErrUnsupportedOperation = exports.ErrInvalidArgument = exports.Err = void 0;\r\nclass Err extends Error {\r\n    constructor(message, inner) {\r\n        super(message);\r\n        this.inner = undefined;\r\n        this.inner = inner;\r\n    }\r\n    /**\r\n     * Returns a pretty, friendly summary for the error or for the chain of errros (if appropriate).\r\n     */\r\n    summary() {\r\n        let result = [];\r\n        result.push({ name: this.name, message: this.message });\r\n        let inner = this.inner;\r\n        while (inner) {\r\n            result.push({ name: inner.name, message: inner.message });\r\n            inner = inner.inner;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns a HTML-friendly summary for the error or for the chain of errros (if appropriate).\r\n     */\r\n    html() {\r\n        let summary = this.summary();\r\n        let error = summary[0];\r\n        let causedBy = summary.slice(1);\r\n        let html = `\r\n            An error of type <strong>${error.name}</strong> occurred: ${error.message}.\r\n        `;\r\n        causedBy.forEach((cause) => {\r\n            html += `<br /> ... <strong>${cause.name}</strong>: ${cause.message}`;\r\n        });\r\n        return html;\r\n    }\r\n    /**\r\n     * Returns a HTML-friendly summary for the error or for the chain of errros (if appropriate).\r\n     */\r\n    static html(error) {\r\n        if (error instanceof Err) {\r\n            return error.html();\r\n        }\r\n        else {\r\n            return `Unexpected error of type <strong>${error.name}</strong> occurred: ${error.message}.`;\r\n        }\r\n    }\r\n}\r\nexports.Err = Err;\r\n/**\r\n * Signals invalid arguments for a function, for an operation.\r\n */\r\nclass ErrInvalidArgument extends Err {\r\n    constructor(name, value, reason = \"not specified\", inner) {\r\n        super(ErrInvalidArgument.getMessage(name, value, reason), inner);\r\n    }\r\n    static getMessage(name, value, reason) {\r\n        if (value) {\r\n            return `Invalid argument \"${name}\": ${value}. Reason: ${reason}`;\r\n        }\r\n        return `Invalid argument \"${name}\"`;\r\n    }\r\n}\r\nexports.ErrInvalidArgument = ErrInvalidArgument;\r\n/**\r\n * Signals an unsupported operation.\r\n */\r\nclass ErrUnsupportedOperation extends Err {\r\n    constructor(operation, reason = \"not specified\") {\r\n        super(`Operation \"${operation}\" not supported. Reason: ${reason}`);\r\n    }\r\n}\r\nexports.ErrUnsupportedOperation = ErrUnsupportedOperation;\r\n/**\r\n * Signals the provisioning of objects of unexpected (bad) types.\r\n */\r\nclass ErrBadType extends Err {\r\n    constructor(name, type, value) {\r\n        super(`Bad type of \"${name}\": ${value}. Expected type: ${type}`);\r\n    }\r\n}\r\nexports.ErrBadType = ErrBadType;\r\n/**\r\n * Signals that an invariant failed.\r\n */\r\nclass ErrInvariantFailed extends Err {\r\n    constructor(message) {\r\n        super(`\"Invariant failed: ${message}`);\r\n    }\r\n}\r\nexports.ErrInvariantFailed = ErrInvariantFailed;\r\n/**\r\n * Signals issues with {@link Address} instantiation.\r\n */\r\nclass ErrAddressCannotCreate extends Err {\r\n    constructor(input, inner) {\r\n        let message = `Cannot create address from: ${input}`;\r\n        super(message, inner);\r\n    }\r\n}\r\nexports.ErrAddressCannotCreate = ErrAddressCannotCreate;\r\n/**\r\n * Signals issues with the HRP of an {@link Address}.\r\n */\r\nclass ErrAddressBadHrp extends Err {\r\n    constructor(expected, got) {\r\n        super(`Wrong address HRP. Expected: ${expected}, got ${got}`);\r\n    }\r\n}\r\nexports.ErrAddressBadHrp = ErrAddressBadHrp;\r\n/**\r\n * Signals the presence of an empty / invalid address.\r\n */\r\nclass ErrAddressEmpty extends Err {\r\n    constructor() {\r\n        super(`Address is empty`);\r\n    }\r\n}\r\nexports.ErrAddressEmpty = ErrAddressEmpty;\r\n/**\r\n * Signals an error related to signing a message (a transaction).\r\n */\r\nclass ErrSignerCannotSign extends Err {\r\n    constructor(inner) {\r\n        super(`Cannot sign`, inner);\r\n    }\r\n}\r\nexports.ErrSignerCannotSign = ErrSignerCannotSign;\r\n/**\r\n * Signals an invalid value for {@link Balance} objects.\r\n */\r\nclass ErrBalanceInvalid extends Err {\r\n    constructor(value) {\r\n        super(`Invalid balance: ${value.toString()}`);\r\n    }\r\n}\r\nexports.ErrBalanceInvalid = ErrBalanceInvalid;\r\n/**\r\n * Signals an invalid value for {@link GasPrice} objects.\r\n */\r\nclass ErrGasPriceInvalid extends Err {\r\n    constructor(value) {\r\n        super(`Invalid gas price: ${value}`);\r\n    }\r\n}\r\nexports.ErrGasPriceInvalid = ErrGasPriceInvalid;\r\n/**\r\n * Signals an invalid value for {@link GasLimit} objects.\r\n */\r\nclass ErrGasLimitInvalid extends Err {\r\n    constructor(value) {\r\n        super(`Invalid gas limit: ${value}`);\r\n    }\r\n}\r\nexports.ErrGasLimitInvalid = ErrGasLimitInvalid;\r\n/**\r\n * Signals an invalid value for {@link GasLimit} objects.\r\n */\r\nclass ErrNotEnoughGas extends Err {\r\n    constructor(value) {\r\n        super(`Not enough gas provided: ${value}`);\r\n    }\r\n}\r\nexports.ErrNotEnoughGas = ErrNotEnoughGas;\r\n/**\r\n * Signals an invalid value for {@link Nonce} objects.\r\n */\r\nclass ErrNonceInvalid extends Err {\r\n    constructor(value) {\r\n        super(`Invalid nonce: ${value}`);\r\n    }\r\n}\r\nexports.ErrNonceInvalid = ErrNonceInvalid;\r\n/**\r\n * Signals an invalid value for {@link ChainID} objects.\r\n */\r\nclass ErrChainIDInvalid extends Err {\r\n    constructor(value) {\r\n        super(`Invalid chain ID: ${value}`);\r\n    }\r\n}\r\nexports.ErrChainIDInvalid = ErrChainIDInvalid;\r\n/**\r\n * Signals an invalid value for {@link TransactionVersion} objects.\r\n */\r\nclass ErrTransactionVersionInvalid extends Err {\r\n    constructor(value) {\r\n        super(`Invalid transaction version: ${value}`);\r\n    }\r\n}\r\nexports.ErrTransactionVersionInvalid = ErrTransactionVersionInvalid;\r\n/**\r\n * Signals an invalid value for {@link TransactionOptions} objects.\r\n */\r\nclass ErrTransactionOptionsInvalid extends Err {\r\n    constructor(value) {\r\n        super(`Invalid transaction options: ${value}`);\r\n    }\r\n}\r\nexports.ErrTransactionOptionsInvalid = ErrTransactionOptionsInvalid;\r\n/**\r\n * Signals an invalid value for {@link GasPriceModifier} objects.\r\n */\r\nclass ErrGasPriceModifierInvalid extends Err {\r\n    constructor(value) {\r\n        super(`Invalid gas price modifier: ${value}`);\r\n    }\r\n}\r\nexports.ErrGasPriceModifierInvalid = ErrGasPriceModifierInvalid;\r\n/**\r\n * Signals that the hash of the {@link Transaction} is not known (not set).\r\n */\r\nclass ErrTransactionHashUnknown extends Err {\r\n    constructor() {\r\n        super(`Transaction hash isn't known`);\r\n    }\r\n}\r\nexports.ErrTransactionHashUnknown = ErrTransactionHashUnknown;\r\n/**\r\n * Signals that a {@link Transaction} cannot be used within an operation, since it isn't signed.\r\n */\r\nclass ErrTransactionNotSigned extends Err {\r\n    constructor() {\r\n        super(`Transaction isn't signed`);\r\n    }\r\n}\r\nexports.ErrTransactionNotSigned = ErrTransactionNotSigned;\r\n/**\r\n * Signals an error related to signing a message (a transaction).\r\n */\r\nclass ErrSignatureCannotCreate extends Err {\r\n    constructor(input, inner) {\r\n        let message = `Cannot create signature from: ${input}`;\r\n        super(message, inner);\r\n    }\r\n}\r\nexports.ErrSignatureCannotCreate = ErrSignatureCannotCreate;\r\n/**\r\n * Signals the usage of an empty signature.\r\n */\r\nclass ErrSignatureEmpty extends Err {\r\n    constructor() {\r\n        super(`Signature is empty`);\r\n    }\r\n}\r\nexports.ErrSignatureEmpty = ErrSignatureEmpty;\r\n/**\r\n * Signals an invalid value for the name of a {@link ContractFunction}.\r\n */\r\nclass ErrInvalidFunctionName extends Err {\r\n    constructor() {\r\n        super(`Invalid function name`);\r\n    }\r\n}\r\nexports.ErrInvalidFunctionName = ErrInvalidFunctionName;\r\n/**\r\n * Signals an error that happened during a request against the Network.\r\n */\r\nclass ErrNetworkProvider extends Err {\r\n    constructor(url, error, inner) {\r\n        let message = `Request error on url [${url}]: [${error}]`;\r\n        super(message, inner);\r\n    }\r\n}\r\nexports.ErrNetworkProvider = ErrNetworkProvider;\r\n/**\r\n * Signals an error that happened during a HTTP GET request.\r\n */\r\nclass ErrApiProviderGet extends Err {\r\n    constructor(url, error, inner) {\r\n        let message = `Cannot GET ${url}: [${error}]`;\r\n        super(message, inner);\r\n    }\r\n}\r\nexports.ErrApiProviderGet = ErrApiProviderGet;\r\n/**\r\n * Signals an error that happened during a HTTP POST request.\r\n */\r\nclass ErrApiProviderPost extends Err {\r\n    constructor(url, error, inner) {\r\n        let message = `Cannot POST ${url}: [${error}]`;\r\n        super(message, inner);\r\n        this.originalErrorMessage = error || \"\";\r\n    }\r\n}\r\nexports.ErrApiProviderPost = ErrApiProviderPost;\r\n/**\r\n * Signals a failed operation, since the Timer is already running.\r\n */\r\nclass ErrAsyncTimerAlreadyRunning extends Err {\r\n    constructor() {\r\n        super(\"Async timer already running\");\r\n    }\r\n}\r\nexports.ErrAsyncTimerAlreadyRunning = ErrAsyncTimerAlreadyRunning;\r\n/**\r\n * Signals a failed operation, since the Timer has been aborted.\r\n */\r\nclass ErrAsyncTimerAborted extends Err {\r\n    constructor() {\r\n        super(\"Async timer aborted\");\r\n    }\r\n}\r\nexports.ErrAsyncTimerAborted = ErrAsyncTimerAborted;\r\n/**\r\n * Signals a timout for a {@link TransactionWatcher}.\r\n */\r\nclass ErrTransactionWatcherTimeout extends Err {\r\n    constructor() {\r\n        super(`TransactionWatcher has timed out`);\r\n    }\r\n}\r\nexports.ErrTransactionWatcherTimeout = ErrTransactionWatcherTimeout;\r\n/**\r\n * Signals an issue related to waiting for a specific {@link TransactionStatus}.\r\n */\r\nclass ErrExpectedTransactionStatusNotReached extends Err {\r\n    constructor() {\r\n        super(`Expected transaction status not reached`);\r\n    }\r\n}\r\nexports.ErrExpectedTransactionStatusNotReached = ErrExpectedTransactionStatusNotReached;\r\n/**\r\n * Signals a generic error in the context of Smart Contracts.\r\n */\r\nclass ErrContract extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.ErrContract = ErrContract;\r\n/**\r\n * Signals a generic error in the context of querying Smart Contracts.\r\n */\r\nclass ErrContractQuery extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n    static increaseSpecificity(err) {\r\n        if (err instanceof ErrApiProviderPost) {\r\n            if (err.originalErrorMessage.indexOf(\"error running vm func\")) {\r\n                let newErrorMessage = err.originalErrorMessage\r\n                    .replace(new RegExp(\"executeQuery:\", \"g\"), \"\")\r\n                    .trim();\r\n                return new ErrContractQuery(newErrorMessage);\r\n            }\r\n        }\r\n        return err;\r\n    }\r\n}\r\nexports.ErrContractQuery = ErrContractQuery;\r\n/**\r\n * Signals an error thrown by the mock-like test objects.\r\n */\r\nclass ErrMock extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.ErrMock = ErrMock;\r\n/**\r\n * Signals an error thrown when setting up a test.\r\n */\r\nclass ErrTest extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.ErrTest = ErrTest;\r\n/**\r\n * Signals a generic serialization error.\r\n */\r\nclass ErrSerialization extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.ErrSerialization = ErrSerialization;\r\n/**\r\n * Signals a generic type error.\r\n */\r\nclass ErrTypingSystem extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.ErrTypingSystem = ErrTypingSystem;\r\n/**\r\n * Signals a generic codec (encode / decode) error.\r\n */\r\nclass ErrCodec extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.ErrCodec = ErrCodec;\r\n/**\r\n * Signals a generic wallet error.\r\n */\r\nclass ErrWallet extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.ErrWallet = ErrWallet;\r\n/**\r\n * Signals a wrong mnemonic format.\r\n */\r\nclass ErrWrongMnemonic extends ErrWallet {\r\n    constructor() {\r\n        super(\"Wrong mnemonic format\");\r\n    }\r\n}\r\nexports.ErrWrongMnemonic = ErrWrongMnemonic;\r\n/**\r\n * Signals a generic contract interaction error.\r\n */\r\nclass ErrContractInteraction extends Err {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.ErrContractInteraction = ErrContractInteraction;\r\n/**\r\n * Signals a bad PEM file.\r\n */\r\nclass ErrBadPEM extends ErrWallet {\r\n    constructor(message) {\r\n        super(message ? `Bad PEM: ${message}` : `Bad PEM`);\r\n    }\r\n}\r\nexports.ErrBadPEM = ErrBadPEM;\r\n/**\r\n * Signals an invalid smart contract call data field\r\n */\r\nclass ErrInvalidScCallDataField extends Err {\r\n    constructor(message) {\r\n        message = \" \" + message ? message : \".\";\r\n        super(\"Invalid smart contract call data field\" + message);\r\n    }\r\n}\r\nexports.ErrInvalidScCallDataField = ErrInvalidScCallDataField;\r\n/**\r\n * Signals an invalid ESDT transfer data field\r\n */\r\nclass ErrInvalidEsdtTransferDataField extends Err {\r\n    constructor() {\r\n        super(\"Invalid ESDT transfer call data field\");\r\n    }\r\n}\r\nexports.ErrInvalidEsdtTransferDataField = ErrInvalidEsdtTransferDataField;\r\n/**\r\n * Signals that a method is not yet implemented\r\n */\r\nclass ErrNotImplemented extends Err {\r\n    constructor() {\r\n        super(\"Method not yet implemented\");\r\n    }\r\n}\r\nexports.ErrNotImplemented = ErrNotImplemented;\r\n/**\r\n * Signals that the data inside the url is not a valid one for a transaction sign response\r\n */\r\nclass ErrInvalidTxSignReturnValue extends Err {\r\n    constructor() {\r\n        super(\"Invalid response in transaction sign return url\");\r\n    }\r\n}\r\nexports.ErrInvalidTxSignReturnValue = ErrInvalidTxSignReturnValue;\r\n/**\r\n * Signals that a specific transaction event was not found (i.e. in the transaction logs).\r\n */\r\nclass ErrTransactionEventNotFound extends Err {\r\n    constructor(identifier) {\r\n        super(`Transaction event with identifier [${identifier}] not found (in logs)`);\r\n    }\r\n}\r\nexports.ErrTransactionEventNotFound = ErrTransactionEventNotFound;\r\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}