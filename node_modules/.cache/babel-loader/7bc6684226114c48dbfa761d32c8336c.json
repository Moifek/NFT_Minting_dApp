{"ast":null,"code":"import React__default, { useState, useEffect, useRef, createElement, Fragment } from 'react';\nimport { Transaction, Nonce, Balance, Address, GasPrice, GasLimit, TransactionPayload, ChainID, TransactionVersion, NetworkConfig, GasPriceModifier } from '@elrondnetwork/erdjs';\n\nvar useDebounce = function useDebounce(value, timeout) {\n  var _useState = useState(value),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var effect = function effect() {\n    var handler = setTimeout(function () {\n      return setState(value);\n    }, timeout);\n    return function () {\n      return clearTimeout(handler);\n    };\n  };\n\n  useEffect(effect, [value]);\n  return state;\n};\n\nvar Trim = function Trim(_ref) {\n  var text = _ref.text,\n      dataTestId = _ref[\"data-testid\"],\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? \"\" : _ref$className;\n\n  var _React$useState = useState(0),\n      debounce = _React$useState[0],\n      setDebounce = _React$useState[1];\n\n  var _React$useState2 = useState(false),\n      overflow = _React$useState2[0],\n      setOverflow = _React$useState2[1];\n\n  var trimRef = useRef(document.createElement(\"span\"));\n  var hiddenTextRef = useRef(document.createElement(\"span\"));\n  var debounceTracker = useDebounce(debounce, 100);\n\n  var listener = function listener() {\n    setDebounce(debounce + 1);\n  };\n\n  var effect = function effect() {\n    window.addEventListener(\"resize\", listener);\n    return function () {\n      window.removeEventListener(\"resize\", listener);\n    };\n  };\n\n  useEffect(effect, [debounce]);\n  useEffect(function () {\n    if (trimRef.current && hiddenTextRef.current) {\n      var diff = hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n      setOverflow(diff > 1);\n    }\n  }, [debounceTracker]);\n  return createElement(\"span\", {\n    ref: trimRef,\n    className: \"trim \" + (overflow ? \"overflow\" : \"\"),\n    \"data-testid\": dataTestId\n  }, createElement(\"span\", {\n    ref: hiddenTextRef,\n    className: \"hidden-text-ref\"\n  }, text), overflow ? createElement(Fragment, null, createElement(\"span\", {\n    className: \"left\"\n  }, createElement(\"span\", {\n    className: className\n  }, String(text).substring(0, Math.floor(text.length / 2)))), createElement(\"span\", {\n    className: \"ellipsis \" + className\n  }, \"...\"), createElement(\"span\", {\n    className: \"right\"\n  }, createElement(\"span\", {\n    className: className\n  }, String(text).substring(Math.ceil(text.length / 2))))) : createElement(\"span\", {\n    className: className\n  }, text));\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar bignumber = createCommonjsModule(function (module) {\n  (function (globalObject) {\n    /*\r\n     *      bignumber.js v9.0.1\r\n     *      A JavaScript library for arbitrary-precision arithmetic.\r\n     *      https://github.com/MikeMcl/bignumber.js\r\n     *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *      MIT Licensed.\r\n     *\r\n     *      BigNumber.prototype methods     |  BigNumber methods\r\n     *                                      |\r\n     *      absoluteValue            abs    |  clone\r\n     *      comparedTo                      |  config               set\r\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n     *      dividedBy                div    |      ROUNDING_MODE\r\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n     *      exponentiatedBy          pow    |      RANGE\r\n     *      integerValue                    |      CRYPTO\r\n     *      isEqualTo                eq     |      MODULO_MODE\r\n     *      isFinite                        |      POW_PRECISION\r\n     *      isGreaterThan            gt     |      FORMAT\r\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n     *      isInteger                       |  isBigNumber\r\n     *      isLessThan               lt     |  maximum              max\r\n     *      isLessThanOrEqualTo      lte    |  minimum              min\r\n     *      isNaN                           |  random\r\n     *      isNegative                      |  sum\r\n     *      isPositive                      |\r\n     *      isZero                          |\r\n     *      minus                           |\r\n     *      modulo                   mod    |\r\n     *      multipliedBy             times  |\r\n     *      negated                         |\r\n     *      plus                            |\r\n     *      precision                sd     |\r\n     *      shiftedBy                       |\r\n     *      squareRoot               sqrt   |\r\n     *      toExponential                   |\r\n     *      toFixed                         |\r\n     *      toFormat                        |\r\n     *      toFraction                      |\r\n     *      toJSON                          |\r\n     *      toNumber                        |\r\n     *      toPrecision                     |\r\n     *      toString                        |\r\n     *      valueOf                         |\r\n     *\r\n     */\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,\n        // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n        // EDITABLE\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n    MAX = 1E9; // 0 to MAX_INT32\n\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\n\n    function clone(configObject) {\n      var div,\n          convertBase,\n          parseNumeric,\n          P = BigNumber.prototype = {\n        constructor: BigNumber,\n        toString: null,\n        valueOf: null\n      },\n          ONE = new BigNumber(1),\n          //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n      // The default values below must be integers within the inclusive ranges stated.\n      // The values can also be changed at run-time using BigNumber.set.\n      // The maximum number of decimal places for operations involving division.\n      DECIMAL_PLACES = 20,\n          // 0 to MAX\n      // The rounding mode used when rounding to the above decimal places, and when using\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n      // UP         0 Away from zero.\n      // DOWN       1 Towards zero.\n      // CEIL       2 Towards +Infinity.\n      // FLOOR      3 Towards -Infinity.\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      ROUNDING_MODE = 4,\n          // 0 to 8\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n      // The exponent value at and beneath which toString returns exponential notation.\n      // Number type: -7\n      TO_EXP_NEG = -7,\n          // 0 to -MAX\n      // The exponent value at and above which toString returns exponential notation.\n      // Number type: 21\n      TO_EXP_POS = 21,\n          // 0 to MAX\n      // RANGE : [MIN_EXP, MAX_EXP]\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // Number type: -324  (5e-324)\n      MIN_EXP = -1e7,\n          // -1 to -MAX\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // Number type:  308  (1.7976931348623157e+308)\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n      MAX_EXP = 1e7,\n          // 1 to MAX\n      // Whether to use cryptographically-secure random number generation, if available.\n      CRYPTO = false,\n          // true or false\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN      1 The remainder has the same sign as the dividend.\n      //             This modulo mode is commonly known as 'truncated division' and is\n      //             equivalent to (a % n) in JavaScript.\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n      //             The remainder is always positive.\n      //\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n      // modes are commonly used for the modulus operation.\n      // Although the other rounding modes can also be used, they may not give useful results.\n      MODULO_MODE = 1,\n          // 0 to 9\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\n      POW_PRECISION = 0,\n          // 0 to MAX\n      // The format specification used by the BigNumber.prototype.toFormat method.\n      FORMAT = {\n        prefix: '',\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        groupSeparator: ',',\n        decimalSeparator: '.',\n        fractionGroupSize: 0,\n        fractionGroupSeparator: '\\xA0',\n        // non-breaking space\n        suffix: ''\n      },\n          // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n      // '-', '.', whitespace, or repeated character.\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n      // CONSTRUCTOR\n\n      /*\r\n       * The BigNumber constructor and exported function.\r\n       * Create and return a new instance of a BigNumber object.\r\n       *\r\n       * v {number|string|BigNumber} A numeric value.\r\n       * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n       */\n\n      function BigNumber(v, b) {\n        var alphabet,\n            c,\n            caseChanged,\n            e,\n            i,\n            isNum,\n            len,\n            str,\n            x = this; // Enable constructor call without `new`.\n\n        if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n        if (b == null) {\n          if (v && v._isBigNumber === true) {\n            x.s = v.s;\n\n            if (!v.c || v.e > MAX_EXP) {\n              x.c = x.e = null;\n            } else if (v.e < MIN_EXP) {\n              x.c = [x.e = 0];\n            } else {\n              x.e = v.e;\n              x.c = v.c.slice();\n            }\n\n            return;\n          }\n\n          if ((isNum = typeof v == 'number') && v * 0 == 0) {\n            // Use `1 / n` to handle minus zero also.\n            x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).\n\n            if (v === ~~v) {\n              for (e = 0, i = v; i >= 10; i /= 10, e++);\n\n              if (e > MAX_EXP) {\n                x.c = x.e = null;\n              } else {\n                x.e = e;\n                x.c = [v];\n              }\n\n              return;\n            }\n\n            str = String(v);\n          } else {\n            if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n            x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n          } // Decimal point?\n\n\n          if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n          if ((i = str.search(/e/i)) > 0) {\n            // Determine exponent.\n            if (e < 0) e = i;\n            e += +str.slice(i + 1);\n            str = str.substring(0, i);\n          } else if (e < 0) {\n            // Integer.\n            e = str.length;\n          }\n        } else {\n          // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n          intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while\n          // also rounding to DECIMAL_PLACES as with other bases.\n\n          if (b == 10) {\n            x = new BigNumber(v);\n            return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n          }\n\n          str = String(v);\n\n          if (isNum = typeof v == 'number') {\n            // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n            if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n            x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n            if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n              throw Error(tooManyDigits + v);\n            }\n          } else {\n            x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n          }\n\n          alphabet = ALPHABET.slice(0, b);\n          e = i = 0; // Check that str is a valid base b number.\n          // Don't use RegExp, so alphabet can contain special characters.\n\n          for (len = str.length; i < len; i++) {\n            if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n              if (c == '.') {\n                // If '.' is not the first character and it has not be found before.\n                if (i > e) {\n                  e = len;\n                  continue;\n                }\n              } else if (!caseChanged) {\n                // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                  caseChanged = true;\n                  i = -1;\n                  e = 0;\n                  continue;\n                }\n              }\n\n              return parseNumeric(x, String(v), isNum, b);\n            }\n          } // Prevent later check for length on converted number.\n\n\n          isNum = false;\n          str = convertBase(str, b, 10, x.s); // Decimal point?\n\n          if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n        } // Determine leading zeros.\n\n\n        for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n        for (len = str.length; str.charCodeAt(--len) === 48;);\n\n        if (str = str.slice(i, ++len)) {\n          len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n          if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n            throw Error(tooManyDigits + x.s * v);\n          } // Overflow?\n\n\n          if ((e = e - i - 1) > MAX_EXP) {\n            // Infinity.\n            x.c = x.e = null; // Underflow?\n          } else if (e < MIN_EXP) {\n            // Zero.\n            x.c = [x.e = 0];\n          } else {\n            x.e = e;\n            x.c = []; // Transform base\n            // e is the base 10 exponent.\n            // i is where to slice str to get the first element of the coefficient array.\n\n            i = (e + 1) % LOG_BASE;\n            if (e < 0) i += LOG_BASE; // i < 1\n\n            if (i < len) {\n              if (i) x.c.push(+str.slice(0, i));\n\n              for (len -= LOG_BASE; i < len;) {\n                x.c.push(+str.slice(i, i += LOG_BASE));\n              }\n\n              i = LOG_BASE - (str = str.slice(i)).length;\n            } else {\n              i -= len;\n            }\n\n            for (; i--; str += '0');\n\n            x.c.push(+str);\n          }\n        } else {\n          // Zero.\n          x.c = [x.e = 0];\n        }\n      } // CONSTRUCTOR PROPERTIES\n\n\n      BigNumber.clone = clone;\n      BigNumber.ROUND_UP = 0;\n      BigNumber.ROUND_DOWN = 1;\n      BigNumber.ROUND_CEIL = 2;\n      BigNumber.ROUND_FLOOR = 3;\n      BigNumber.ROUND_HALF_UP = 4;\n      BigNumber.ROUND_HALF_DOWN = 5;\n      BigNumber.ROUND_HALF_EVEN = 6;\n      BigNumber.ROUND_HALF_CEIL = 7;\n      BigNumber.ROUND_HALF_FLOOR = 8;\n      BigNumber.EUCLID = 9;\n      /*\r\n       * Configure infrequently-changing library-wide settings.\r\n       *\r\n       * Accept an object with the following optional properties (if the value of a property is\r\n       * a number, it must be an integer within the inclusive range stated):\r\n       *\r\n       *   DECIMAL_PLACES   {number}           0 to MAX\r\n       *   ROUNDING_MODE    {number}           0 to 8\r\n       *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n       *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n       *   CRYPTO           {boolean}          true or false\r\n       *   MODULO_MODE      {number}           0 to 9\r\n       *   POW_PRECISION       {number}           0 to MAX\r\n       *   ALPHABET         {string}           A string of two or more unique characters which does\r\n       *                                       not contain '.'.\r\n       *   FORMAT           {object}           An object with some of the following properties:\r\n       *     prefix                 {string}\r\n       *     groupSize              {number}\r\n       *     secondaryGroupSize     {number}\r\n       *     groupSeparator         {string}\r\n       *     decimalSeparator       {string}\r\n       *     fractionGroupSize      {number}\r\n       *     fractionGroupSeparator {string}\r\n       *     suffix                 {string}\r\n       *\r\n       * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n       *\r\n       * E.g.\r\n       * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n       *\r\n       * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n       *\r\n       * Return an object with the properties current values.\r\n       */\n\n      BigNumber.config = BigNumber.set = function (obj) {\n        var p, v;\n\n        if (obj != null) {\n          if (typeof obj == 'object') {\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n            if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n              v = obj[p];\n              intCheck(v, 0, MAX, p);\n              DECIMAL_PLACES = v;\n            } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n              v = obj[p];\n              intCheck(v, 0, 8, p);\n              ROUNDING_MODE = v;\n            } // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or\n            // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n              v = obj[p];\n\n              if (v && v.pop) {\n                intCheck(v[0], -MAX, 0, p);\n                intCheck(v[1], 0, MAX, p);\n                TO_EXP_NEG = v[0];\n                TO_EXP_POS = v[1];\n              } else {\n                intCheck(v, -MAX, MAX, p);\n                TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n              }\n            } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'RANGE')) {\n              v = obj[p];\n\n              if (v && v.pop) {\n                intCheck(v[0], -MAX, -1, p);\n                intCheck(v[1], 1, MAX, p);\n                MIN_EXP = v[0];\n                MAX_EXP = v[1];\n              } else {\n                intCheck(v, -MAX, MAX, p);\n\n                if (v) {\n                  MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                } else {\n                  throw Error(bignumberError + p + ' cannot be zero: ' + v);\n                }\n              }\n            } // CRYPTO {boolean} true or false.\n            // '[BigNumber Error] CRYPTO not true or false: {v}'\n            // '[BigNumber Error] crypto unavailable'\n\n\n            if (obj.hasOwnProperty(p = 'CRYPTO')) {\n              v = obj[p];\n\n              if (v === !!v) {\n                if (v) {\n                  if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                    CRYPTO = v;\n                  } else {\n                    CRYPTO = !v;\n                    throw Error(bignumberError + 'crypto unavailable');\n                  }\n                } else {\n                  CRYPTO = v;\n                }\n              } else {\n                throw Error(bignumberError + p + ' not true or false: ' + v);\n              }\n            } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n              v = obj[p];\n              intCheck(v, 0, 9, p);\n              MODULO_MODE = v;\n            } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n              v = obj[p];\n              intCheck(v, 0, MAX, p);\n              POW_PRECISION = v;\n            } // FORMAT {object}\n            // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'FORMAT')) {\n              v = obj[p];\n              if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n            } // ALPHABET {string}\n            // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'ALPHABET')) {\n              v = obj[p]; // Disallow if less than two characters,\n              // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n              if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\n                ALPHABET = v;\n              } else {\n                throw Error(bignumberError + p + ' invalid: ' + v);\n              }\n            }\n          } else {\n            // '[BigNumber Error] Object expected: {v}'\n            throw Error(bignumberError + 'Object expected: ' + obj);\n          }\n        }\n\n        return {\n          DECIMAL_PLACES: DECIMAL_PLACES,\n          ROUNDING_MODE: ROUNDING_MODE,\n          EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n          RANGE: [MIN_EXP, MAX_EXP],\n          CRYPTO: CRYPTO,\n          MODULO_MODE: MODULO_MODE,\n          POW_PRECISION: POW_PRECISION,\n          FORMAT: FORMAT,\n          ALPHABET: ALPHABET\n        };\n      };\n      /*\r\n       * Return true if v is a BigNumber instance, otherwise return false.\r\n       *\r\n       * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n       *\r\n       * v {any}\r\n       *\r\n       * '[BigNumber Error] Invalid BigNumber: {v}'\r\n       */\n\n\n      BigNumber.isBigNumber = function (v) {\n        if (!v || v._isBigNumber !== true) return false;\n        if (!BigNumber.DEBUG) return true;\n        var i,\n            n,\n            c = v.c,\n            e = v.e,\n            s = v.s;\n\n        out: if ({}.toString.call(c) == '[object Array]') {\n          if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n            // If the first element is zero, the BigNumber value must be zero.\n            if (c[0] === 0) {\n              if (e === 0 && c.length === 1) return true;\n              break out;\n            } // Calculate number of digits that c[0] should have, based on the exponent.\n\n\n            i = (e + 1) % LOG_BASE;\n            if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].\n            //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n\n            if (String(c[0]).length == i) {\n              for (i = 0; i < c.length; i++) {\n                n = c[i];\n                if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n              } // Last element cannot be zero, unless it is the only element.\n\n\n              if (n !== 0) return true;\n            }\n          } // Infinity/NaN\n\n        } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n          return true;\n        }\n\n        throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the maximum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.maximum = BigNumber.max = function () {\n        return maxOrMin(arguments, P.lt);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the minimum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.minimum = BigNumber.min = function () {\n        return maxOrMin(arguments, P.gt);\n      };\n      /*\r\n       * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n       * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n       * zeros are produced).\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n       * '[BigNumber Error] crypto unavailable'\r\n       */\n\n\n      BigNumber.random = function () {\n        var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n        // Check if Math.random() produces more than 32 bits of randomness.\n        // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n        // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n        var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n          return mathfloor(Math.random() * pow2_53);\n        } : function () {\n          return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n        };\n        return function (dp) {\n          var a,\n              b,\n              e,\n              k,\n              v,\n              i = 0,\n              c = [],\n              rand = new BigNumber(ONE);\n          if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n          k = mathceil(dp / LOG_BASE);\n\n          if (CRYPTO) {\n            // Browsers supporting crypto.getRandomValues.\n            if (crypto.getRandomValues) {\n              a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n              for (; i < k;) {\n                // 53 bits:\n                // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                //                                     11111 11111111 11111111\n                // 0x20000 is 2^21.\n                v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n                // 0 <= v < 9007199254740992\n                // Probability that v >= 9e15, is\n                // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n                if (v >= 9e15) {\n                  b = crypto.getRandomValues(new Uint32Array(2));\n                  a[i] = b[0];\n                  a[i + 1] = b[1];\n                } else {\n                  // 0 <= v <= 8999999999999999\n                  // 0 <= (v % 1e14) <= 99999999999999\n                  c.push(v % 1e14);\n                  i += 2;\n                }\n              }\n\n              i = k / 2; // Node.js supporting crypto.randomBytes.\n            } else if (crypto.randomBytes) {\n              // buffer\n              a = crypto.randomBytes(k *= 7);\n\n              for (; i < k;) {\n                // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                // 0x100000000 is 2^32, 0x1000000 is 2^24\n                // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                // 0 <= v < 9007199254740992\n                v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                if (v >= 9e15) {\n                  crypto.randomBytes(7).copy(a, i);\n                } else {\n                  // 0 <= (v % 1e14) <= 99999999999999\n                  c.push(v % 1e14);\n                  i += 7;\n                }\n              }\n\n              i = k / 7;\n            } else {\n              CRYPTO = false;\n              throw Error(bignumberError + 'crypto unavailable');\n            }\n          } // Use Math.random.\n\n\n          if (!CRYPTO) {\n            for (; i < k;) {\n              v = random53bitInt();\n              if (v < 9e15) c[i++] = v % 1e14;\n            }\n          }\n\n          k = c[--i];\n          dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n          if (k && dp) {\n            v = POWS_TEN[LOG_BASE - dp];\n            c[i] = mathfloor(k / v) * v;\n          } // Remove trailing elements which are zero.\n\n\n          for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n          if (i < 0) {\n            c = [e = 0];\n          } else {\n            // Remove leading elements which are zero and adjust exponent accordingly.\n            for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n            for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n            if (i < LOG_BASE) e -= LOG_BASE - i;\n          }\n\n          rand.e = e;\n          rand.c = c;\n          return rand;\n        };\n      }();\n      /*\r\n       * Return a BigNumber whose value is the sum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.sum = function () {\n        var i = 1,\n            args = arguments,\n            sum = new BigNumber(args[0]);\n\n        for (; i < args.length;) sum = sum.plus(args[i++]);\n\n        return sum;\n      }; // PRIVATE FUNCTIONS\n      // Called by BigNumber and BigNumber.prototype.toString.\n\n\n      convertBase = function () {\n        var decimal = '0123456789';\n        /*\r\n         * Convert string of baseIn to an array of numbers of baseOut.\r\n         * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n         * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n         */\n\n        function toBaseOut(str, baseIn, baseOut, alphabet) {\n          var j,\n              arr = [0],\n              arrL,\n              i = 0,\n              len = str.length;\n\n          for (; i < len;) {\n            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n            arr[0] += alphabet.indexOf(str.charAt(i++));\n\n            for (j = 0; j < arr.length; j++) {\n              if (arr[j] > baseOut - 1) {\n                if (arr[j + 1] == null) arr[j + 1] = 0;\n                arr[j + 1] += arr[j] / baseOut | 0;\n                arr[j] %= baseOut;\n              }\n            }\n          }\n\n          return arr.reverse();\n        } // Convert a numeric string of baseIn to a numeric string of baseOut.\n        // If the caller is toString, we are converting from base 10 to baseOut.\n        // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n        return function (str, baseIn, baseOut, sign, callerIsToString) {\n          var alphabet,\n              d,\n              e,\n              k,\n              r,\n              x,\n              xc,\n              y,\n              i = str.indexOf('.'),\n              dp = DECIMAL_PLACES,\n              rm = ROUNDING_MODE; // Non-integer.\n\n          if (i >= 0) {\n            k = POW_PRECISION; // Unlimited precision.\n\n            POW_PRECISION = 0;\n            str = str.replace('.', '');\n            y = new BigNumber(baseIn);\n            x = y.pow(str.length - i);\n            POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n            // result by its base raised to a power.\n\n            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n            y.e = y.c.length;\n          } // Convert the number as integer.\n\n\n          xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n          e = k = xc.length; // Remove trailing zeros.\n\n          for (; xc[--k] == 0; xc.pop()); // Zero?\n\n\n          if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n          if (i < 0) {\n            --e;\n          } else {\n            x.c = xc;\n            x.e = e; // The sign is needed for correct rounding.\n\n            x.s = sign;\n            x = div(x, y, dp, rm, baseOut);\n            xc = x.c;\n            r = x.r;\n            e = x.e;\n          } // xc now represents str converted to baseOut.\n          // THe index of the rounding digit.\n\n\n          d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n          i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n          k = baseOut / 2;\n          r = r || d < 0 || xc[d + 1] != null;\n          r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n          // zero, then the result of the base conversion is zero or, if rounding up, a value\n          // such as 0.00001.\n\n          if (d < 1 || !xc[0]) {\n            // 1^-dp or 0\n            str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n          } else {\n            // Truncate xc to the required number of decimal places.\n            xc.length = d; // Round up?\n\n            if (r) {\n              // Rounding up may mean the previous digit has to be rounded up and so on.\n              for (--baseOut; ++xc[--d] > baseOut;) {\n                xc[d] = 0;\n\n                if (!d) {\n                  ++e;\n                  xc = [1].concat(xc);\n                }\n              }\n            } // Determine trailing zeros.\n\n\n            for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n            for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.\n\n\n            str = toFixedPoint(str, e, alphabet.charAt(0));\n          } // The caller will add the sign.\n\n\n          return str;\n        };\n      }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n      div = function () {\n        // Assume non-zero x and k.\n        function multiply(x, k, base) {\n          var m,\n              temp,\n              xlo,\n              xhi,\n              carry = 0,\n              i = x.length,\n              klo = k % SQRT_BASE,\n              khi = k / SQRT_BASE | 0;\n\n          for (x = x.slice(); i--;) {\n            xlo = x[i] % SQRT_BASE;\n            xhi = x[i] / SQRT_BASE | 0;\n            m = khi * xlo + xhi * klo;\n            temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n            carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n            x[i] = temp % base;\n          }\n\n          if (carry) x = [carry].concat(x);\n          return x;\n        }\n\n        function compare(a, b, aL, bL) {\n          var i, cmp;\n\n          if (aL != bL) {\n            cmp = aL > bL ? 1 : -1;\n          } else {\n            for (i = cmp = 0; i < aL; i++) {\n              if (a[i] != b[i]) {\n                cmp = a[i] > b[i] ? 1 : -1;\n                break;\n              }\n            }\n          }\n\n          return cmp;\n        }\n\n        function subtract(a, b, aL, base) {\n          var i = 0; // Subtract b from a.\n\n          for (; aL--;) {\n            a[aL] -= i;\n            i = a[aL] < b[aL] ? 1 : 0;\n            a[aL] = i * base + a[aL] - b[aL];\n          } // Remove leading zeros.\n\n\n          for (; !a[0] && a.length > 1; a.splice(0, 1));\n        } // x: dividend, y: divisor.\n\n\n        return function (x, y, dp, rm, base) {\n          var cmp,\n              e,\n              i,\n              more,\n              n,\n              prod,\n              prodL,\n              q,\n              qc,\n              rem,\n              remL,\n              rem0,\n              xi,\n              xL,\n              yc0,\n              yL,\n              yz,\n              s = x.s == y.s ? 1 : -1,\n              xc = x.c,\n              yc = y.c; // Either NaN, Infinity or 0?\n\n          if (!xc || !xc[0] || !yc || !yc[0]) {\n            return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n            !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n          }\n\n          q = new BigNumber(s);\n          qc = q.c = [];\n          e = x.e - y.e;\n          s = dp + e + 1;\n\n          if (!base) {\n            base = BASE;\n            e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n            s = s / LOG_BASE | 0;\n          } // Result exponent may be one less then the current value of e.\n          // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n          for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n          if (yc[i] > (xc[i] || 0)) e--;\n\n          if (s < 0) {\n            qc.push(1);\n            more = true;\n          } else {\n            xL = xc.length;\n            yL = yc.length;\n            i = 0;\n            s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n            n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n            // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n            if (n > 1) {\n              yc = multiply(yc, n, base);\n              xc = multiply(xc, n, base);\n              yL = yc.length;\n              xL = xc.length;\n            }\n\n            xi = yL;\n            rem = xc.slice(0, yL);\n            remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n            for (; remL < yL; rem[remL++] = 0);\n\n            yz = yc.slice();\n            yz = [0].concat(yz);\n            yc0 = yc[0];\n            if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n            // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n            do {\n              n = 0; // Compare divisor and remainder.\n\n              cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n              if (cmp < 0) {\n                // Calculate trial digit, n.\n                rem0 = rem[0];\n                if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n                n = mathfloor(rem0 / yc0); //  Algorithm:\n                //  product = divisor multiplied by trial digit (n).\n                //  Compare product and remainder.\n                //  If product is greater than remainder:\n                //    Subtract divisor from product, decrement trial digit.\n                //  Subtract product from remainder.\n                //  If product was less than remainder at the last compare:\n                //    Compare new remainder and divisor.\n                //    If remainder is greater than divisor:\n                //      Subtract divisor from remainder, increment trial digit.\n\n                if (n > 1) {\n                  // n may be > base only when base is 3.\n                  if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                  prod = multiply(yc, n, base);\n                  prodL = prod.length;\n                  remL = rem.length; // Compare product and remainder.\n                  // If product > remainder then trial digit n too high.\n                  // n is 1 too high about 5% of the time, and is not known to have\n                  // ever been more than 1 too high.\n\n                  while (compare(prod, rem, prodL, remL) == 1) {\n                    n--; // Subtract divisor from product.\n\n                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                    prodL = prod.length;\n                    cmp = 1;\n                  }\n                } else {\n                  // n is 0 or 1, cmp is -1.\n                  // If n is 0, there is no need to compare yc and rem again below,\n                  // so change cmp to 1 to avoid it.\n                  // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                  if (n == 0) {\n                    // divisor < remainder, so n must be at least 1.\n                    cmp = n = 1;\n                  } // product = divisor\n\n\n                  prod = yc.slice();\n                  prodL = prod.length;\n                }\n\n                if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n                subtract(rem, prod, remL, base);\n                remL = rem.length; // If product was < remainder.\n\n                if (cmp == -1) {\n                  // Compare divisor and new remainder.\n                  // If divisor < new remainder, subtract divisor from remainder.\n                  // Trial digit n too low.\n                  // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                  while (compare(yc, rem, yL, remL) < 1) {\n                    n++; // Subtract divisor from remainder.\n\n                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                    remL = rem.length;\n                  }\n                }\n              } else if (cmp === 0) {\n                n++;\n                rem = [0];\n              } // else cmp === 1 and n will be 0\n              // Add the next digit, n, to the result array.\n\n\n              qc[i++] = n; // Update the remainder.\n\n              if (rem[0]) {\n                rem[remL++] = xc[xi] || 0;\n              } else {\n                rem = [xc[xi]];\n                remL = 1;\n              }\n            } while ((xi++ < xL || rem[0] != null) && s--);\n\n            more = rem[0] != null; // Leading zero?\n\n            if (!qc[0]) qc.splice(0, 1);\n          }\n\n          if (base == BASE) {\n            // To calculate q.e, first get the number of digits of qc[0].\n            for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n            round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n          } else {\n            q.e = e;\n            q.r = +more;\n          }\n\n          return q;\n        };\n      }();\n      /*\r\n       * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n       * notation rounded to the specified decimal places or significant digits.\r\n       *\r\n       * n: a BigNumber.\r\n       * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n       * rm: the rounding mode.\r\n       * id: 1 (toExponential) or 2 (toPrecision).\r\n       */\n\n\n      function format(n, i, rm, id) {\n        var c0, e, ne, len, str;\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        if (!n.c) return n.toString();\n        c0 = n.c[0];\n        ne = n.e;\n\n        if (i == null) {\n          str = coeffToString(n.c);\n          str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n        } else {\n          n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n          e = n.e;\n          str = coeffToString(n.c);\n          len = str.length; // toPrecision returns exponential notation if the number of significant digits\n          // specified is less than the number of digits necessary to represent the integer\n          // part of the value in fixed-point notation.\n          // Exponential notation.\n\n          if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n            // Append zeros?\n            for (; len < i; str += '0', len++);\n\n            str = toExponential(str, e); // Fixed-point notation.\n          } else {\n            i -= ne;\n            str = toFixedPoint(str, e, '0'); // Append zeros?\n\n            if (e + 1 > len) {\n              if (--i > 0) for (str += '.'; i--; str += '0');\n            } else {\n              i += e - len;\n\n              if (i > 0) {\n                if (e + 1 == len) str += '.';\n\n                for (; i--; str += '0');\n              }\n            }\n          }\n        }\n\n        return n.s < 0 && c0 ? '-' + str : str;\n      } // Handle BigNumber.max and BigNumber.min.\n\n\n      function maxOrMin(args, method) {\n        var n,\n            i = 1,\n            m = new BigNumber(args[0]);\n\n        for (; i < args.length; i++) {\n          n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n          if (!n.s) {\n            m = n;\n            break;\n          } else if (method.call(m, n)) {\n            m = n;\n          }\n        }\n\n        return m;\n      }\n      /*\r\n       * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n       * Called by minus, plus and times.\r\n       */\n\n\n      function normalise(n, c, e) {\n        var i = 1,\n            j = c.length; // Remove trailing zeros.\n\n        for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n        for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n          // Infinity.\n          n.c = n.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          n.c = [n.e = 0];\n        } else {\n          n.e = e;\n          n.c = c;\n        }\n\n        return n;\n      } // Handle values that fail the validity test in BigNumber.\n\n\n      parseNumeric = function () {\n        var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n            dotAfter = /^([^.]+)\\.$/,\n            dotBefore = /^\\.([^.]+)$/,\n            isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n            whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n        return function (x, str, isNum, b) {\n          var base,\n              s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n          if (isInfinityOrNaN.test(s)) {\n            x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n          } else {\n            if (!isNum) {\n              // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n              s = s.replace(basePrefix, function (m, p1, p2) {\n                base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                return !b || b == base ? p1 : m;\n              });\n\n              if (b) {\n                base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n                s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n              }\n\n              if (str != s) return new BigNumber(s, base);\n            } // '[BigNumber Error] Not a number: {n}'\n            // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n            if (BigNumber.DEBUG) {\n              throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n            } // NaN\n\n\n            x.s = null;\n          }\n\n          x.c = x.e = null;\n        };\n      }();\n      /*\r\n       * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n       * If r is truthy, it is known that there are more digits after the rounding digit.\r\n       */\n\n\n      function round(x, sd, rm, r) {\n        var d,\n            i,\n            j,\n            k,\n            n,\n            ni,\n            rd,\n            xc = x.c,\n            pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n        if (xc) {\n          // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n          // n is a base 1e14 number, the value of the element of array x.c containing rd.\n          // ni is the index of n within x.c.\n          // d is the number of digits of n.\n          // i is the index of rd within n including leading zeros.\n          // j is the actual index of rd within n (if < 0, rd is a leading zero).\n          out: {\n            // Get the number of digits of the first element of xc.\n            for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n            i = sd - d; // If the rounding digit is in the first element of xc...\n\n            if (i < 0) {\n              i += LOG_BASE;\n              j = sd;\n              n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n              rd = n / pows10[d - j - 1] % 10 | 0;\n            } else {\n              ni = mathceil((i + 1) / LOG_BASE);\n\n              if (ni >= xc.length) {\n                if (r) {\n                  // Needed by sqrt.\n                  for (; xc.length <= ni; xc.push(0));\n\n                  n = rd = 0;\n                  d = 1;\n                  i %= LOG_BASE;\n                  j = i - LOG_BASE + 1;\n                } else {\n                  break out;\n                }\n              } else {\n                n = k = xc[ni]; // Get the number of digits of n.\n\n                for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n                i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n                // The number of leading zeros of n is given by LOG_BASE - d.\n\n                j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n                rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n              }\n            }\n\n            r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n            // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n            // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n            xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n            r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n            (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n            if (sd < 1 || !xc[0]) {\n              xc.length = 0;\n\n              if (r) {\n                // Convert sd to decimal places.\n                sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n                xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                x.e = -sd || 0;\n              } else {\n                // Zero.\n                xc[0] = x.e = 0;\n              }\n\n              return x;\n            } // Remove excess digits.\n\n\n            if (i == 0) {\n              xc.length = ni;\n              k = 1;\n              ni--;\n            } else {\n              xc.length = ni + 1;\n              k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n              // j > 0 means i > number of leading zeros of n.\n\n              xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n            } // Round up?\n\n\n            if (r) {\n              for (;;) {\n                // If the digit to be rounded up is in the first element of xc...\n                if (ni == 0) {\n                  // i will be the length of xc[0] before k is added.\n                  for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n                  j = xc[0] += k;\n\n                  for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n                  if (i != k) {\n                    x.e++;\n                    if (xc[0] == BASE) xc[0] = 1;\n                  }\n\n                  break;\n                } else {\n                  xc[ni] += k;\n                  if (xc[ni] != BASE) break;\n                  xc[ni--] = 0;\n                  k = 1;\n                }\n              }\n            } // Remove trailing zeros.\n\n\n            for (i = xc.length; xc[--i] === 0; xc.pop());\n          } // Overflow? Infinity.\n\n\n          if (x.e > MAX_EXP) {\n            x.c = x.e = null; // Underflow? Zero.\n          } else if (x.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          }\n        }\n\n        return x;\n      }\n\n      function valueOf(n) {\n        var str,\n            e = n.e;\n        if (e === null) return n.toString();\n        str = coeffToString(n.c);\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n        return n.s < 0 ? '-' + str : str;\n      } // PROTOTYPE/INSTANCE METHODS\n\n      /*\r\n       * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n       */\n\n\n      P.absoluteValue = P.abs = function () {\n        var x = new BigNumber(this);\n        if (x.s < 0) x.s = 1;\n        return x;\n      };\n      /*\r\n       * Return\r\n       *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n       *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n       *   0 if they have the same value,\r\n       *   or null if the value of either is NaN.\r\n       */\n\n\n      P.comparedTo = function (y, b) {\n        return compare(this, new BigNumber(y, b));\n      };\n      /*\r\n       * If dp is undefined or null or true or false, return the number of decimal places of the\r\n       * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n       *\r\n       * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n       * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n       * ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.decimalPlaces = P.dp = function (dp, rm) {\n        var c,\n            n,\n            v,\n            x = this;\n\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n          return round(new BigNumber(x), dp + x.e + 1, rm);\n        }\n\n        if (!(c = x.c)) return null;\n        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n        if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n        if (n < 0) n = 0;\n        return n;\n      };\n      /*\r\n       *  n / 0 = I\r\n       *  n / N = N\r\n       *  n / I = 0\r\n       *  0 / n = 0\r\n       *  0 / 0 = N\r\n       *  0 / N = N\r\n       *  0 / I = 0\r\n       *  N / n = N\r\n       *  N / 0 = N\r\n       *  N / N = N\r\n       *  N / I = N\r\n       *  I / n = I\r\n       *  I / 0 = I\r\n       *  I / N = N\r\n       *  I / I = N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n       * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       */\n\n\n      P.dividedBy = P.div = function (y, b) {\n        return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n       * BigNumber by the value of BigNumber(y, b).\r\n       */\n\n\n      P.dividedToIntegerBy = P.idiv = function (y, b) {\n        return div(this, new BigNumber(y, b), 0, 1);\n      };\n      /*\r\n       * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n       *\r\n       * If m is present, return the result modulo m.\r\n       * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n       *\r\n       * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n       * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n       *\r\n       * n {number|string|BigNumber} The exponent. An integer.\r\n       * [m] {number|string|BigNumber} The modulus.\r\n       *\r\n       * '[BigNumber Error] Exponent not an integer: {n}'\r\n       */\n\n\n      P.exponentiatedBy = P.pow = function (n, m) {\n        var half,\n            isModExp,\n            i,\n            k,\n            more,\n            nIsBig,\n            nIsNeg,\n            nIsOdd,\n            y,\n            x = this;\n        n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n        if (n.c && !n.isInteger()) {\n          throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n        }\n\n        if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n        nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n          // The sign of the result of pow when x is negative depends on the evenness of n.\n          // If +n overflows to ±Infinity, the evenness of n would be not be known.\n          y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n          return m ? y.mod(m) : y;\n        }\n\n        nIsNeg = n.s < 0;\n\n        if (m) {\n          // x % m returns NaN if abs(m) is zero, or m is NaN.\n          if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n          isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n          if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n          // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n          // If x is negative and n is odd, k = -0, else k = 0.\n          k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n          if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n          return new BigNumber(nIsNeg ? 1 / k : k);\n        } else if (POW_PRECISION) {\n          // Truncating each coefficient array to a length of k after each multiplication\n          // equates to truncating significant digits to POW_PRECISION + [28, 41],\n          // i.e. there will be a minimum of 28 guard digits retained.\n          k = mathceil(POW_PRECISION / LOG_BASE + 2);\n        }\n\n        if (nIsBig) {\n          half = new BigNumber(0.5);\n          if (nIsNeg) n.s = 1;\n          nIsOdd = isOdd(n);\n        } else {\n          i = Math.abs(+valueOf(n));\n          nIsOdd = i % 2;\n        }\n\n        y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n        for (;;) {\n          if (nIsOdd) {\n            y = y.times(x);\n            if (!y.c) break;\n\n            if (k) {\n              if (y.c.length > k) y.c.length = k;\n            } else if (isModExp) {\n              y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n            }\n          }\n\n          if (i) {\n            i = mathfloor(i / 2);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          } else {\n            n = n.times(half);\n            round(n, n.e + 1, 1);\n\n            if (n.e > 14) {\n              nIsOdd = isOdd(n);\n            } else {\n              i = +valueOf(n);\n              if (i === 0) break;\n              nIsOdd = i % 2;\n            }\n          }\n\n          x = x.times(x);\n\n          if (k) {\n            if (x.c && x.c.length > k) x.c.length = k;\n          } else if (isModExp) {\n            x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (isModExp) return y;\n        if (nIsNeg) y = ONE.div(y);\n        return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n       * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n       */\n\n\n      P.integerValue = function (rm) {\n        var n = new BigNumber(this);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(n, n.e + 1, rm);\n      };\n      /*\r\n       * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isEqualTo = P.eq = function (y, b) {\n        return compare(this, new BigNumber(y, b)) === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n       */\n\n\n      P.isFinite = function () {\n        return !!this.c;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isGreaterThan = P.gt = function (y, b) {\n        return compare(this, new BigNumber(y, b)) > 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is greater than or equal to the value of\r\n       * BigNumber(y, b), otherwise return false.\r\n       */\n\n\n      P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n        return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n       */\n\n\n      P.isInteger = function () {\n        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isLessThan = P.lt = function (y, b) {\n        return compare(this, new BigNumber(y, b)) < 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is less than or equal to the value of\r\n       * BigNumber(y, b), otherwise return false.\r\n       */\n\n\n      P.isLessThanOrEqualTo = P.lte = function (y, b) {\n        return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n       */\n\n\n      P.isNaN = function () {\n        return !this.s;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is negative, otherwise return false.\r\n       */\n\n\n      P.isNegative = function () {\n        return this.s < 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is positive, otherwise return false.\r\n       */\n\n\n      P.isPositive = function () {\n        return this.s > 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n       */\n\n\n      P.isZero = function () {\n        return !!this.c && this.c[0] == 0;\n      };\n      /*\r\n       *  n - 0 = n\r\n       *  n - N = N\r\n       *  n - I = -I\r\n       *  0 - n = -n\r\n       *  0 - 0 = 0\r\n       *  0 - N = N\r\n       *  0 - I = -I\r\n       *  N - n = N\r\n       *  N - 0 = N\r\n       *  N - N = N\r\n       *  N - I = N\r\n       *  I - n = I\r\n       *  I - 0 = I\r\n       *  I - N = N\r\n       *  I - I = N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n       * BigNumber(y, b).\r\n       */\n\n\n      P.minus = function (y, b) {\n        var i,\n            j,\n            t,\n            xLTy,\n            x = this,\n            a = x.s;\n        y = new BigNumber(y, b);\n        b = y.s; // Either NaN?\n\n        if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n        if (a != b) {\n          y.s = -b;\n          return x.plus(y);\n        }\n\n        var xe = x.e / LOG_BASE,\n            ye = y.e / LOG_BASE,\n            xc = x.c,\n            yc = y.c;\n\n        if (!xe || !ye) {\n          // Either Infinity?\n          if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n          if (!xc[0] || !yc[0]) {\n            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n            return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n            ROUNDING_MODE == 3 ? -0 : 0);\n          }\n        }\n\n        xe = bitFloor(xe);\n        ye = bitFloor(ye);\n        xc = xc.slice(); // Determine which is the bigger number.\n\n        if (a = xe - ye) {\n          if (xLTy = a < 0) {\n            a = -a;\n            t = xc;\n          } else {\n            ye = xe;\n            t = yc;\n          }\n\n          t.reverse(); // Prepend zeros to equalise exponents.\n\n          for (b = a; b--; t.push(0));\n\n          t.reverse();\n        } else {\n          // Exponents equal. Check digit by digit.\n          j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n          for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n              xLTy = xc[b] < yc[b];\n              break;\n            }\n          }\n        } // x < y? Point xc to the array of the bigger number.\n\n\n        if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n        b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n        // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n        if (b > 0) for (; b--; xc[i++] = 0);\n        b = BASE - 1; // Subtract yc from xc.\n\n        for (; j > a;) {\n          if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i]; xc[i] = b);\n\n            --xc[i];\n            xc[j] += BASE;\n          }\n\n          xc[j] -= yc[j];\n        } // Remove leading zeros and adjust exponent accordingly.\n\n\n        for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?\n\n\n        if (!xc[0]) {\n          // Following IEEE 754 (2008) 6.3,\n          // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n          y.s = ROUNDING_MODE == 3 ? -1 : 1;\n          y.c = [y.e = 0];\n          return y;\n        } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n        // for finite x and y.\n\n\n        return normalise(y, xc, ye);\n      };\n      /*\r\n       *   n % 0 =  N\r\n       *   n % N =  N\r\n       *   n % I =  n\r\n       *   0 % n =  0\r\n       *  -0 % n = -0\r\n       *   0 % 0 =  N\r\n       *   0 % N =  N\r\n       *   0 % I =  0\r\n       *   N % n =  N\r\n       *   N % 0 =  N\r\n       *   N % N =  N\r\n       *   N % I =  N\r\n       *   I % n =  N\r\n       *   I % 0 =  N\r\n       *   I % N =  N\r\n       *   I % I =  N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n       * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n       */\n\n\n      P.modulo = P.mod = function (y, b) {\n        var q,\n            s,\n            x = this;\n        y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n        if (!x.c || !y.s || y.c && !y.c[0]) {\n          return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n        } else if (!y.c || x.c && !x.c[0]) {\n          return new BigNumber(x);\n        }\n\n        if (MODULO_MODE == 9) {\n          // Euclidian division: q = sign(y) * floor(x / abs(y))\n          // r = x - qy    where  0 <= r < abs(y)\n          s = y.s;\n          y.s = 1;\n          q = div(x, y, 0, 3);\n          y.s = s;\n          q.s *= s;\n        } else {\n          q = div(x, y, 0, MODULO_MODE);\n        }\n\n        y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n        if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n        return y;\n      };\n      /*\r\n       *  n * 0 = 0\r\n       *  n * N = N\r\n       *  n * I = I\r\n       *  0 * n = 0\r\n       *  0 * 0 = 0\r\n       *  0 * N = N\r\n       *  0 * I = N\r\n       *  N * n = N\r\n       *  N * 0 = N\r\n       *  N * N = N\r\n       *  N * I = N\r\n       *  I * n = I\r\n       *  I * 0 = N\r\n       *  I * N = N\r\n       *  I * I = I\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n       * of BigNumber(y, b).\r\n       */\n\n\n      P.multipliedBy = P.times = function (y, b) {\n        var c,\n            e,\n            i,\n            j,\n            k,\n            m,\n            xcL,\n            xlo,\n            xhi,\n            ycL,\n            ylo,\n            yhi,\n            zc,\n            base,\n            sqrtBase,\n            x = this,\n            xc = x.c,\n            yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n        if (!xc || !yc || !xc[0] || !yc[0]) {\n          // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n          if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n            y.c = y.e = y.s = null;\n          } else {\n            y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n            if (!xc || !yc) {\n              y.c = y.e = null; // Return ±0 if either is ±0.\n            } else {\n              y.c = [0];\n              y.e = 0;\n            }\n          }\n\n          return y;\n        }\n\n        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n        y.s *= x.s;\n        xcL = xc.length;\n        ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n        if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n        for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n        base = BASE;\n        sqrtBase = SQRT_BASE;\n\n        for (i = ycL; --i >= 0;) {\n          c = 0;\n          ylo = yc[i] % sqrtBase;\n          yhi = yc[i] / sqrtBase | 0;\n\n          for (k = xcL, j = i + k; j > i;) {\n            xlo = xc[--k] % sqrtBase;\n            xhi = xc[k] / sqrtBase | 0;\n            m = yhi * xlo + xhi * ylo;\n            xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n            c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n            zc[j--] = xlo % base;\n          }\n\n          zc[j] = c;\n        }\n\n        if (c) {\n          ++e;\n        } else {\n          zc.splice(0, 1);\n        }\n\n        return normalise(y, zc, e);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n       * i.e. multiplied by -1.\r\n       */\n\n\n      P.negated = function () {\n        var x = new BigNumber(this);\n        x.s = -x.s || null;\n        return x;\n      };\n      /*\r\n       *  n + 0 = n\r\n       *  n + N = N\r\n       *  n + I = I\r\n       *  0 + n = n\r\n       *  0 + 0 = 0\r\n       *  0 + N = N\r\n       *  0 + I = I\r\n       *  N + n = N\r\n       *  N + 0 = N\r\n       *  N + N = N\r\n       *  N + I = N\r\n       *  I + n = I\r\n       *  I + 0 = I\r\n       *  I + N = N\r\n       *  I + I = I\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n       * BigNumber(y, b).\r\n       */\n\n\n      P.plus = function (y, b) {\n        var t,\n            x = this,\n            a = x.s;\n        y = new BigNumber(y, b);\n        b = y.s; // Either NaN?\n\n        if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n        if (a != b) {\n          y.s = -b;\n          return x.minus(y);\n        }\n\n        var xe = x.e / LOG_BASE,\n            ye = y.e / LOG_BASE,\n            xc = x.c,\n            yc = y.c;\n\n        if (!xe || !ye) {\n          // Return ±Infinity if either ±Infinity.\n          if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n          if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n        }\n\n        xe = bitFloor(xe);\n        ye = bitFloor(ye);\n        xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n        if (a = xe - ye) {\n          if (a > 0) {\n            ye = xe;\n            t = yc;\n          } else {\n            a = -a;\n            t = xc;\n          }\n\n          t.reverse();\n\n          for (; a--; t.push(0));\n\n          t.reverse();\n        }\n\n        a = xc.length;\n        b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n        if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n        for (a = 0; b;) {\n          a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n          xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n        }\n\n        if (a) {\n          xc = [a].concat(xc);\n          ++ye;\n        } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n        // ye = MAX_EXP + 1 possible\n\n\n        return normalise(y, xc, ye);\n      };\n      /*\r\n       * If sd is undefined or null or true or false, return the number of significant digits of\r\n       * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n       * If sd is true include integer-part trailing zeros in the count.\r\n       *\r\n       * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n       * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n       * ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n       *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n       */\n\n\n      P.precision = P.sd = function (sd, rm) {\n        var c,\n            n,\n            v,\n            x = this;\n\n        if (sd != null && sd !== !!sd) {\n          intCheck(sd, 1, MAX);\n          if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n          return round(new BigNumber(x), sd, rm);\n        }\n\n        if (!(c = x.c)) return null;\n        v = c.length - 1;\n        n = v * LOG_BASE + 1;\n\n        if (v = c[v]) {\n          // Subtract the number of trailing zeros of the last element.\n          for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n          for (v = c[0]; v >= 10; v /= 10, n++);\n        }\n\n        if (sd && x.e + 1 > n) n = x.e + 1;\n        return n;\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n       * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n       *\r\n       * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n       */\n\n\n      P.shiftedBy = function (k) {\n        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n        return this.times('1e' + k);\n      };\n      /*\r\n       *  sqrt(-n) =  N\r\n       *  sqrt(N) =  N\r\n       *  sqrt(-I) =  N\r\n       *  sqrt(I) =  I\r\n       *  sqrt(0) =  0\r\n       *  sqrt(-0) = -0\r\n       *\r\n       * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n       * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       */\n\n\n      P.squareRoot = P.sqrt = function () {\n        var m,\n            n,\n            r,\n            rep,\n            t,\n            x = this,\n            c = x.c,\n            s = x.s,\n            e = x.e,\n            dp = DECIMAL_PLACES + 4,\n            half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n        if (s !== 1 || !c || !c[0]) {\n          return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n        } // Initial estimate.\n\n\n        s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n        if (s == 0 || s == 1 / 0) {\n          n = coeffToString(c);\n          if ((n.length + e) % 2 == 0) n += '0';\n          s = Math.sqrt(+n);\n          e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n          if (s == 1 / 0) {\n            n = '5e' + e;\n          } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf('e') + 1) + e;\n          }\n\n          r = new BigNumber(n);\n        } else {\n          r = new BigNumber(s + '');\n        } // Check for zero.\n        // r could be zero if MIN_EXP is changed after the this value was created.\n        // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n        // coeffToString to throw.\n\n\n        if (r.c[0]) {\n          e = r.e;\n          s = e + dp;\n          if (s < 3) s = 0; // Newton-Raphson iteration.\n\n          for (;;) {\n            t = r;\n            r = half.times(t.plus(div(x, t, dp, 1)));\n\n            if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n              // The exponent of r may here be one less than the final result exponent,\n              // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n              // are indexed correctly.\n              if (r.e < e) --s;\n              n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n              // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n              // iteration.\n\n              if (n == '9999' || !rep && n == '4999') {\n                // On the first iteration only, check to see if rounding up gives the\n                // exact result as the nines may infinitely repeat.\n                if (!rep) {\n                  round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                  if (t.times(t).eq(x)) {\n                    r = t;\n                    break;\n                  }\n                }\n\n                dp += 4;\n                s += 4;\n                rep = 1;\n              } else {\n                // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                // result. If not, then there are further digits and m will be truthy.\n                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                  // Truncate to the first rounding digit.\n                  round(r, r.e + DECIMAL_PLACES + 2, 1);\n                  m = !r.times(r).eq(x);\n                }\n\n                break;\n              }\n            }\n          }\n        }\n\n        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in exponential notation and\r\n       * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.toExponential = function (dp, rm) {\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          dp++;\n        }\n\n        return format(this, dp, rm, 1);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n       * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n       * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.toFixed = function (dp, rm) {\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          dp = dp + this.e + 1;\n        }\n\n        return format(this, dp, rm);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n       * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n       * of the format or FORMAT object (see BigNumber.set).\r\n       *\r\n       * The formatting object may contain some or all of the properties shown below.\r\n       *\r\n       * FORMAT = {\r\n       *   prefix: '',\r\n       *   groupSize: 3,\r\n       *   secondaryGroupSize: 0,\r\n       *   groupSeparator: ',',\r\n       *   decimalSeparator: '.',\r\n       *   fractionGroupSize: 0,\r\n       *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n       *   suffix: ''\r\n       * };\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       * [format] {object} Formatting options. See FORMAT pbject above.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       * '[BigNumber Error] Argument not an object: {format}'\r\n       */\n\n\n      P.toFormat = function (dp, rm, format) {\n        var str,\n            x = this;\n\n        if (format == null) {\n          if (dp != null && rm && typeof rm == 'object') {\n            format = rm;\n            rm = null;\n          } else if (dp && typeof dp == 'object') {\n            format = dp;\n            dp = rm = null;\n          } else {\n            format = FORMAT;\n          }\n        } else if (typeof format != 'object') {\n          throw Error(bignumberError + 'Argument not an object: ' + format);\n        }\n\n        str = x.toFixed(dp, rm);\n\n        if (x.c) {\n          var i,\n              arr = str.split('.'),\n              g1 = +format.groupSize,\n              g2 = +format.secondaryGroupSize,\n              groupSeparator = format.groupSeparator || '',\n              intPart = arr[0],\n              fractionPart = arr[1],\n              isNeg = x.s < 0,\n              intDigits = isNeg ? intPart.slice(1) : intPart,\n              len = intDigits.length;\n          if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n          if (g1 > 0 && len > 0) {\n            i = len % g1 || g1;\n            intPart = intDigits.substr(0, i);\n\n            for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n\n            if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n            if (isNeg) intPart = '-' + intPart;\n          }\n\n          str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n        }\n\n        return (format.prefix || '') + str + (format.suffix || '');\n      };\n      /*\r\n       * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n       * fraction with an integer numerator and an integer denominator.\r\n       * The denominator will be a positive non-zero value less than or equal to the specified\r\n       * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n       * the lowest value necessary to represent the number exactly.\r\n       *\r\n       * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n       *\r\n       * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n       */\n\n\n      P.toFraction = function (md) {\n        var d,\n            d0,\n            d1,\n            d2,\n            e,\n            exp,\n            n,\n            n0,\n            n1,\n            q,\n            r,\n            s,\n            x = this,\n            xc = x.c;\n\n        if (md != null) {\n          n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n          if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n            throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n          }\n        }\n\n        if (!xc) return new BigNumber(x);\n        d = new BigNumber(ONE);\n        n1 = d0 = new BigNumber(ONE);\n        d1 = n0 = new BigNumber(ONE);\n        s = coeffToString(xc); // Determine initial denominator.\n        // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n        e = d.e = s.length - x.e - 1;\n        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n        md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n        exp = MAX_EXP;\n        MAX_EXP = 1 / 0;\n        n = new BigNumber(s); // n0 = d1 = 0\n\n        n0.c[0] = 0;\n\n        for (;;) {\n          q = div(n, d, 0, 1);\n          d2 = d0.plus(q.times(d1));\n          if (d2.comparedTo(md) == 1) break;\n          d0 = d1;\n          d1 = d2;\n          n1 = n0.plus(q.times(d2 = n1));\n          n0 = d2;\n          d = n.minus(q.times(d2 = d));\n          n = d2;\n        }\n\n        d2 = div(md.minus(d0), d1, 0, 1);\n        n0 = n0.plus(d2.times(n1));\n        d0 = d0.plus(d2.times(d1));\n        n0.s = n1.s = x.s;\n        e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n        r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n        MAX_EXP = exp;\n        return r;\n      };\n      /*\r\n       * Return the value of this BigNumber converted to a number primitive.\r\n       */\n\n\n      P.toNumber = function () {\n        return +valueOf(this);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n       * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n       * necessary to represent the integer part of the value in fixed-point notation, then use\r\n       * exponential notation.\r\n       *\r\n       * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n       */\n\n\n      P.toPrecision = function (sd, rm) {\n        if (sd != null) intCheck(sd, 1, MAX);\n        return format(this, sd, rm, 2);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n       * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n       * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n       * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n       * TO_EXP_NEG, return exponential notation.\r\n       *\r\n       * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n       *\r\n       * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n       */\n\n\n      P.toString = function (b) {\n        var str,\n            n = this,\n            s = n.s,\n            e = n.e; // Infinity or NaN?\n\n        if (e === null) {\n          if (s) {\n            str = 'Infinity';\n            if (s < 0) str = '-' + str;\n          } else {\n            str = 'NaN';\n          }\n        } else {\n          if (b == null) {\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n          } else if (b === 10) {\n            n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n            str = toFixedPoint(coeffToString(n.c), n.e, '0');\n          } else {\n            intCheck(b, 2, ALPHABET.length, 'Base');\n            str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n          }\n\n          if (s < 0 && n.c[0]) str = '-' + str;\n        }\n\n        return str;\n      };\n      /*\r\n       * Return as toString, but do not accept a base argument, and include the minus sign for\r\n       * negative zero.\r\n       */\n\n\n      P.valueOf = P.toJSON = function () {\n        return valueOf(this);\n      };\n\n      P._isBigNumber = true;\n      if (configObject != null) BigNumber.set(configObject);\n      return BigNumber;\n    } // PRIVATE HELPER FUNCTIONS\n    // These functions don't need access to variables,\n    // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n    function bitFloor(n) {\n      var i = n | 0;\n      return n > 0 || n === i ? i : i - 1;\n    } // Return a coefficient array as a string of base 10 digits.\n\n\n    function coeffToString(a) {\n      var s,\n          z,\n          i = 1,\n          j = a.length,\n          r = a[0] + '';\n\n      for (; i < j;) {\n        s = a[i++] + '';\n        z = LOG_BASE - s.length;\n\n        for (; z--; s = '0' + s);\n\n        r += s;\n      } // Determine trailing zeros.\n\n\n      for (j = r.length; r.charCodeAt(--j) === 48;);\n\n      return r.slice(0, j + 1 || 1);\n    } // Compare the value of BigNumbers x and y.\n\n\n    function compare(x, y) {\n      var a,\n          b,\n          xc = x.c,\n          yc = y.c,\n          i = x.s,\n          j = y.s,\n          k = x.e,\n          l = y.e; // Either NaN?\n\n      if (!i || !j) return null;\n      a = xc && !xc[0];\n      b = yc && !yc[0]; // Either zero?\n\n      if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n      if (i != j) return i;\n      a = i < 0;\n      b = k == l; // Either Infinity?\n\n      if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n      if (!b) return k > l ^ a ? 1 : -1;\n      j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n      for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n      return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n    /*\r\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n     */\n\n\n    function intCheck(n, min, max, name) {\n      if (n < min || n > max || n !== mathfloor(n)) {\n        throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n      }\n    } // Assumes finite n.\n\n\n    function isOdd(n) {\n      var k = n.c.length - 1;\n      return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n    function toExponential(str, e) {\n      return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n    }\n\n    function toFixedPoint(str, e, z) {\n      var len, zs; // Negative exponent?\n\n      if (e < 0) {\n        // Prepend zeros.\n        for (zs = z + '.'; ++e; zs += z);\n\n        str = zs + str; // Positive exponent\n      } else {\n        len = str.length; // Append zeros.\n\n        if (++e > len) {\n          for (zs = z, e -= len; --e; zs += z);\n\n          str += zs;\n        } else if (e < len) {\n          str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n\n      return str;\n    } // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n    if (module.exports) {\n      module.exports = BigNumber; // Browser.\n    } else {\n      if (!globalObject) {\n        globalObject = typeof self != 'undefined' && self ? self : window;\n      }\n\n      globalObject.BigNumber = BigNumber;\n    }\n  })(commonjsGlobal);\n});\n\nvar stringIsInteger = function stringIsInteger(integer, positiveNumbersOnly) {\n  if (positiveNumbersOnly === void 0) {\n    positiveNumbersOnly = true;\n  }\n\n  var stringInteger = String(integer);\n\n  if (!stringInteger.match(/^[-]?\\d+$/)) {\n    return false;\n  }\n\n  var bNparsed = new bignumber(stringInteger);\n  var limit = positiveNumbersOnly ? 0 : -1;\n  return bNparsed.toString(10) === stringInteger && bNparsed.comparedTo(0) >= limit;\n};\n\nfunction format(big, denomination, decimals, showLastNonZeroDecimal, addCommas) {\n  showLastNonZeroDecimal = typeof showLastNonZeroDecimal !== \"undefined\" ? showLastNonZeroDecimal : false;\n  var array = big.toString().split(\"\");\n  var negative = false;\n\n  if (array[0] === \"-\") {\n    array.shift();\n    negative = true;\n  }\n\n  if (denomination !== 0) {\n    while (array.length < denomination + 1) {\n      array.unshift(\"0\");\n    }\n\n    array.splice(array.length - denomination, 0, \".\");\n\n    while (array.length - array.indexOf(\".\") <= decimals) {\n      array.push(\"0\");\n    }\n\n    if (showLastNonZeroDecimal) {\n      var nonZeroDigitIndex = 0;\n\n      for (var i = array.length - 1; i > 0; i--) {\n        if (array[i] !== \"0\") {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n\n      var decimalsIndex = array.indexOf(\".\") + decimals + 1;\n      var sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      array = array.slice(0, array.indexOf(\".\") + decimals + 1);\n    }\n  }\n\n  if (addCommas) {\n    array = array.reverse();\n    var reference = denomination ? array.length - array.indexOf(\".\") - 1 : array.length;\n    var count = Math.floor(reference / 3);\n\n    for (var _i = 1; _i <= count; _i++) {\n      var position = array.indexOf(\".\") + 3 * _i + _i;\n\n      if (position !== array.length) {\n        array.splice(position, 0, \",\");\n      }\n    }\n\n    array = array.reverse();\n  }\n\n  var allDecimalsZero = array.slice(array.indexOf(\".\") + 1).every(function (digit) {\n    return digit.toString() === \"0\";\n  });\n  var string = array.join(\"\");\n  var output;\n\n  if (allDecimalsZero) {\n    output = string.split(\".\")[0];\n  } else {\n    output = decimals === 0 && !showLastNonZeroDecimal ? string.split(\".\").join(\"\") : string;\n  }\n\n  if (negative) {\n    output = \"-\" + output;\n  }\n\n  return output;\n}\n\nfunction denominate(_ref) {\n  var input = _ref.input,\n      denomination = _ref.denomination,\n      decimals = _ref.decimals,\n      _ref$showLastNonZeroD = _ref.showLastNonZeroDecimal,\n      showLastNonZeroDecimal = _ref$showLastNonZeroD === void 0 ? false : _ref$showLastNonZeroD,\n      _ref$addCommas = _ref.addCommas,\n      addCommas = _ref$addCommas === void 0 ? true : _ref$addCommas;\n\n  if (!stringIsInteger(input, false)) {\n    throw new Error(\"Invalid input\");\n  }\n\n  return format(input, denomination, decimals, showLastNonZeroDecimal, addCommas);\n}\n\nvar decimals = 4;\nvar denomination = 18;\nvar erdLabel = \"EGLD\";\n\nvar denominateInvalid = function denominateInvalid(props) {\n  return React__default.createElement(\"span\", {\n    \"data-testid\": props[\"data-testid\"] ? props[\"data-testid\"] : \"denominateComponent\"\n  }, React__default.createElement(\"span\", {\n    className: \"int-amount\"\n  }, \"...\"));\n};\n\nvar denominateValid = function denominateValid(props) {\n  var value = props.value,\n      _props$showLastNonZer = props.showLastNonZeroDecimal,\n      showLastNonZeroDecimal = _props$showLastNonZer === void 0 ? false : _props$showLastNonZer,\n      _props$showLabel = props.showLabel,\n      showLabel = _props$showLabel === void 0 ? true : _props$showLabel,\n      _props$erdLabel = props.erdLabel,\n      erdLabel$1 = _props$erdLabel === void 0 ? erdLabel : _props$erdLabel;\n  var decimals$1 = props.decimals !== undefined ? props.decimals : decimals;\n  var denomination$1 = props.denomination !== undefined ? props.denomination : denomination;\n  var denominatedValue = denominate({\n    input: value,\n    denomination: denomination$1,\n    decimals: decimals$1,\n    showLastNonZeroDecimal: showLastNonZeroDecimal\n  });\n  var valueParts = denominatedValue.split(\".\");\n  var hasNoDecimals = valueParts.length === 1;\n  var isNotZero = denominatedValue !== \"0\";\n\n  if (decimals$1 > 0 && hasNoDecimals && isNotZero) {\n    var zeros = \"\";\n\n    for (var i = 1; i <= decimals$1; i++) {\n      zeros = zeros + \"0\";\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return React__default.createElement(\"span\", {\n    \"data-testid\": props[\"data-testid\"] ? props[\"data-testid\"] : \"denominateComponent\"\n  }, React__default.createElement(\"span\", {\n    className: \"int-amount\"\n  }, valueParts[0]), valueParts.length > 1 && React__default.createElement(\"span\", {\n    className: \"decimals\"\n  }, \".\", valueParts[1]), showLabel && React__default.createElement(\"span\", {\n    className: \"symbol \" + (props.token ? \"text-muted\" : \"\")\n  }, \"\\xA0\", props.token ? props.token : erdLabel$1));\n};\n\nvar Denominate = function Denominate(props) {\n  var value = props.value;\n  return !stringIsInteger(value) ? denominateInvalid(props) : denominateValid(props);\n};\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar usdValue = function usdValue(_ref) {\n  var amount = _ref.amount,\n      usd = _ref.usd,\n      _ref$decimals = _ref.decimals,\n      decimals = _ref$decimals === void 0 ? 2 : _ref$decimals;\n  var sum = (parseFloat(amount) * usd).toFixed(decimals);\n  return parseFloat(sum).toLocaleString('en', {\n    maximumFractionDigits: decimals,\n    minimumFractionDigits: decimals\n  });\n};\n\nvar _excluded = [\"amount\", \"usd\"];\n\nvar UsdValue = function UsdValue(props) {\n  var amount = props.amount,\n      usd = props.usd,\n      dataTestId = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var value = \"\\u2248 $\" + usdValue({\n    amount: amount,\n    usd: usd\n  });\n  return createElement(\"small\", Object.assign({\n    className: \"form-text text-secondary mt-0\"\n  }, dataTestId), \"\" + amount === \"0\" ? \"= $0\" : value);\n};\n\nfunction nominate(input, customDenomination) {\n  var parts = input.toString().split('.');\n  var denomination$1 = customDenomination !== undefined ? customDenomination : denomination;\n\n  if (parts[1]) {\n    while (parts[1].substring(parts[1].length - 1) === '0' && parts[1].length > 1) {\n      parts[1] = parts[1].substring(0, parts[1].length - 1);\n    }\n  }\n\n  var count = parts[1] ? denomination$1 - parts[1].length : denomination$1;\n  count = count < 0 ? 0 : count;\n  var transformed = parts.join('') + '0'.repeat(count);\n\n  while (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n    transformed = transformed.substring(1);\n  }\n\n  return transformed;\n}\n\nfunction getTokenFromData(data) {\n  if (data && data.includes(\"ESDTTransfer\")) {\n    try {\n      var _data$split = data.split(\"@\"),\n          encodedToken = _data$split[1],\n          encodedAmount = _data$split[2],\n          rest = _data$split.slice(3);\n\n      var tokenId = Buffer.from(encodedToken, \"hex\").toString(\"ascii\");\n\n      if (tokenId) {\n        var nominatedTokenAmount = new bignumber(\"0x\" + encodedAmount.replace(\"0x\", \"\")).toString(10);\n        return {\n          tokenId: tokenId,\n          nominatedTokenAmount: nominatedTokenAmount\n        };\n      } else {\n        return {\n          tokenId: \"\",\n          nominatedTokenAmount: \"\"\n        };\n      }\n    } catch (e) {\n      return {\n        tokenId: \"\",\n        nominatedTokenAmount: \"\"\n      };\n    }\n  }\n\n  return {\n    tokenId: \"\",\n    nominatedTokenAmount: \"\"\n  };\n}\n\nvar stringIsFloat = function stringIsFloat(amount) {\n  var _amount$split = amount.split(\".\"),\n      wholes = _amount$split[0],\n      decimals = _amount$split[1];\n\n  if (decimals) {\n    while (decimals.charAt(decimals.length - 1) === \"0\") {\n      decimals = decimals.slice(0, -1);\n    }\n  }\n\n  var number = decimals ? [wholes, decimals].join(\".\") : wholes;\n  var bNparsed = new bignumber(number);\n  return bNparsed.toString(10) === number && bNparsed.comparedTo(0) >= 0;\n};\n\nvar placeholderData = {\n  from: \"erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa\",\n  to: \"erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa\"\n};\n\nfunction calculateFeeLimit(_ref) {\n  var _ref$minGasLimit = _ref.minGasLimit,\n      minGasLimit = _ref$minGasLimit === void 0 ? \"50000\" : _ref$minGasLimit,\n      gasLimit = _ref.gasLimit,\n      gasPrice = _ref.gasPrice,\n      inputData = _ref.data,\n      gasPerDataByte = _ref.gasPerDataByte,\n      gasPriceModifier = _ref.gasPriceModifier,\n      _ref$defaultGasPrice = _ref.defaultGasPrice,\n      defaultGasPrice = _ref$defaultGasPrice === void 0 ? \"1000000000\" : _ref$defaultGasPrice,\n      chainId = _ref.chainId;\n  var data = inputData || \"\";\n  var validGasLimit = stringIsInteger(gasLimit) ? gasLimit : minGasLimit;\n  var validGasPrice = stringIsFloat(gasPrice) ? gasPrice : defaultGasPrice;\n  var transaction = new Transaction({\n    nonce: new Nonce(0),\n    value: Balance.Zero(),\n    receiver: new Address(placeholderData.to),\n    gasPrice: new GasPrice(parseInt(validGasPrice)),\n    gasLimit: new GasLimit(parseInt(validGasLimit)),\n    data: new TransactionPayload(data.trim()),\n    chainID: new ChainID(chainId),\n    version: new TransactionVersion(1)\n  });\n  var networkConfig = new NetworkConfig();\n  networkConfig.MinGasLimit = new GasLimit(parseInt(minGasLimit));\n  networkConfig.GasPerDataByte = parseInt(gasPerDataByte);\n  networkConfig.GasPriceModifier = new GasPriceModifier(parseFloat(gasPriceModifier));\n\n  try {\n    var bNfee = transaction.computeFee(networkConfig);\n    var fee = bNfee.toString(10);\n    return fee;\n  } catch (err) {\n    console.error(\"Unable to calculate fee limit\", err);\n    return \"0\";\n  }\n}\n\nvar Ui = {\n  UsdValue: UsdValue,\n  Trim: Trim,\n  Denominate: Denominate\n};\nvar operations = {\n  denominate: denominate,\n  nominate: nominate,\n  getTokenFromData: getTokenFromData,\n  calculateFeeLimit: calculateFeeLimit\n};\nvar helpers = {\n  usdValue: usdValue\n};\nvar validation = {\n  stringIsInteger: stringIsInteger,\n  stringIsFloat: stringIsFloat\n};\nexport { Ui, helpers, operations, validation };","map":{"version":3,"sources":["../src/helpers/useDebounce.ts","../src/components/Trim/index.tsx","../node_modules/bignumber.js/bignumber.js","../src/validation/stringIsInteger.ts","../src/operations/denominate.tsx","../src/config.ts","../src/components/Denominate/index.tsx","../src/helpers/usdValue.tsx","../src/components/UsdValue/index.tsx","../src/operations/nominate.ts","../src/operations/getTokenFromData.ts","../src/validation/stringIsFloat.ts","../src/operations/calculateFeeLimit.ts","../src/index.tsx"],"names":["useDebounce","state","setState","useState","effect","handler","setTimeout","clearTimeout","useEffect","Trim","text","dataTestId","className","debounce","setDebounce","React","overflow","setOverflow","trimRef","document","hiddenTextRef","debounceTracker","listener","window","diff","ref","String","Math","this","stringIsInteger","positiveNumbersOnly","stringInteger","bNparsed","limit","showLastNonZeroDecimal","array","big","negative","denomination","nonZeroDigitIndex","i","decimalsIndex","sliceIndex","reference","count","position","allDecimalsZero","digit","string","output","decimals","denominate","input","addCommas","format","erdLabel","denominateInvalid","props","denominateValid","value","showLabel","denominatedValue","valueParts","hasNoDecimals","isNotZero","zeros","Denominate","usdValue","amount","usd","sum","parseFloat","maximumFractionDigits","minimumFractionDigits","UsdValue","nominate","customDenomination","parts","transformed","getTokenFromData","data","encodedToken","encodedAmount","rest","tokenId","Buffer","nominatedTokenAmount","stringIsFloat","wholes","number","placeholderData","from","to","calculateFeeLimit","minGasLimit","gasLimit","gasPrice","inputData","gasPerDataByte","gasPriceModifier","defaultGasPrice","chainId","validGasLimit","validGasPrice","transaction","nonce","Balance","receiver","parseInt","chainID","version","networkConfig","bNfee","fee","console","Ui","operations","helpers","validation"],"mappings":";;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA,OAAA,EAAA;EAClB,IAAA,SAAA,GAA0BG,QAAQ,CAAlC,KAAkC,CAAlC;EAAA,IAAOF,KAAP,GAAA,SAAA,CAAA,CAAA,CAAA;EAAA,IAAcC,QAAd,GAAA,SAAA,CAAA,CAAA,CAAA;;EAEA,IAAME,MAAM,GAAG,SAATA,MAAS,GAAA;IACb,IAAMC,OAAO,GAAGC,UAAU,CAAC,YAAA;MAAA,OAAMJ,QAAQ,CAAd,KAAc,CAAd;IAAD,CAAA,EAA1B,OAA0B,CAA1B;IAEA,OAAO,YAAA;MAAA,OAAMK,YAAY,CAAlB,OAAkB,CAAlB;IAAP,CAAA;EAHF,CAAA;;EAMAC,SAAS,CAAA,MAAA,EAAS,CAAlBA,KAAkB,CAAT,CAATA;EAEA,OAAA,KAAA;AAXF,CAAA;;ACCA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAA,IAAA,EAAA;MACXC,IAAAA,GAAAA,IAAAA,CAAAA,I;MACeC,UAAAA,GAAAA,IAAAA,CAAf,aAAeA,C;4BACfC,S;MAAAA,SAAAA,GAAAA,cAAAA,KAAAA,KAAAA,CAAAA,GAAY,EAAZA,GAAY,c;;EAMZ,IAAA,eAAA,GAAgCG,QAAAA,CAAhC,CAAgCA,CAAhC;EAAA,IAAOF,QAAP,GAAA,eAAA,CAAA,CAAA,CAAA;EAAA,IAAiBC,WAAjB,GAAA,eAAA,CAAA,CAAA,CAAA;;EAEA,IAAA,gBAAA,GAAgCC,QAAAA,CAAhC,KAAgCA,CAAhC;EAAA,IAAOC,QAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAiBC,WAAjB,GAAA,gBAAA,CAAA,CAAA,CAAA;;EACA,IAAMC,OAAO,GAAGH,MAAAA,CAAaI,QAAQ,CAARA,aAAAA,CAA7B,MAA6BA,CAAbJ,CAAhB;EACA,IAAMK,aAAa,GAAGL,MAAAA,CAAaI,QAAQ,CAARA,aAAAA,CAAnC,MAAmCA,CAAbJ,CAAtB;EAEA,IAAMM,eAAe,GAAGrB,WAAW,CAAA,QAAA,EAAnC,GAAmC,CAAnC;;EAEA,IAAMsB,QAAQ,GAAG,SAAXA,QAAW,GAAA;IACfR,WAAW,CAACD,QAAQ,GAApBC,CAAW,CAAXA;EADF,CAAA;;EAIA,IAAMV,MAAM,GAAG,SAATA,MAAS,GAAA;IACbmB,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;IACA,OAAO,YAAA;MACLA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;IADF,CAAA;EAFF,CAAA;;EAOAR,SAAAA,CAAAA,MAAAA,EAAwB,CAAxBA,QAAwB,CAAxBA,CAAAA;EAEAA,SAAAA,CAAgB,YAAA;IACd,IAAIG,OAAO,CAAPA,OAAAA,IAAmBE,aAAa,CAApC,OAAA,EAA8C;MAC5C,IAAMI,IAAI,GACRJ,aAAa,CAAbA,OAAAA,CAAAA,WAAAA,GAAoCF,OAAO,CAAPA,OAAAA,CADtC,WAAA;MAEAD,WAAW,CAACO,IAAI,GAAhBP,CAAW,CAAXA;IACD;EALHF,CAAAA,EAMG,CANHA,eAMG,CANHA,CAAAA;EAQA,OACE,aAAA,CAAA,MAAA,EAAA;IACEU,GAAG,EAAEP,OADP;IAEEN,SAAS,EAAA,WAAUI,QAAQ,GAAA,UAAA,GAAlB,EAAA,CAFX;mBAGeL;EAHf,CAAA,EAKE,aAAA,CAAA,MAAA,EAAA;IAAMc,GAAG,EAAEL,aAAX;IAA0BR,SAAS,EAAC;EAApC,CAAA,EALF,IAKE,CALF,EASGI,QAAQ,GACP,aAAA,CAAA,QAAA,EAAA,IAAA,EACE,aAAA,CAAA,MAAA,EAAA;IAAMJ,SAAS,EAAC;EAAhB,CAAA,EACE,aAAA,CAAA,MAAA,EAAA;IAAMA,SAAS,EAAEA;EAAjB,CAAA,EACGc,MAAM,CAANA,IAAM,CAANA,CAAAA,SAAAA,CAAAA,CAAAA,EAA0BC,IAAI,CAAJA,KAAAA,CAAWjB,IAAI,CAAJA,MAAAA,GAH5C,CAGiCiB,CAA1BD,CADH,CADF,CADF,EAME,aAAA,CAAA,MAAA,EAAA;IAAMd,SAAS,EAAA,cAAcA;EAA7B,CAAA,EANF,KAME,CANF,EAOE,aAAA,CAAA,MAAA,EAAA;IAAMA,SAAS,EAAC;EAAhB,CAAA,EACE,aAAA,CAAA,MAAA,EAAA;IAAMA,SAAS,EAAEA;EAAjB,CAAA,EACGc,MAAM,CAANA,IAAM,CAANA,CAAAA,SAAAA,CAAuBC,IAAI,CAAJA,IAAAA,CAAUjB,IAAI,CAAJA,MAAAA,GAVjC,CAUuBiB,CAAvBD,CADH,CADF,CAPF,CADO,GAeP,aAAA,CAAA,MAAA,EAAA;IAAMd,SAAS,EAAEA;EAAjB,CAAA,EAzBN,IAyBM,CAxBJ,CADF;AAtCF,CAAA;;;;;;;;;;;ECHC,CAAC,UAAU,YAAV,EAAwB;IAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAGE,IAAI,SAAJ;IAAA,IACE,SAAS,GAAG,4CADd;IAAA,IAEE,QAAQ,GAAG,IAAI,CAAC,IAFlB;IAAA,IAGE,SAAS,GAAG,IAAI,CAAC,KAHnB;IAAA,IAKE,cAAc,GAAG,oBALnB;IAAA,IAME,aAAa,GAAG,cAAc,GAAG,wDANnC;IAAA,IAQE,IAAI,GAAG,IART;IAAA,IASE,QAAQ,GAAG,EATb;IAAA,IAUE,gBAAgB,GAAG,gBAVrB;IAAA,IAUqC;IACvC;IACI,QAAQ,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,GAA3C,EAAgD,IAAhD,EAAsD,IAAtD,EAA4D,IAA5D,EAAkE,IAAlE,CAZb;IAAA,IAaE,SAAS,GAAG,GAbd;IAAA,IAeF;IACA;IACA;IACI,GAAG,GAAG,GAlBR,CAnDwB,CAqEZ;;IAGd;AACA;AACA;;IACE,SAAS,KAAT,CAAe,YAAf,EAA6B;MAC3B,IAAI,GAAJ;MAAA,IAAS,WAAT;MAAA,IAAsB,YAAtB;MAAA,IACE,CAAC,GAAG,SAAS,CAAC,SAAV,GAAsB;QAAE,WAAW,EAAE,SAAf;QAA0B,QAAQ,EAAE,IAApC;QAA0C,OAAO,EAAE;MAAnD,CAD5B;MAAA,IAEE,GAAG,GAAG,IAAI,SAAJ,CAAc,CAAd,CAFR;MAAA,IAKJ;MAGA;MACA;MAEA;MACM,cAAc,GAAG,EAZnB;MAAA,IAYqB;MAEzB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACM,aAAa,GAAG,CAzBlB;MAAA,IAyBmB;MAEvB;MAEA;MACA;MACM,UAAU,GAAG,CAAC,CA/BhB;MAAA,IA+BiB;MAErB;MACA;MACM,UAAU,GAAG,EAnCf;MAAA,IAmCiB;MAErB;MAEA;MACA;MACM,OAAO,GAAG,CAAC,GAzCb;MAAA,IAyCgB;MAEpB;MACA;MACA;MACM,OAAO,GAAG,GA9CZ;MAAA,IA8Ce;MAEnB;MACM,MAAM,GAAG,KAjDX;MAAA,IAiDgB;MAEpB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACM,WAAW,GAAG,CAnEhB;MAAA,IAmEiB;MAErB;MACA;MACM,aAAa,GAAG,CAvElB;MAAA,IAuEmB;MAEvB;MACM,MAAM,GAAG;QACP,MAAM,EAAE,EADD;QAEP,SAAS,EAAE,CAFJ;QAGP,kBAAkB,EAAE,CAHb;QAIP,cAAc,EAAE,GAJT;QAKP,gBAAgB,EAAE,GALX;QAMP,iBAAiB,EAAE,CANZ;QAOP,sBAAsB,EAAE,MAPjB;QAOuB;QAC9B,MAAM,EAAE;MARD,CA1EX;MAAA,IAqFJ;MACA;MACA;MACM,QAAQ,GAAG,sCAxFb,CAD2B,CA4F/B;MAGA;;MAGA;AACA;AACA;AACA;AACA;AACA;AACA;;MACI,SAAS,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB;QACvB,IAAI,QAAJ;QAAA,IAAc,CAAd;QAAA,IAAiB,WAAjB;QAAA,IAA8B,CAA9B;QAAA,IAAiC,CAAjC;QAAA,IAAoC,KAApC;QAAA,IAA2C,GAA3C;QAAA,IAAgD,GAAhD;QAAA,IACE,CAAC,GAAG,IADN,CADuB,CAI7B;;QACM,IAAI,EAAE,CAAC,YAAY,SAAf,CAAJ,EAA+B,OAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP;;QAE/B,IAAI,CAAC,IAAI,IAAT,EAAe;UAEb,IAAI,CAAC,IAAI,CAAC,CAAC,YAAF,KAAmB,IAA5B,EAAkC;YAChC,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAR;;YAEA,IAAI,CAAC,CAAC,CAAC,CAAH,IAAQ,CAAC,CAAC,CAAF,GAAM,OAAlB,EAA2B;cACzB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,IAAZ;YACD,CAFD,MAEO,IAAI,CAAC,CAAC,CAAF,GAAM,OAAV,EAAmB;cACxB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAF,GAAM,CAAP,CAAN;YACD,CAFM,MAEA;cACL,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAR;cACA,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,CAAI,KAAJ,EAAN;YACD;;YAED;UACD;;UAED,IAAI,CAAC,KAAK,GAAG,OAAO,CAAP,IAAY,QAArB,KAAkC,CAAC,GAAG,CAAJ,IAAS,CAA/C,EAAkD;YAE1D;YACU,CAAC,CAAC,CAAF,GAAM,IAAI,CAAJ,GAAQ,CAAR,IAAa,CAAC,GAAG,CAAC,CAAL,EAAQ,CAAC,CAAtB,IAA2B,CAAjC,CAHgD,CAK1D;;YACU,IAAI,CAAC,KAAK,CAAC,CAAC,CAAZ,EAAe;cACb,KAAK,CAAC,GAAG,CAAJ,EAAO,CAAC,GAAG,CAAhB,EAAmB,CAAC,IAAI,EAAxB,EAA4B,CAAC,IAAI,EAAL,EAAS,CAAC,EAAtC,CAAyC;;cAEzC,IAAI,CAAC,GAAG,OAAR,EAAiB;gBACf,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,IAAZ;cACD,CAFD,MAEO;gBACL,CAAC,CAAC,CAAF,GAAM,CAAN;gBACA,CAAC,CAAC,CAAF,GAAM,CAAC,CAAD,CAAN;cACD;;cAED;YACD;;YAED,GAAG,GAAG,MAAM,CAAC,CAAD,CAAZ;UACD,CApBD,MAoBO;YAEL,IAAI,CAAC,SAAS,CAAC,IAAV,CAAe,GAAG,GAAG,MAAM,CAAC,CAAD,CAA3B,CAAL,EAAsC,OAAO,YAAY,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAnB;YAEtC,CAAC,CAAC,CAAF,GAAM,GAAG,CAAC,UAAJ,CAAe,CAAf,KAAqB,EAArB,IAA2B,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAN,EAAoB,CAAC,CAAhD,IAAqD,CAA3D;UACD,CA1CY,CA4CrB;;;UACQ,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAL,IAAyB,CAAC,CAA9B,EAAiC,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAN,CA7CpB,CA+CrB;;UACQ,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,MAAJ,CAAW,IAAX,CAAL,IAAyB,CAA7B,EAAgC;YAExC;YACU,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,CAAJ;YACX,CAAC,IAAI,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAC,GAAG,CAAd,CAAN;YACA,GAAG,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAN;UACD,CAND,MAMO,IAAI,CAAC,GAAG,CAAR,EAAW;YAE1B;YACU,CAAC,GAAG,GAAG,CAAC,MAAR;UACD;QAEF,CA5DD,MA4DO;UAEb;UACQ,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,QAAQ,CAAC,MAAhB,EAAwB,MAAxB,CAAR,CAHK,CAKb;UACA;;UACQ,IAAI,CAAC,IAAI,EAAT,EAAa;YACX,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,CAAJ;YACA,OAAO,KAAK,CAAC,CAAD,EAAI,cAAc,GAAG,CAAC,CAAC,CAAnB,GAAuB,CAA3B,EAA8B,aAA9B,CAAZ;UACD;;UAED,GAAG,GAAG,MAAM,CAAC,CAAD,CAAZ;;UAEA,IAAI,KAAK,GAAG,OAAO,CAAP,IAAY,QAAxB,EAAkC;YAE1C;YACU,IAAI,CAAC,GAAG,CAAJ,IAAS,CAAb,EAAgB,OAAO,YAAY,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,EAAgB,CAAhB,CAAnB;YAEhB,CAAC,CAAC,CAAF,GAAM,IAAI,CAAJ,GAAQ,CAAR,IAAa,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAN,EAAoB,CAAC,CAAlC,IAAuC,CAA7C,CALgC,CAO1C;;YACU,IAAI,SAAS,CAAC,KAAV,IAAmB,GAAG,CAAC,OAAJ,CAAY,WAAZ,EAAyB,EAAzB,EAA6B,MAA7B,GAAsC,EAA7D,EAAiE;cAC/D,MAAM,KAAK,CACT,aAAa,GAAG,CADP,CAAX;YAED;UACF,CAZD,MAYO;YACL,CAAC,CAAC,CAAF,GAAM,GAAG,CAAC,UAAJ,CAAe,CAAf,MAAsB,EAAtB,IAA4B,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAN,EAAoB,CAAC,CAAjD,IAAsD,CAA5D;UACD;;UAED,QAAQ,GAAG,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAX;UACA,CAAC,GAAG,CAAC,GAAG,CAAR,CA/BK,CAiCb;UACA;;UACQ,KAAK,GAAG,GAAG,GAAG,CAAC,MAAf,EAAuB,CAAC,GAAG,GAA3B,EAAgC,CAAC,EAAjC,EAAqC;YACnC,IAAI,QAAQ,CAAC,OAAT,CAAiB,CAAC,GAAG,GAAG,CAAC,MAAJ,CAAW,CAAX,CAArB,IAAsC,CAA1C,EAA6C;cAC3C,IAAI,CAAC,IAAI,GAAT,EAAc;gBAE1B;gBACc,IAAI,CAAC,GAAG,CAAR,EAAW;kBACT,CAAC,GAAG,GAAJ;kBACA;gBACD;cACF,CAPD,MAOO,IAAI,CAAC,WAAL,EAAkB;gBAErC;gBACc,IAAI,GAAG,IAAI,GAAG,CAAC,WAAJ,EAAP,KAA6B,GAAG,GAAG,GAAG,CAAC,WAAJ,EAAnC,KACA,GAAG,IAAI,GAAG,CAAC,WAAJ,EAAP,KAA6B,GAAG,GAAG,GAAG,CAAC,WAAJ,EAAnC,CADJ,EAC2D;kBACzD,WAAW,GAAG,IAAd;kBACA,CAAC,GAAG,CAAC,CAAL;kBACA,CAAC,GAAG,CAAJ;kBACA;gBACD;cACF;;cAED,OAAO,YAAY,CAAC,CAAD,EAAI,MAAM,CAAC,CAAD,CAAV,EAAe,KAAf,EAAsB,CAAtB,CAAnB;YACD;UACF,CA1DI,CA4Db;;;UACQ,KAAK,GAAG,KAAR;UACA,GAAG,GAAG,WAAW,CAAC,GAAD,EAAM,CAAN,EAAS,EAAT,EAAa,CAAC,CAAC,CAAf,CAAjB,CA9DK,CAgEb;;UACQ,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAL,IAAyB,CAAC,CAA9B,EAAiC,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAN,CAAjC,KACK,CAAC,GAAG,GAAG,CAAC,MAAR;QACN,CAtIsB,CAwI7B;;;QACM,KAAK,CAAC,GAAG,CAAT,EAAY,GAAG,CAAC,UAAJ,CAAe,CAAf,MAAsB,EAAlC,EAAsC,CAAC,EAAvC,CAA0C,CAzInB,CA2I7B;;;QACM,KAAK,GAAG,GAAG,GAAG,CAAC,MAAf,EAAuB,GAAG,CAAC,UAAJ,CAAe,EAAE,GAAjB,MAA0B,EAAjD,EAAqD;;QAErD,IAAI,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,EAAE,GAAf,CAAV,EAA+B;UAC7B,GAAG,IAAI,CAAP,CAD6B,CAGrC;;UACQ,IAAI,KAAK,IAAI,SAAS,CAAC,KAAnB,IACF,GAAG,GAAG,EADJ,KACW,CAAC,GAAG,gBAAJ,IAAwB,CAAC,KAAK,SAAS,CAAC,CAAD,CADlD,CAAJ,EAC4D;YACxD,MAAM,KAAK,CACT,aAAa,GAAI,CAAC,CAAC,CAAF,GAAM,CADd,CAAX;UAEH,CAR4B,CAUrC;;;UACQ,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAJ,GAAQ,CAAb,IAAkB,OAAtB,EAA+B;YAEvC;YACU,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,IAAZ,CAH6B,CAKvC;UACS,CAND,MAMO,IAAI,CAAC,GAAG,OAAR,EAAiB;YAEhC;YACU,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAF,GAAM,CAAP,CAAN;UACD,CAJM,MAIA;YACL,CAAC,CAAC,CAAF,GAAM,CAAN;YACA,CAAC,CAAC,CAAF,GAAM,EAAN,CAFK,CAIf;YAEA;YACA;;YACU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,QAAd;YACA,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,IAAI,QAAL,CATN,CASoB;;YAEzB,IAAI,CAAC,GAAG,GAAR,EAAa;cACX,IAAI,CAAJ,EAAO,CAAC,CAAC,CAAF,CAAI,IAAJ,CAAS,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;;cAEP,KAAK,GAAG,IAAI,QAAZ,EAAsB,CAAC,GAAG,GAA1B,GAAgC;gBAC9B,CAAC,CAAC,CAAF,CAAI,IAAJ,CAAS,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAC,IAAI,QAAlB,CAAV;cACD;;cAED,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAP,EAAqB,MAApC;YACD,CARD,MAQO;cACL,CAAC,IAAI,GAAL;YACD;;YAED,OAAO,CAAC,EAAR,EAAY,GAAG,IAAI,GAAnB,CAAuB;;YACvB,CAAC,CAAC,CAAF,CAAI,IAAJ,CAAS,CAAC,GAAV;UACD;QACF,CA/CD,MA+CO;UAEb;UACQ,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAF,GAAM,CAAP,CAAN;QACD;MACF,CA3S0B,CA8S/B;;;MAGI,SAAS,CAAC,KAAV,GAAkB,KAAlB;MAEA,SAAS,CAAC,QAAV,GAAqB,CAArB;MACA,SAAS,CAAC,UAAV,GAAuB,CAAvB;MACA,SAAS,CAAC,UAAV,GAAuB,CAAvB;MACA,SAAS,CAAC,WAAV,GAAwB,CAAxB;MACA,SAAS,CAAC,aAAV,GAA0B,CAA1B;MACA,SAAS,CAAC,eAAV,GAA4B,CAA5B;MACA,SAAS,CAAC,eAAV,GAA4B,CAA5B;MACA,SAAS,CAAC,eAAV,GAA4B,CAA5B;MACA,SAAS,CAAC,gBAAV,GAA6B,CAA7B;MACA,SAAS,CAAC,MAAV,GAAmB,CAAnB;MAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACI,SAAS,CAAC,MAAV,GAAmB,SAAS,CAAC,GAAV,GAAgB,UAAU,GAAV,EAAe;QAChD,IAAI,CAAJ,EAAO,CAAP;;QAEA,IAAI,GAAG,IAAI,IAAX,EAAiB;UAEf,IAAI,OAAO,GAAP,IAAc,QAAlB,EAA4B;YAEpC;YACA;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,gBAAvB,CAAJ,EAA8C;cAC5C,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP;cACA,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,CAAZ,CAAR;cACA,cAAc,GAAG,CAAjB;YACD,CARyB,CAUpC;YACA;;;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,eAAvB,CAAJ,EAA6C;cAC3C,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP;cACA,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAR;cACA,aAAa,GAAG,CAAhB;YACD,CAhByB,CAkBpC;YACA;YACA;YACA;;;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,gBAAvB,CAAJ,EAA8C;cAC5C,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP;;cACA,IAAI,CAAC,IAAI,CAAC,CAAC,GAAX,EAAgB;gBACd,QAAQ,CAAC,CAAC,CAAC,CAAD,CAAF,EAAO,CAAC,GAAR,EAAa,CAAb,EAAgB,CAAhB,CAAR;gBACA,QAAQ,CAAC,CAAC,CAAC,CAAD,CAAF,EAAO,CAAP,EAAU,GAAV,EAAe,CAAf,CAAR;gBACA,UAAU,GAAG,CAAC,CAAC,CAAD,CAAd;gBACA,UAAU,GAAG,CAAC,CAAC,CAAD,CAAd;cACD,CALD,MAKO;gBACL,QAAQ,CAAC,CAAD,EAAI,CAAC,GAAL,EAAU,GAAV,EAAe,CAAf,CAAR;gBACA,UAAU,GAAG,EAAE,UAAU,GAAG,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAA5B,CAAb;cACD;YACF,CAjCyB,CAmCpC;YACA;YACA;;;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,OAAvB,CAAJ,EAAqC;cACnC,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP;;cACA,IAAI,CAAC,IAAI,CAAC,CAAC,GAAX,EAAgB;gBACd,QAAQ,CAAC,CAAC,CAAC,CAAD,CAAF,EAAO,CAAC,GAAR,EAAa,CAAC,CAAd,EAAiB,CAAjB,CAAR;gBACA,QAAQ,CAAC,CAAC,CAAC,CAAD,CAAF,EAAO,CAAP,EAAU,GAAV,EAAe,CAAf,CAAR;gBACA,OAAO,GAAG,CAAC,CAAC,CAAD,CAAX;gBACA,OAAO,GAAG,CAAC,CAAC,CAAD,CAAX;cACD,CALD,MAKO;gBACL,QAAQ,CAAC,CAAD,EAAI,CAAC,GAAL,EAAU,GAAV,EAAe,CAAf,CAAR;;gBACA,IAAI,CAAJ,EAAO;kBACL,OAAO,GAAG,EAAE,OAAO,GAAG,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAzB,CAAV;gBACD,CAFD,MAEO;kBACL,MAAM,KAAK,CACT,cAAc,GAAG,CAAjB,GAAqB,mBAArB,GAA2C,CADlC,CAAX;gBAED;cACF;YACF,CAtDyB,CAwDpC;YACA;YACA;;;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,QAAvB,CAAJ,EAAsC;cACpC,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP;;cACA,IAAI,CAAC,KAAK,CAAC,CAAC,CAAZ,EAAe;gBACb,IAAI,CAAJ,EAAO;kBACL,IAAI,OAAO,MAAP,IAAiB,WAAjB,IAAgC,MAAhC,KACF,MAAM,CAAC,eAAP,IAA0B,MAAM,CAAC,WAD/B,CAAJ,EACiD;oBAC/C,MAAM,GAAG,CAAT;kBACD,CAHD,MAGO;oBACL,MAAM,GAAG,CAAC,CAAV;oBACA,MAAM,KAAK,CACT,cAAc,GAAG,oBADR,CAAX;kBAED;gBACF,CATD,MASO;kBACL,MAAM,GAAG,CAAT;gBACD;cACF,CAbD,MAaO;gBACL,MAAM,KAAK,CACT,cAAc,GAAG,CAAjB,GAAqB,sBAArB,GAA8C,CADrC,CAAX;cAED;YACF,CA9EyB,CAgFpC;YACA;;;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,aAAvB,CAAJ,EAA2C;cACzC,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP;cACA,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAR;cACA,WAAW,GAAG,CAAd;YACD,CAtFyB,CAwFpC;YACA;;;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,eAAvB,CAAJ,EAA6C;cAC3C,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP;cACA,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,CAAZ,CAAR;cACA,aAAa,GAAG,CAAhB;YACD,CA9FyB,CAgGpC;YACA;;;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,QAAvB,CAAJ,EAAsC;cACpC,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP;cACA,IAAI,OAAO,CAAP,IAAY,QAAhB,EAA0B,MAAM,GAAG,CAAT,CAA1B,KACK,MAAM,KAAK,CACd,cAAc,GAAG,CAAjB,GAAqB,kBAArB,GAA0C,CAD5B,CAAX;YAEN,CAvGyB,CAyGpC;YACA;;;YACU,IAAI,GAAG,CAAC,cAAJ,CAAmB,CAAC,GAAG,UAAvB,CAAJ,EAAwC;cACtC,CAAC,GAAG,GAAG,CAAC,CAAD,CAAP,CADsC,CAGlD;cACA;;cACY,IAAI,OAAO,CAAP,IAAY,QAAZ,IAAwB,CAAC,wBAAwB,IAAxB,CAA6B,CAA7B,CAA7B,EAA8D;gBAC5D,QAAQ,GAAG,CAAX;cACD,CAFD,MAEO;gBACL,MAAM,KAAK,CACT,cAAc,GAAG,CAAjB,GAAqB,YAArB,GAAoC,CAD3B,CAAX;cAED;YACF;UAEF,CAxHD,MAwHO;YAEf;YACU,MAAM,KAAK,CACT,cAAc,GAAG,mBAAjB,GAAuC,GAD9B,CAAX;UAED;QACF;;QAED,OAAO;UACL,cAAc,EAAE,cADX;UAEL,aAAa,EAAE,aAFV;UAGL,cAAc,EAAE,CAAC,UAAD,EAAa,UAAb,CAHX;UAIL,KAAK,EAAE,CAAC,OAAD,EAAU,OAAV,CAJF;UAKL,MAAM,EAAE,MALH;UAML,WAAW,EAAE,WANR;UAOL,aAAa,EAAE,aAPV;UAQL,MAAM,EAAE,MARH;UASL,QAAQ,EAAE;QATL,CAAP;MAWD,CAhJD;MAmJJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,SAAS,CAAC,WAAV,GAAwB,UAAU,CAAV,EAAa;QACnC,IAAI,CAAC,CAAD,IAAM,CAAC,CAAC,YAAF,KAAmB,IAA7B,EAAmC,OAAO,KAAP;QACnC,IAAI,CAAC,SAAS,CAAC,KAAf,EAAsB,OAAO,IAAP;QAEtB,IAAI,CAAJ;QAAA,IAAO,CAAP;QAAA,IACE,CAAC,GAAG,CAAC,CAAC,CADR;QAAA,IAEE,CAAC,GAAG,CAAC,CAAC,CAFR;QAAA,IAGE,CAAC,GAAG,CAAC,CAAC,CAHR;;QAKA,GAAG,EAAE,IAAI,GAAG,QAAH,CAAY,IAAZ,CAAiB,CAAjB,KAAuB,gBAA3B,EAA6C;UAEhD,IAAI,CAAC,CAAC,KAAK,CAAN,IAAW,CAAC,KAAK,CAAC,CAAnB,KAAyB,CAAC,IAAI,CAAC,GAA/B,IAAsC,CAAC,IAAI,GAA3C,IAAkD,CAAC,KAAK,SAAS,CAAC,CAAD,CAArE,EAA0E;YAElF;YACU,IAAI,CAAC,CAAC,CAAD,CAAD,KAAS,CAAb,EAAgB;cACd,IAAI,CAAC,KAAK,CAAN,IAAW,CAAC,CAAC,MAAF,KAAa,CAA5B,EAA+B,OAAO,IAAP;cAC/B,MAAM,GAAN;YACD,CANuE,CAQlF;;;YACU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,QAAd;YACA,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,IAAI,QAAL,CAV6D,CAYlF;YACA;;YACU,IAAI,MAAM,CAAC,CAAC,CAAC,CAAD,CAAF,CAAN,CAAa,MAAb,IAAuB,CAA3B,EAA8B;cAE5B,KAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,CAAC,CAAC,MAAlB,EAA0B,CAAC,EAA3B,EAA+B;gBAC7B,CAAC,GAAG,CAAC,CAAC,CAAD,CAAL;gBACA,IAAI,CAAC,GAAG,CAAJ,IAAS,CAAC,IAAI,IAAd,IAAsB,CAAC,KAAK,SAAS,CAAC,CAAD,CAAzC,EAA8C,MAAM,GAAN;cAC/C,CAL2B,CAOxC;;;cACY,IAAI,CAAC,KAAK,CAAV,EAAa,OAAO,IAAP;YACd;UACF,CA1B+C,CA4BxD;;QACO,CA7BI,MA6BE,IAAI,CAAC,KAAK,IAAN,IAAc,CAAC,KAAK,IAApB,KAA6B,CAAC,KAAK,IAAN,IAAc,CAAC,KAAK,CAApB,IAAyB,CAAC,KAAK,CAAC,CAA7D,CAAJ,EAAqE;UAC1E,OAAO,IAAP;QACD;;QAED,MAAM,KAAK,CACR,cAAc,GAAG,qBAAjB,GAAyC,CADjC,CAAX;MAED,CA5CD;MA+CJ;AACA;AACA;AACA;AACA;;;MACI,SAAS,CAAC,OAAV,GAAoB,SAAS,CAAC,GAAV,GAAgB,YAAY;QAC9C,OAAO,QAAQ,CAAC,SAAD,EAAY,CAAC,CAAC,EAAd,CAAf;MACD,CAFD;MAKJ;AACA;AACA;AACA;AACA;;;MACI,SAAS,CAAC,OAAV,GAAoB,SAAS,CAAC,GAAV,GAAgB,YAAY;QAC9C,OAAO,QAAQ,CAAC,SAAD,EAAY,CAAC,CAAC,EAAd,CAAf;MACD,CAFD;MAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,SAAS,CAAC,MAAV,GAAoB,YAAY;QAC9B,IAAI,OAAO,GAAG,gBAAd,CAD8B,CAGpC;QACA;QACA;QACA;;QACM,IAAI,cAAc,GAAI,IAAI,CAAC,MAAL,KAAgB,OAAjB,GAA4B,QAA5B,GAClB,YAAY;UAAE,OAAO,SAAS,CAAC,IAAI,CAAC,MAAL,KAAgB,OAAjB,CAAhB;QAA4C,CADxC,GAElB,YAAY;UAAE,OAAQ,CAAC,IAAI,CAAC,MAAL,KAAgB,UAAhB,GAA6B,CAA9B,IAAmC,QAApC,IACpB,IAAI,CAAC,MAAL,KAAgB,QAAhB,GAA2B,CADP,CAAP;QACmB,CAHpC;QAKA,OAAO,UAAU,EAAV,EAAc;UACnB,IAAI,CAAJ;UAAA,IAAO,CAAP;UAAA,IAAU,CAAV;UAAA,IAAa,CAAb;UAAA,IAAgB,CAAhB;UAAA,IACE,CAAC,GAAG,CADN;UAAA,IAEE,CAAC,GAAG,EAFN;UAAA,IAGE,IAAI,GAAG,IAAI,SAAJ,CAAc,GAAd,CAHT;UAKA,IAAI,EAAE,IAAI,IAAV,EAAgB,EAAE,GAAG,cAAL,CAAhB,KACK,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,GAAR,CAAR;UAEL,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,QAAN,CAAZ;;UAEA,IAAI,MAAJ,EAAY;YAEpB;YACU,IAAI,MAAM,CAAC,eAAX,EAA4B;cAE1B,CAAC,GAAG,MAAM,CAAC,eAAP,CAAuB,IAAI,WAAJ,CAAgB,CAAC,IAAI,CAArB,CAAvB,CAAJ;;cAEA,OAAO,CAAC,GAAG,CAAX,GAAe;gBAE3B;gBACA;gBACA;gBACA;gBACA;gBACA;gBACc,CAAC,GAAG,CAAC,CAAC,CAAD,CAAD,GAAO,OAAP,IAAkB,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,KAAa,EAA/B,CAAJ,CARa,CAU3B;gBACA;gBACA;gBACA;;gBACc,IAAI,CAAC,IAAI,IAAT,EAAe;kBACb,CAAC,GAAG,MAAM,CAAC,eAAP,CAAuB,IAAI,WAAJ,CAAgB,CAAhB,CAAvB,CAAJ;kBACA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAR;kBACA,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,GAAW,CAAC,CAAC,CAAD,CAAZ;gBACD,CAJD,MAIO;kBAErB;kBACA;kBACgB,CAAC,CAAC,IAAF,CAAO,CAAC,GAAG,IAAX;kBACA,CAAC,IAAI,CAAL;gBACD;cACF;;cACD,CAAC,GAAG,CAAC,GAAG,CAAR,CA9B0B,CAgCtC;YACW,CAjCD,MAiCO,IAAI,MAAM,CAAC,WAAX,EAAwB;cAEzC;cACY,CAAC,GAAG,MAAM,CAAC,WAAP,CAAmB,CAAC,IAAI,CAAxB,CAAJ;;cAEA,OAAO,CAAC,GAAG,CAAX,GAAe;gBAE3B;gBACA;gBACA;gBACA;gBACc,CAAC,GAAI,CAAC,CAAC,CAAC,CAAD,CAAD,GAAO,EAAR,IAAc,eAAf,GAAmC,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,GAAW,aAA9C,GACA,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,GAAW,WADX,GAC2B,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,GAAW,SADtC,IAEA,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,IAAY,EAFZ,KAEmB,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,IAAY,CAF/B,IAEoC,CAAC,CAAC,CAAC,GAAG,CAAL,CAFzC;;gBAIA,IAAI,CAAC,IAAI,IAAT,EAAe;kBACb,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,IAAtB,CAA2B,CAA3B,EAA8B,CAA9B;gBACD,CAFD,MAEO;kBAErB;kBACgB,CAAC,CAAC,IAAF,CAAO,CAAC,GAAG,IAAX;kBACA,CAAC,IAAI,CAAL;gBACD;cACF;;cACD,CAAC,GAAG,CAAC,GAAG,CAAR;YACD,CAzBM,MAyBA;cACL,MAAM,GAAG,KAAT;cACA,MAAM,KAAK,CACT,cAAc,GAAG,oBADR,CAAX;YAED;UACF,CA7EkB,CA+E3B;;;UACQ,IAAI,CAAC,MAAL,EAAa;YAEX,OAAO,CAAC,GAAG,CAAX,GAAe;cACb,CAAC,GAAG,cAAc,EAAlB;cACA,IAAI,CAAC,GAAG,IAAR,EAAc,CAAC,CAAC,CAAC,EAAF,CAAD,GAAS,CAAC,GAAG,IAAb;YACf;UACF;;UAED,CAAC,GAAG,CAAC,CAAC,EAAE,CAAH,CAAL;UACA,EAAE,IAAI,QAAN,CAzFmB,CA2F3B;;UACQ,IAAI,CAAC,IAAI,EAAT,EAAa;YACX,CAAC,GAAG,QAAQ,CAAC,QAAQ,GAAG,EAAZ,CAAZ;YACA,CAAC,CAAC,CAAD,CAAD,GAAO,SAAS,CAAC,CAAC,GAAG,CAAL,CAAT,GAAmB,CAA1B;UACD,CA/FkB,CAiG3B;;;UACQ,OAAO,CAAC,CAAC,CAAD,CAAD,KAAS,CAAhB,EAAmB,CAAC,CAAC,GAAF,IAAS,CAAC,EAA7B,CAAgC,CAlGb,CAoG3B;;;UACQ,IAAI,CAAC,GAAG,CAAR,EAAW;YACT,CAAC,GAAG,CAAC,CAAC,GAAG,CAAL,CAAJ;UACD,CAFD,MAEO;YAEf;YACU,KAAK,CAAC,GAAG,CAAC,CAAV,EAAc,CAAC,CAAC,CAAD,CAAD,KAAS,CAAvB,EAA0B,CAAC,CAAC,MAAF,CAAS,CAAT,EAAY,CAAZ,GAAgB,CAAC,IAAI,QAA/C,CAAwD,CAHnD,CAKf;;;YACU,KAAK,CAAC,GAAG,CAAJ,EAAO,CAAC,GAAG,CAAC,CAAC,CAAD,CAAjB,EAAsB,CAAC,IAAI,EAA3B,EAA+B,CAAC,IAAI,EAAL,EAAS,CAAC,EAAzC,CAA4C,CANvC,CAQf;;;YACU,IAAI,CAAC,GAAG,QAAR,EAAkB,CAAC,IAAI,QAAQ,GAAG,CAAhB;UACnB;;UAED,IAAI,CAAC,CAAL,GAAS,CAAT;UACA,IAAI,CAAC,CAAL,GAAS,CAAT;UACA,OAAO,IAAP;QACD,CAtHD;MAuHD,CAnIkB,EAAnB;MAsIJ;AACA;AACA;AACA;AACA;;;MACI,SAAS,CAAC,GAAV,GAAgB,YAAY;QAC1B,IAAI,CAAC,GAAG,CAAR;QAAA,IACE,IAAI,GAAG,SADT;QAAA,IAEE,GAAG,GAAG,IAAI,SAAJ,CAAc,IAAI,CAAC,CAAD,CAAlB,CAFR;;QAGA,OAAO,CAAC,GAAG,IAAI,CAAC,MAAhB,GAAyB,GAAG,GAAG,GAAG,CAAC,IAAJ,CAAS,IAAI,CAAC,CAAC,EAAF,CAAb,CAAN;;QACzB,OAAO,GAAP;MACD,CAND,CArtB2B,CA8tB/B;MAGA;;;MACI,WAAW,GAAI,YAAY;QACzB,IAAI,OAAO,GAAG,YAAd;QAEN;AACA;AACA;AACA;AACA;;QACM,SAAS,SAAT,CAAmB,GAAnB,EAAwB,MAAxB,EAAgC,OAAhC,EAAyC,QAAzC,EAAmD;UACjD,IAAI,CAAJ;UAAA,IACE,GAAG,GAAG,CAAC,CAAD,CADR;UAAA,IAEE,IAFF;UAAA,IAGE,CAAC,GAAG,CAHN;UAAA,IAIE,GAAG,GAAG,GAAG,CAAC,MAJZ;;UAMA,OAAO,CAAC,GAAG,GAAX,GAAiB;YACf,KAAK,IAAI,GAAG,GAAG,CAAC,MAAhB,EAAwB,IAAI,EAA5B,EAAgC,GAAG,CAAC,IAAD,CAAH,IAAa,MAA7C,CAAoD;;YAEpD,GAAG,CAAC,CAAD,CAAH,IAAU,QAAQ,CAAC,OAAT,CAAiB,GAAG,CAAC,MAAJ,CAAW,CAAC,EAAZ,CAAjB,CAAV;;YAEA,KAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAG,CAAC,MAApB,EAA4B,CAAC,EAA7B,EAAiC;cAE/B,IAAI,GAAG,CAAC,CAAD,CAAH,GAAS,OAAO,GAAG,CAAvB,EAA0B;gBACxB,IAAI,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,IAAc,IAAlB,EAAwB,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,CAAb;gBACxB,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,IAAc,GAAG,CAAC,CAAD,CAAH,GAAS,OAAT,GAAmB,CAAjC;gBACA,GAAG,CAAC,CAAD,CAAH,IAAU,OAAV;cACD;YACF;UACF;;UAED,OAAO,GAAG,CAAC,OAAJ,EAAP;QACD,CA/BwB,CAiC/B;QACA;QACA;;;QACM,OAAO,UAAU,GAAV,EAAe,MAAf,EAAuB,OAAvB,EAAgC,IAAhC,EAAsC,gBAAtC,EAAwD;UAC7D,IAAI,QAAJ;UAAA,IAAc,CAAd;UAAA,IAAiB,CAAjB;UAAA,IAAoB,CAApB;UAAA,IAAuB,CAAvB;UAAA,IAA0B,CAA1B;UAAA,IAA6B,EAA7B;UAAA,IAAiC,CAAjC;UAAA,IACE,CAAC,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,CADN;UAAA,IAEE,EAAE,GAAG,cAFP;UAAA,IAGE,EAAE,GAAG,aAHP,CAD6D,CAMrE;;UACQ,IAAI,CAAC,IAAI,CAAT,EAAY;YACV,CAAC,GAAG,aAAJ,CADU,CAGpB;;YACU,aAAa,GAAG,CAAhB;YACA,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAN;YACA,CAAC,GAAG,IAAI,SAAJ,CAAc,MAAd,CAAJ;YACA,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,GAAG,CAAC,MAAJ,GAAa,CAAnB,CAAJ;YACA,aAAa,GAAG,CAAhB,CARU,CAUpB;YACA;;YAEU,CAAC,CAAC,CAAF,GAAM,SAAS,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,CAAH,CAAd,EAAqB,CAAC,CAAC,CAAvB,EAA0B,GAA1B,CAAb,EACd,EADc,EACV,OADU,EACD,OADC,CAAf;YAEA,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,CAAI,MAAV;UACD,CAvB4D,CAyBrE;;;UAEQ,EAAE,GAAG,SAAS,CAAC,GAAD,EAAM,MAAN,EAAc,OAAd,EAAuB,gBAAgB,IACjD,QAAQ,GAAG,QAAX,EAAqB,OAD4B,KAEjD,QAAQ,GAAG,OAAX,EAAoB,QAF6B,CAAvC,CAAd,CA3B6D,CA+BrE;;UACQ,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,MAAX,CAhC6D,CAkCrE;;UACQ,OAAO,EAAE,CAAC,EAAE,CAAH,CAAF,IAAW,CAAlB,EAAqB,EAAE,CAAC,GAAH,EAArB,CAA8B,CAnC+B,CAqCrE;;;UACQ,IAAI,CAAC,EAAE,CAAC,CAAD,CAAP,EAAY,OAAO,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAP,CAtCiD,CAwCrE;;UACQ,IAAI,CAAC,GAAG,CAAR,EAAW;YACT,EAAE,CAAF;UACD,CAFD,MAEO;YACL,CAAC,CAAC,CAAF,GAAM,EAAN;YACA,CAAC,CAAC,CAAF,GAAM,CAAN,CAFK,CAIf;;YACU,CAAC,CAAC,CAAF,GAAM,IAAN;YACA,CAAC,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,OAAf,CAAP;YACA,EAAE,GAAG,CAAC,CAAC,CAAP;YACA,CAAC,GAAG,CAAC,CAAC,CAAN;YACA,CAAC,GAAG,CAAC,CAAC,CAAN;UACD,CArD4D,CAuDrE;UAEA;;;UACQ,CAAC,GAAG,CAAC,GAAG,EAAJ,GAAS,CAAb,CA1D6D,CA4DrE;;UACQ,CAAC,GAAG,EAAE,CAAC,CAAD,CAAN,CA7D6D,CA+DrE;;UAEQ,CAAC,GAAG,OAAO,GAAG,CAAd;UACA,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAT,IAAc,EAAE,CAAC,CAAC,GAAG,CAAL,CAAF,IAAa,IAA/B;UAEA,CAAC,GAAG,EAAE,GAAG,CAAL,GAAS,CAAC,CAAC,IAAI,IAAL,IAAa,CAAd,MAAqB,EAAE,IAAI,CAAN,IAAW,EAAE,KAAK,CAAC,CAAC,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAnB,CAAlC,CAAT,GACI,CAAC,GAAG,CAAJ,IAAS,CAAC,IAAI,CAAL,KAAU,EAAE,IAAI,CAAN,IAAW,CAAX,IAAgB,EAAE,IAAI,CAAN,IAAW,EAAE,CAAC,CAAC,GAAG,CAAL,CAAF,GAAY,CAAvC,IACpB,EAAE,KAAK,CAAC,CAAC,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAnB,CADQ,CADjB,CApE6D,CAwErE;UACA;UACA;;UACQ,IAAI,CAAC,GAAG,CAAJ,IAAS,CAAC,EAAE,CAAC,CAAD,CAAhB,EAAqB;YAE7B;YACU,GAAG,GAAG,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAD,EAAqB,CAAC,EAAtB,EAA0B,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAA1B,CAAf,GAA+D,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAtE;UACD,CAJD,MAIO;YAEf;YACU,EAAE,CAAC,MAAH,GAAY,CAAZ,CAHK,CAKf;;YACU,IAAI,CAAJ,EAAO;cAEjB;cACY,KAAK,EAAE,OAAP,EAAgB,EAAE,EAAE,CAAC,EAAE,CAAH,CAAJ,GAAY,OAA5B,GAAsC;gBACpC,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR;;gBAEA,IAAI,CAAC,CAAL,EAAQ;kBACN,EAAE,CAAF;kBACA,EAAE,GAAG,CAAC,CAAD,EAAI,MAAJ,CAAW,EAAX,CAAL;gBACD;cACF;YACF,CAjBI,CAmBf;;;YACU,KAAK,CAAC,GAAG,EAAE,CAAC,MAAZ,EAAoB,CAAC,EAAE,CAAC,EAAE,CAAH,CAAvB,EAA8B,CApBzB,CAsBf;;;YACU,KAAK,CAAC,GAAG,CAAJ,EAAO,GAAG,GAAG,EAAlB,EAAsB,CAAC,IAAI,CAA3B,EAA8B,GAAG,IAAI,QAAQ,CAAC,MAAT,CAAgB,EAAE,CAAC,CAAC,EAAF,CAAlB,CAArC,CAA8D,CAvBzD,CAyBf;;;YACU,GAAG,GAAG,YAAY,CAAC,GAAD,EAAM,CAAN,EAAS,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAT,CAAlB;UACD,CA1G4D,CA4GrE;;;UACQ,OAAO,GAAP;QACD,CA9GD;MA+GD,CAnJa,EAAd,CAluB2B,CAw3B/B;;;MACI,GAAG,GAAI,YAAY;QAEvB;QACM,SAAS,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,IAAxB,EAA8B;UAC5B,IAAI,CAAJ;UAAA,IAAO,IAAP;UAAA,IAAa,GAAb;UAAA,IAAkB,GAAlB;UAAA,IACE,KAAK,GAAG,CADV;UAAA,IAEE,CAAC,GAAG,CAAC,CAAC,MAFR;UAAA,IAGE,GAAG,GAAG,CAAC,GAAG,SAHZ;UAAA,IAIE,GAAG,GAAG,CAAC,GAAG,SAAJ,GAAgB,CAJxB;;UAMA,KAAK,CAAC,GAAG,CAAC,CAAC,KAAF,EAAT,EAAoB,CAAC,EAArB,GAA0B;YACxB,GAAG,GAAG,CAAC,CAAC,CAAD,CAAD,GAAO,SAAb;YACA,GAAG,GAAG,CAAC,CAAC,CAAD,CAAD,GAAO,SAAP,GAAmB,CAAzB;YACA,CAAC,GAAG,GAAG,GAAG,GAAN,GAAY,GAAG,GAAG,GAAtB;YACA,IAAI,GAAG,GAAG,GAAG,GAAN,GAAc,CAAC,GAAG,SAAL,GAAkB,SAA/B,GAA4C,KAAnD;YACA,KAAK,GAAG,CAAC,IAAI,GAAG,IAAP,GAAc,CAAf,KAAqB,CAAC,GAAG,SAAJ,GAAgB,CAArC,IAA0C,GAAG,GAAG,GAAxD;YACA,CAAC,CAAC,CAAD,CAAD,GAAO,IAAI,GAAG,IAAd;UACD;;UAED,IAAI,KAAJ,EAAW,CAAC,GAAG,CAAC,KAAD,EAAQ,MAAR,CAAe,CAAf,CAAJ;UAEX,OAAO,CAAP;QACD;;QAED,SAAS,OAAT,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B;UAC7B,IAAI,CAAJ,EAAO,GAAP;;UAEA,IAAI,EAAE,IAAI,EAAV,EAAc;YACZ,GAAG,GAAG,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAC,CAArB;UACD,CAFD,MAEO;YAEL,KAAK,CAAC,GAAG,GAAG,GAAG,CAAf,EAAkB,CAAC,GAAG,EAAtB,EAA0B,CAAC,EAA3B,EAA+B;cAE7B,IAAI,CAAC,CAAC,CAAD,CAAD,IAAQ,CAAC,CAAC,CAAD,CAAb,EAAkB;gBAChB,GAAG,GAAG,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAR,GAAc,CAAd,GAAkB,CAAC,CAAzB;gBACA;cACD;YACF;UACF;;UAED,OAAO,GAAP;QACD;;QAED,SAAS,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,EAAxB,EAA4B,IAA5B,EAAkC;UAChC,IAAI,CAAC,GAAG,CAAR,CADgC,CAGxC;;UACQ,OAAO,EAAE,EAAT,GAAc;YACZ,CAAC,CAAC,EAAD,CAAD,IAAS,CAAT;YACA,CAAC,GAAG,CAAC,CAAC,EAAD,CAAD,GAAQ,CAAC,CAAC,EAAD,CAAT,GAAgB,CAAhB,GAAoB,CAAxB;YACA,CAAC,CAAC,EAAD,CAAD,GAAQ,CAAC,GAAG,IAAJ,GAAW,CAAC,CAAC,EAAD,CAAZ,GAAmB,CAAC,CAAC,EAAD,CAA5B;UACD,CAR+B,CAUxC;;;UACQ,OAAO,CAAC,CAAC,CAAC,CAAD,CAAF,IAAS,CAAC,CAAC,MAAF,GAAW,CAA3B,EAA8B,CAAC,CAAC,MAAF,CAAS,CAAT,EAAY,CAAZ,CAA9B,CAA6C;QAC9C,CAvDgB,CAyDvB;;;QACM,OAAO,UAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,IAAxB,EAA8B;UACnC,IAAI,GAAJ;UAAA,IAAS,CAAT;UAAA,IAAY,CAAZ;UAAA,IAAe,IAAf;UAAA,IAAqB,CAArB;UAAA,IAAwB,IAAxB;UAAA,IAA8B,KAA9B;UAAA,IAAqC,CAArC;UAAA,IAAwC,EAAxC;UAAA,IAA4C,GAA5C;UAAA,IAAiD,IAAjD;UAAA,IAAuD,IAAvD;UAAA,IAA6D,EAA7D;UAAA,IAAiE,EAAjE;UAAA,IAAqE,GAArE;UAAA,IACE,EADF;UAAA,IACM,EADN;UAAA,IAEE,CAAC,GAAG,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAT,GAAa,CAAb,GAAiB,CAAC,CAFxB;UAAA,IAGE,EAAE,GAAG,CAAC,CAAC,CAHT;UAAA,IAIE,EAAE,GAAG,CAAC,CAAC,CAJT,CADmC,CAO3C;;UACQ,IAAI,CAAC,EAAD,IAAO,CAAC,EAAE,CAAC,CAAD,CAAV,IAAiB,CAAC,EAAlB,IAAwB,CAAC,EAAE,CAAC,CAAD,CAA/B,EAAoC;YAElC,OAAO,IAAI,SAAJ,EAEjB;YACW,CAAC,CAAC,CAAC,CAAH,IAAQ,CAAC,CAAC,CAAC,CAAX,KAAiB,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAD,CAAF,IAAS,EAAE,CAAC,CAAD,CAApB,GAA0B,CAAC,EAA9C,IAAoD,GAApD,GAEX;YACY,EAAE,IAAI,EAAE,CAAC,CAAD,CAAF,IAAS,CAAf,IAAoB,CAAC,EAArB,GAA0B,CAAC,GAAG,CAA9B,GAAkC,CAAC,GAAG,CANjC,CAAP;UAQD;;UAED,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,CAAJ;UACA,EAAE,GAAG,CAAC,CAAC,CAAF,GAAM,EAAX;UACA,CAAC,GAAG,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAZ;UACA,CAAC,GAAG,EAAE,GAAG,CAAL,GAAS,CAAb;;UAEA,IAAI,CAAC,IAAL,EAAW;YACT,IAAI,GAAG,IAAP;YACA,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAF,GAAM,QAAP,CAAR,GAA2B,QAAQ,CAAC,CAAC,CAAC,CAAF,GAAM,QAAP,CAAvC;YACA,CAAC,GAAG,CAAC,GAAG,QAAJ,GAAe,CAAnB;UACD,CA7BkC,CA+B3C;UACA;;;UACQ,KAAK,CAAC,GAAG,CAAT,EAAY,EAAE,CAAC,CAAD,CAAF,KAAU,EAAE,CAAC,CAAD,CAAF,IAAS,CAAnB,CAAZ,EAAmC,CAAC,EAApC,CAAuC;;UAEvC,IAAI,EAAE,CAAC,CAAD,CAAF,IAAS,EAAE,CAAC,CAAD,CAAF,IAAS,CAAlB,CAAJ,EAA0B,CAAC;;UAE3B,IAAI,CAAC,GAAG,CAAR,EAAW;YACT,EAAE,CAAC,IAAH,CAAQ,CAAR;YACA,IAAI,GAAG,IAAP;UACD,CAHD,MAGO;YACL,EAAE,GAAG,EAAE,CAAC,MAAR;YACA,EAAE,GAAG,EAAE,CAAC,MAAR;YACA,CAAC,GAAG,CAAJ;YACA,CAAC,IAAI,CAAL,CAJK,CAMf;;YAEU,CAAC,GAAG,SAAS,CAAC,IAAI,IAAI,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAZ,CAAL,CAAb,CARK,CAUf;YACA;;YACU,IAAI,CAAC,GAAG,CAAR,EAAW;cACT,EAAE,GAAG,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,IAAR,CAAb;cACA,EAAE,GAAG,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,IAAR,CAAb;cACA,EAAE,GAAG,EAAE,CAAC,MAAR;cACA,EAAE,GAAG,EAAE,CAAC,MAAR;YACD;;YAED,EAAE,GAAG,EAAL;YACA,GAAG,GAAG,EAAE,CAAC,KAAH,CAAS,CAAT,EAAY,EAAZ,CAAN;YACA,IAAI,GAAG,GAAG,CAAC,MAAX,CArBK,CAuBf;;YACU,OAAO,IAAI,GAAG,EAAd,EAAkB,GAAG,CAAC,IAAI,EAAL,CAAH,GAAc,CAAhC,CAAkC;;YAClC,EAAE,GAAG,EAAE,CAAC,KAAH,EAAL;YACA,EAAE,GAAG,CAAC,CAAD,EAAI,MAAJ,CAAW,EAAX,CAAL;YACA,GAAG,GAAG,EAAE,CAAC,CAAD,CAAR;YACA,IAAI,EAAE,CAAC,CAAD,CAAF,IAAS,IAAI,GAAG,CAApB,EAAuB,GAAG,GA5BrB,CA6Bf;YACA;;YAEU,GAAG;cACD,CAAC,GAAG,CAAJ,CADC,CAGb;;cACY,GAAG,GAAG,OAAO,CAAC,EAAD,EAAK,GAAL,EAAU,EAAV,EAAc,IAAd,CAAb,CAJC,CAMb;;cACY,IAAI,GAAG,GAAG,CAAV,EAAa;gBAEzB;gBAEc,IAAI,GAAG,GAAG,CAAC,CAAD,CAAV;gBACA,IAAI,EAAE,IAAI,IAAV,EAAgB,IAAI,GAAG,IAAI,GAAG,IAAP,IAAe,GAAG,CAAC,CAAD,CAAH,IAAU,CAAzB,CAAP,CALL,CAOzB;;gBACc,CAAC,GAAG,SAAS,CAAC,IAAI,GAAG,GAAR,CAAb,CARW,CAUzB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;;gBAEc,IAAI,CAAC,GAAG,CAAR,EAAW;kBAEzB;kBACgB,IAAI,CAAC,IAAI,IAAT,EAAe,CAAC,GAAG,IAAI,GAAG,CAAX,CAHN,CAKzB;;kBACgB,IAAI,GAAG,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,IAAR,CAAf;kBACA,KAAK,GAAG,IAAI,CAAC,MAAb;kBACA,IAAI,GAAG,GAAG,CAAC,MAAX,CARS,CAUzB;kBACA;kBACA;kBACA;;kBACgB,OAAO,OAAO,CAAC,IAAD,EAAO,GAAP,EAAY,KAAZ,EAAmB,IAAnB,CAAP,IAAmC,CAA1C,EAA6C;oBAC3C,CAAC,GAD0C,CAG7D;;oBACkB,QAAQ,CAAC,IAAD,EAAO,EAAE,GAAG,KAAL,GAAa,EAAb,GAAkB,EAAzB,EAA6B,KAA7B,EAAoC,IAApC,CAAR;oBACA,KAAK,GAAG,IAAI,CAAC,MAAb;oBACA,GAAG,GAAG,CAAN;kBACD;gBACF,CAtBD,MAsBO;kBAErB;kBACA;kBACA;kBACA;kBACgB,IAAI,CAAC,IAAI,CAAT,EAAY;oBAE5B;oBACkB,GAAG,GAAG,CAAC,GAAG,CAAV;kBACD,CAVI,CAYrB;;;kBACgB,IAAI,GAAG,EAAE,CAAC,KAAH,EAAP;kBACA,KAAK,GAAG,IAAI,CAAC,MAAb;gBACD;;gBAED,IAAI,KAAK,GAAG,IAAZ,EAAkB,IAAI,GAAG,CAAC,CAAD,EAAI,MAAJ,CAAW,IAAX,CAAP,CA5DP,CA8DzB;;gBACc,QAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,CAAR;gBACA,IAAI,GAAG,GAAG,CAAC,MAAX,CAhEW,CAkEzB;;gBACc,IAAI,GAAG,IAAI,CAAC,CAAZ,EAAe;kBAE7B;kBACA;kBACA;kBACA;kBACgB,OAAO,OAAO,CAAC,EAAD,EAAK,GAAL,EAAU,EAAV,EAAc,IAAd,CAAP,GAA6B,CAApC,EAAuC;oBACrC,CAAC,GADoC,CAGvD;;oBACkB,QAAQ,CAAC,GAAD,EAAM,EAAE,GAAG,IAAL,GAAY,EAAZ,GAAiB,EAAvB,EAA2B,IAA3B,EAAiC,IAAjC,CAAR;oBACA,IAAI,GAAG,GAAG,CAAC,MAAX;kBACD;gBACF;cACF,CAjFD,MAiFO,IAAI,GAAG,KAAK,CAAZ,EAAe;gBACpB,CAAC;gBACD,GAAG,GAAG,CAAC,CAAD,CAAN;cACD,CA3FA,CA2FA;cAEb;;;cACY,EAAE,CAAC,CAAC,EAAF,CAAF,GAAU,CAAV,CA9FC,CAgGb;;cACY,IAAI,GAAG,CAAC,CAAD,CAAP,EAAY;gBACV,GAAG,CAAC,IAAI,EAAL,CAAH,GAAc,EAAE,CAAC,EAAD,CAAF,IAAU,CAAxB;cACD,CAFD,MAEO;gBACL,GAAG,GAAG,CAAC,EAAE,CAAC,EAAD,CAAH,CAAN;gBACA,IAAI,GAAG,CAAP;cACD;YACF,CAvGD,QAuGS,CAAC,EAAE,KAAK,EAAP,IAAa,GAAG,CAAC,CAAD,CAAH,IAAU,IAAxB,KAAiC,CAAC,EAvG3C;;YAyGA,IAAI,GAAG,GAAG,CAAC,CAAD,CAAH,IAAU,IAAjB,CAzIK,CA2If;;YACU,IAAI,CAAC,EAAE,CAAC,CAAD,CAAP,EAAY,EAAE,CAAC,MAAH,CAAU,CAAV,EAAa,CAAb;UACb;;UAED,IAAI,IAAI,IAAI,IAAZ,EAAkB;YAE1B;YACU,KAAK,CAAC,GAAG,CAAJ,EAAO,CAAC,GAAG,EAAE,CAAC,CAAD,CAAlB,EAAuB,CAAC,IAAI,EAA5B,EAAgC,CAAC,IAAI,EAAL,EAAS,CAAC,EAA1C,CAA6C;;YAE7C,KAAK,CAAC,CAAD,EAAI,EAAE,IAAI,CAAC,CAAC,CAAF,GAAM,CAAC,GAAG,CAAC,GAAG,QAAR,GAAmB,CAA7B,CAAF,GAAoC,CAAxC,EAA2C,EAA3C,EAA+C,IAA/C,CAAL,CALgB,CAO1B;UACS,CARD,MAQO;YACL,CAAC,CAAC,CAAF,GAAM,CAAN;YACA,CAAC,CAAC,CAAF,GAAM,CAAC,IAAP;UACD;;UAED,OAAO,CAAP;QACD,CArMD;MAsMD,CAhQK,EAAN;MAmQJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,SAAS,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B;QAC5B,IAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,GAAf,EAAoB,GAApB;QAEA,IAAI,EAAE,IAAI,IAAV,EAAgB,EAAE,GAAG,aAAL,CAAhB,KACK,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAR;QAEL,IAAI,CAAC,CAAC,CAAC,CAAP,EAAU,OAAO,CAAC,CAAC,QAAF,EAAP;QAEV,EAAE,GAAG,CAAC,CAAC,CAAF,CAAI,CAAJ,CAAL;QACA,EAAE,GAAG,CAAC,CAAC,CAAP;;QAEA,IAAI,CAAC,IAAI,IAAT,EAAe;UACb,GAAG,GAAG,aAAa,CAAC,CAAC,CAAC,CAAH,CAAnB;UACA,GAAG,GAAG,EAAE,IAAI,CAAN,IAAW,EAAE,IAAI,CAAN,KAAY,EAAE,IAAI,UAAN,IAAoB,EAAE,IAAI,UAAtC,CAAX,GACH,aAAa,CAAC,GAAD,EAAM,EAAN,CADV,GAEH,YAAY,CAAC,GAAD,EAAM,EAAN,EAAU,GAAV,CAFf;QAGD,CALD,MAKO;UACL,CAAC,GAAG,KAAK,CAAC,IAAI,SAAJ,CAAc,CAAd,CAAD,EAAmB,CAAnB,EAAsB,EAAtB,CAAT,CADK,CAGb;;UACQ,CAAC,GAAG,CAAC,CAAC,CAAN;UAEA,GAAG,GAAG,aAAa,CAAC,CAAC,CAAC,CAAH,CAAnB;UACA,GAAG,GAAG,GAAG,CAAC,MAAV,CAPK,CASb;UACA;UACA;UAEA;;UACQ,IAAI,EAAE,IAAI,CAAN,IAAW,EAAE,IAAI,CAAN,KAAY,CAAC,IAAI,CAAL,IAAU,CAAC,IAAI,UAA3B,CAAf,EAAuD;YAE/D;YACU,OAAO,GAAG,GAAG,CAAb,EAAgB,GAAG,IAAI,GAAP,EAAY,GAAG,EAA/B,CAAkC;;YAClC,GAAG,GAAG,aAAa,CAAC,GAAD,EAAM,CAAN,CAAnB,CAJqD,CAM/D;UACS,CAPD,MAOO;YACL,CAAC,IAAI,EAAL;YACA,GAAG,GAAG,YAAY,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,CAAlB,CAFK,CAIf;;YACU,IAAI,CAAC,GAAG,CAAJ,GAAQ,GAAZ,EAAiB;cACf,IAAI,EAAE,CAAF,GAAM,CAAV,EAAa,KAAK,GAAG,IAAI,GAAZ,EAAiB,CAAC,EAAlB,EAAsB,GAAG,IAAI,GAA7B,CAAiC;YAC/C,CAFD,MAEO;cACL,CAAC,IAAI,CAAC,GAAG,GAAT;;cACA,IAAI,CAAC,GAAG,CAAR,EAAW;gBACT,IAAI,CAAC,GAAG,CAAJ,IAAS,GAAb,EAAkB,GAAG,IAAI,GAAP;;gBAClB,OAAO,CAAC,EAAR,EAAY,GAAG,IAAI,GAAnB,CAAuB;cACxB;YACF;UACF;QACF;;QAED,OAAO,CAAC,CAAC,CAAF,GAAM,CAAN,IAAW,EAAX,GAAgB,MAAM,GAAtB,GAA4B,GAAnC;MACD,CA5rC0B,CA+rC/B;;;MACI,SAAS,QAAT,CAAkB,IAAlB,EAAwB,MAAxB,EAAgC;QAC9B,IAAI,CAAJ;QAAA,IACE,CAAC,GAAG,CADN;QAAA,IAEE,CAAC,GAAG,IAAI,SAAJ,CAAc,IAAI,CAAC,CAAD,CAAlB,CAFN;;QAIA,OAAO,CAAC,GAAG,IAAI,CAAC,MAAhB,EAAwB,CAAC,EAAzB,EAA6B;UAC3B,CAAC,GAAG,IAAI,SAAJ,CAAc,IAAI,CAAC,CAAD,CAAlB,CAAJ,CAD2B,CAGnC;;UACQ,IAAI,CAAC,CAAC,CAAC,CAAP,EAAU;YACR,CAAC,GAAG,CAAJ;YACA;UACD,CAHD,MAGO,IAAI,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAJ,EAAuB;YAC5B,CAAC,GAAG,CAAJ;UACD;QACF;;QAED,OAAO,CAAP;MACD;MAGL;AACA;AACA;AACA;;;MACI,SAAS,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B;QAC1B,IAAI,CAAC,GAAG,CAAR;QAAA,IACE,CAAC,GAAG,CAAC,CAAC,MADR,CAD0B,CAIhC;;QACM,OAAO,CAAC,CAAC,CAAC,EAAE,CAAH,CAAT,EAAgB,CAAC,CAAC,GAAF,EAAhB,CAAwB,CALE,CAOhC;;;QACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAD,CAAV,EAAe,CAAC,IAAI,EAApB,EAAwB,CAAC,IAAI,EAAL,EAAS,CAAC,EAAlC,CAAqC,CARX,CAUhC;;;QACM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,QAAR,GAAmB,CAAxB,IAA6B,OAAjC,EAA0C;UAEhD;UACQ,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,IAAZ,CAHwC,CAKhD;QACO,CAND,MAMO,IAAI,CAAC,GAAG,OAAR,EAAiB;UAE9B;UACQ,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAF,GAAM,CAAP,CAAN;QACD,CAJM,MAIA;UACL,CAAC,CAAC,CAAF,GAAM,CAAN;UACA,CAAC,CAAC,CAAF,GAAM,CAAN;QACD;;QAED,OAAO,CAAP;MACD,CApvC0B,CAuvC/B;;;MACI,YAAY,GAAI,YAAY;QAC1B,IAAI,UAAU,GAAG,6BAAjB;QAAA,IACE,QAAQ,GAAG,aADb;QAAA,IAEE,SAAS,GAAG,aAFd;QAAA,IAGE,eAAe,GAAG,oBAHpB;QAAA,IAIE,gBAAgB,GAAG,4BAJrB;QAMA,OAAO,UAAU,CAAV,EAAa,GAAb,EAAkB,KAAlB,EAAyB,CAAzB,EAA4B;UACjC,IAAI,IAAJ;UAAA,IACE,CAAC,GAAG,KAAK,GAAG,GAAH,GAAS,GAAG,CAAC,OAAJ,CAAY,gBAAZ,EAA8B,EAA9B,CADpB,CADiC,CAIzC;;UACQ,IAAI,eAAe,CAAC,IAAhB,CAAqB,CAArB,CAAJ,EAA6B;YAC3B,CAAC,CAAC,CAAF,GAAM,KAAK,CAAC,CAAD,CAAL,GAAW,IAAX,GAAkB,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAArC;UACD,CAFD,MAEO;YACL,IAAI,CAAC,KAAL,EAAY;cAEtB;cACY,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,UAAV,EAAsB,UAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB;gBAC7C,IAAI,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,WAAH,EAAN,KAA2B,GAA3B,GAAiC,EAAjC,GAAsC,EAAE,IAAI,GAAN,GAAY,CAAZ,GAAgB,CAA7D;gBACA,OAAO,CAAC,CAAD,IAAM,CAAC,IAAI,IAAX,GAAkB,EAAlB,GAAuB,CAA9B;cACD,CAHG,CAAJ;;cAKA,IAAI,CAAJ,EAAO;gBACL,IAAI,GAAG,CAAP,CADK,CAGnB;;gBACc,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,QAAV,EAAoB,IAApB,EAA0B,OAA1B,CAAkC,SAAlC,EAA6C,MAA7C,CAAJ;cACD;;cAED,IAAI,GAAG,IAAI,CAAX,EAAc,OAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,IAAjB,CAAP;YACf,CAjBI,CAmBf;YACA;;;YACU,IAAI,SAAS,CAAC,KAAd,EAAqB;cACnB,MAAM,KAAK,CACR,cAAc,GAAG,OAAjB,IAA4B,CAAC,GAAG,WAAW,CAAd,GAAkB,EAA/C,IAAqD,WAArD,GAAmE,GAD3D,CAAX;YAED,CAxBI,CA0Bf;;;YACU,CAAC,CAAC,CAAF,GAAM,IAAN;UACD;;UAED,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,IAAZ;QACD,CAtCD;MAuCD,CA9Cc,EAAf;MAiDJ;AACA;AACA;AACA;;;MACI,SAAS,KAAT,CAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,CAA1B,EAA6B;QAC3B,IAAI,CAAJ;QAAA,IAAO,CAAP;QAAA,IAAU,CAAV;QAAA,IAAa,CAAb;QAAA,IAAgB,CAAhB;QAAA,IAAmB,EAAnB;QAAA,IAAuB,EAAvB;QAAA,IACE,EAAE,GAAG,CAAC,CAAC,CADT;QAAA,IAEE,MAAM,GAAG,QAFX,CAD2B,CAKjC;;QACM,IAAI,EAAJ,EAAQ;UAEd;UACA;UACA;UACA;UACA;UACA;UACQ,GAAG,EAAE;YAEb;YACU,KAAK,CAAC,GAAG,CAAJ,EAAO,CAAC,GAAG,EAAE,CAAC,CAAD,CAAlB,EAAuB,CAAC,IAAI,EAA5B,EAAgC,CAAC,IAAI,EAAL,EAAS,CAAC,EAA1C,CAA6C;;YAC7C,CAAC,GAAG,EAAE,GAAG,CAAT,CAJG,CAMb;;YACU,IAAI,CAAC,GAAG,CAAR,EAAW;cACT,CAAC,IAAI,QAAL;cACA,CAAC,GAAG,EAAJ;cACA,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAN,CAAN,CAHS,CAKrB;;cACY,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAV,GAAwB,EAAxB,GAA6B,CAAlC;YACD,CAPD,MAOO;cACL,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAL,IAAU,QAAX,CAAb;;cAEA,IAAI,EAAE,IAAI,EAAE,CAAC,MAAb,EAAqB;gBAEnB,IAAI,CAAJ,EAAO;kBAErB;kBACgB,OAAO,EAAE,CAAC,MAAH,IAAa,EAApB,EAAwB,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAxB,CAAmC;;kBACnC,CAAC,GAAG,EAAE,GAAG,CAAT;kBACA,CAAC,GAAG,CAAJ;kBACA,CAAC,IAAI,QAAL;kBACA,CAAC,GAAG,CAAC,GAAG,QAAJ,GAAe,CAAnB;gBACD,CARD,MAQO;kBACL,MAAM,GAAN;gBACD;cACF,CAbD,MAaO;gBACL,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAD,CAAV,CADK,CAGnB;;gBACc,KAAK,CAAC,GAAG,CAAT,EAAY,CAAC,IAAI,EAAjB,EAAqB,CAAC,IAAI,EAAL,EAAS,CAAC,EAA/B,CAAkC,CAJ7B,CAMnB;;;gBACc,CAAC,IAAI,QAAL,CAPK,CASnB;gBACA;;gBACc,CAAC,GAAG,CAAC,GAAG,QAAJ,GAAe,CAAnB,CAXK,CAanB;;gBACc,EAAE,GAAG,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAV,GAAwB,EAAxB,GAA6B,CAA9C;cACD;YACF;;YAED,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAV,IAEd;YACA;YACA;YACW,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,IAAc,IALX,KAKoB,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAL1C,CAAJ;YAOA,CAAC,GAAG,EAAE,GAAG,CAAL,GACD,CAAC,EAAE,IAAI,CAAP,MAAc,EAAE,IAAI,CAAN,IAAW,EAAE,KAAK,CAAC,CAAC,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAnB,CAA3B,CADC,GAED,EAAE,GAAG,CAAL,IAAU,EAAE,IAAI,CAAN,KAAY,EAAE,IAAI,CAAN,IAAW,CAAX,IAAgB,EAAE,IAAI,CAAN,IAEnD;YACa,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAL,CAAlB,GAA4B,CAApC,GAAwC,EAAE,CAAC,EAAE,GAAG,CAAN,CAA3C,IAAuD,EAAxD,GAA8D,CAHvC,IAItB,EAAE,KAAK,CAAC,CAAC,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAnB,CAJQ,CAFb;;YAQA,IAAI,EAAE,GAAG,CAAL,IAAU,CAAC,EAAE,CAAC,CAAD,CAAjB,EAAsB;cACpB,EAAE,CAAC,MAAH,GAAY,CAAZ;;cAEA,IAAI,CAAJ,EAAO;gBAEnB;gBACc,EAAE,IAAI,CAAC,CAAC,CAAF,GAAM,CAAZ,CAHK,CAKnB;;gBACc,EAAE,CAAC,CAAD,CAAF,GAAQ,MAAM,CAAC,CAAC,QAAQ,GAAG,EAAE,GAAG,QAAjB,IAA6B,QAA9B,CAAd;gBACA,CAAC,CAAC,CAAF,GAAM,CAAC,EAAD,IAAO,CAAb;cACD,CARD,MAQO;gBAEnB;gBACc,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAC,CAAC,CAAF,GAAM,CAAd;cACD;;cAED,OAAO,CAAP;YACD,CAjFE,CAmFb;;;YACU,IAAI,CAAC,IAAI,CAAT,EAAY;cACV,EAAE,CAAC,MAAH,GAAY,EAAZ;cACA,CAAC,GAAG,CAAJ;cACA,EAAE;YACH,CAJD,MAIO;cACL,EAAE,CAAC,MAAH,GAAY,EAAE,GAAG,CAAjB;cACA,CAAC,GAAG,MAAM,CAAC,QAAQ,GAAG,CAAZ,CAAV,CAFK,CAIjB;cACA;;cACY,EAAE,CAAC,EAAD,CAAF,GAAS,CAAC,GAAG,CAAJ,GAAQ,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAL,CAAV,GAAoB,MAAM,CAAC,CAAD,CAA3B,CAAT,GAA2C,CAAnD,GAAuD,CAAhE;YACD,CA/FE,CAiGb;;;YACU,IAAI,CAAJ,EAAO;cAEL,SAAU;gBAEtB;gBACc,IAAI,EAAE,IAAI,CAAV,EAAa;kBAE3B;kBACgB,KAAK,CAAC,GAAG,CAAJ,EAAO,CAAC,GAAG,EAAE,CAAC,CAAD,CAAlB,EAAuB,CAAC,IAAI,EAA5B,EAAgC,CAAC,IAAI,EAAL,EAAS,CAAC,EAA1C,CAA6C;;kBAC7C,CAAC,GAAG,EAAE,CAAC,CAAD,CAAF,IAAS,CAAb;;kBACA,KAAK,CAAC,GAAG,CAAT,EAAY,CAAC,IAAI,EAAjB,EAAqB,CAAC,IAAI,EAAL,EAAS,CAAC,EAA/B,CAAkC,CALvB,CAO3B;;;kBACgB,IAAI,CAAC,IAAI,CAAT,EAAY;oBACV,CAAC,CAAC,CAAF;oBACA,IAAI,EAAE,CAAC,CAAD,CAAF,IAAS,IAAb,EAAmB,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR;kBACpB;;kBAED;gBACD,CAdD,MAcO;kBACL,EAAE,CAAC,EAAD,CAAF,IAAU,CAAV;kBACA,IAAI,EAAE,CAAC,EAAD,CAAF,IAAU,IAAd,EAAoB;kBACpB,EAAE,CAAC,EAAE,EAAH,CAAF,GAAW,CAAX;kBACA,CAAC,GAAG,CAAJ;gBACD;cACF;YACF,CA5HE,CA8Hb;;;YACU,KAAK,CAAC,GAAG,EAAE,CAAC,MAAZ,EAAoB,EAAE,CAAC,EAAE,CAAH,CAAF,KAAY,CAAhC,EAAmC,EAAE,CAAC,GAAH,EAAnC,CAA4C;UAC7C,CAxIK,CA0Id;;;UACQ,IAAI,CAAC,CAAC,CAAF,GAAM,OAAV,EAAmB;YACjB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,IAAZ,CADiB,CAG3B;UACS,CAJD,MAIO,IAAI,CAAC,CAAC,CAAF,GAAM,OAAV,EAAmB;YACxB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAF,GAAM,CAAP,CAAN;UACD;QACF;;QAED,OAAO,CAAP;MACD;;MAGD,SAAS,OAAT,CAAiB,CAAjB,EAAoB;QAClB,IAAI,GAAJ;QAAA,IACE,CAAC,GAAG,CAAC,CAAC,CADR;QAGA,IAAI,CAAC,KAAK,IAAV,EAAgB,OAAO,CAAC,CAAC,QAAF,EAAP;QAEhB,GAAG,GAAG,aAAa,CAAC,CAAC,CAAC,CAAH,CAAnB;QAEA,GAAG,GAAG,CAAC,IAAI,UAAL,IAAmB,CAAC,IAAI,UAAxB,GACF,aAAa,CAAC,GAAD,EAAM,CAAN,CADX,GAEF,YAAY,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,CAFhB;QAIA,OAAO,CAAC,CAAC,CAAF,GAAM,CAAN,GAAU,MAAM,GAAhB,GAAsB,GAA7B;MACD,CAx9C0B,CA29C/B;;MAGA;AACA;AACA;;;MACI,CAAC,CAAC,aAAF,GAAkB,CAAC,CAAC,GAAF,GAAQ,YAAY;QACpC,IAAI,CAAC,GAAG,IAAI,SAAJ,CAAc,IAAd,CAAR;QACA,IAAI,CAAC,CAAC,CAAF,GAAM,CAAV,EAAa,CAAC,CAAC,CAAF,GAAM,CAAN;QACb,OAAO,CAAP;MACD,CAJD;MAOJ;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,UAAF,GAAe,UAAU,CAAV,EAAa,CAAb,EAAgB;QAC7B,OAAO,OAAO,CAAC,IAAD,EAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP,CAAd;MACD,CAFD;MAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,aAAF,GAAkB,CAAC,CAAC,EAAF,GAAO,UAAU,EAAV,EAAc,EAAd,EAAkB;QACzC,IAAI,CAAJ;QAAA,IAAO,CAAP;QAAA,IAAU,CAAV;QAAA,IACE,CAAC,GAAG,IADN;;QAGA,IAAI,EAAE,IAAI,IAAV,EAAgB;UACd,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,GAAR,CAAR;UACA,IAAI,EAAE,IAAI,IAAV,EAAgB,EAAE,GAAG,aAAL,CAAhB,KACK,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAR;UAEL,OAAO,KAAK,CAAC,IAAI,SAAJ,CAAc,CAAd,CAAD,EAAmB,EAAE,GAAG,CAAC,CAAC,CAAP,GAAW,CAA9B,EAAiC,EAAjC,CAAZ;QACD;;QAED,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAR,CAAJ,EAAgB,OAAO,IAAP;QAChB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAF,GAAW,CAAhB,IAAqB,QAAQ,CAAC,KAAK,CAAL,GAAS,QAAV,CAA9B,IAAqD,QAAzD,CAbyC,CAe/C;;QACM,IAAI,CAAC,GAAG,CAAC,CAAC,CAAD,CAAT,EAAc,OAAO,CAAC,GAAG,EAAJ,IAAU,CAAjB,EAAoB,CAAC,IAAI,EAAL,EAAS,CAAC,EAA9B,CAAiC;QAC/C,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,CAAJ;QAEX,OAAO,CAAP;MACD,CApBD;MAuBJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,SAAF,GAAc,CAAC,CAAC,GAAF,GAAQ,UAAU,CAAV,EAAa,CAAb,EAAgB;QACpC,OAAO,GAAG,CAAC,IAAD,EAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP,EAA4B,cAA5B,EAA4C,aAA5C,CAAV;MACD,CAFD;MAKJ;AACA;AACA;AACA;;;MACI,CAAC,CAAC,kBAAF,GAAuB,CAAC,CAAC,IAAF,GAAS,UAAU,CAAV,EAAa,CAAb,EAAgB;QAC9C,OAAO,GAAG,CAAC,IAAD,EAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP,EAA4B,CAA5B,EAA+B,CAA/B,CAAV;MACD,CAFD;MAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,eAAF,GAAoB,CAAC,CAAC,GAAF,GAAQ,UAAU,CAAV,EAAa,CAAb,EAAgB;QAC1C,IAAI,IAAJ;QAAA,IAAU,QAAV;QAAA,IAAoB,CAApB;QAAA,IAAuB,CAAvB;QAAA,IAA0B,IAA1B;QAAA,IAAgC,MAAhC;QAAA,IAAwC,MAAxC;QAAA,IAAgD,MAAhD;QAAA,IAAwD,CAAxD;QAAA,IACE,CAAC,GAAG,IADN;QAGA,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,CAAJ,CAJ0C,CAMhD;;QACM,IAAI,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAC,SAAF,EAAZ,EAA2B;UACzB,MAAM,KAAK,CACR,cAAc,GAAG,2BAAjB,GAA+C,OAAO,CAAC,CAAD,CAD9C,CAAX;QAED;;QAED,IAAI,CAAC,IAAI,IAAT,EAAe,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,CAAJ,CAZ2B,CAchD;;QACM,MAAM,GAAG,CAAC,CAAC,CAAF,GAAM,EAAf,CAf0C,CAiBhD;;QACM,IAAI,CAAC,CAAC,CAAC,CAAH,IAAQ,CAAC,CAAC,CAAC,CAAF,CAAI,CAAJ,CAAT,IAAmB,CAAC,CAAC,CAAF,CAAI,CAAJ,KAAU,CAAV,IAAe,CAAC,CAAC,CAAC,CAAlB,IAAuB,CAAC,CAAC,CAAF,CAAI,MAAJ,IAAc,CAAxD,IAA6D,CAAC,CAAC,CAAC,CAAhE,IAAqE,CAAC,CAAC,CAAC,CAAF,CAAI,CAAJ,CAA1E,EAAkF;UAExF;UACA;UACQ,CAAC,GAAG,IAAI,SAAJ,CAAc,IAAI,CAAC,GAAL,CAAS,CAAC,OAAO,CAAC,CAAD,CAAjB,EAAsB,MAAM,GAAG,IAAI,KAAK,CAAC,CAAD,CAAZ,GAAkB,CAAC,OAAO,CAAC,CAAD,CAAtD,CAAd,CAAJ;UACA,OAAO,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,CAAN,CAAH,GAAc,CAAtB;QACD;;QAED,MAAM,GAAG,CAAC,CAAC,CAAF,GAAM,CAAf;;QAEA,IAAI,CAAJ,EAAO;UAEb;UACQ,IAAI,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAF,CAAI,CAAJ,CAAP,GAAgB,CAAC,CAAC,CAAC,CAAvB,EAA0B,OAAO,IAAI,SAAJ,CAAc,GAAd,CAAP;UAE1B,QAAQ,GAAG,CAAC,MAAD,IAAW,CAAC,CAAC,SAAF,EAAX,IAA4B,CAAC,CAAC,SAAF,EAAvC;UAEA,IAAI,QAAJ,EAAc,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,CAAN,CAAJ,CAPT,CASb;UACA;QACO,CAXD,MAWO,IAAI,CAAC,CAAC,CAAF,GAAM,CAAN,KAAY,CAAC,CAAC,CAAF,GAAM,CAAN,IAAW,CAAC,CAAC,CAAF,GAAM,CAAC,CAAlB,KAAwB,CAAC,CAAC,CAAF,IAAO,CAAP,CACrD;QADqD,EAE3C,CAAC,CAAC,CAAF,CAAI,CAAJ,IAAS,CAAT,IAAc,MAAM,IAAI,CAAC,CAAC,CAAF,CAAI,CAAJ,KAAU,IAFS,CAGrD;QAHqD,EAI3C,CAAC,CAAC,CAAF,CAAI,CAAJ,IAAS,IAAT,IAAiB,MAAM,IAAI,CAAC,CAAC,CAAF,CAAI,CAAJ,KAAU,SAJlB,CAAZ,CAAJ,EAI+C;UAE5D;UACQ,CAAC,GAAG,CAAC,CAAC,CAAF,GAAM,CAAN,IAAW,KAAK,CAAC,CAAD,CAAhB,GAAsB,CAAC,CAAvB,GAA2B,CAA/B,CAHoD,CAK5D;;UACQ,IAAI,CAAC,CAAC,CAAF,GAAM,CAAC,CAAX,EAAc,CAAC,GAAG,IAAI,CAAR,CANsC,CAQ5D;;UACQ,OAAO,IAAI,SAAJ,CAAc,MAAM,GAAG,IAAI,CAAP,GAAW,CAA/B,CAAP;QAED,CAfM,MAeA,IAAI,aAAJ,EAAmB;UAEhC;UACA;UACA;UACQ,CAAC,GAAG,QAAQ,CAAC,aAAa,GAAG,QAAhB,GAA2B,CAA5B,CAAZ;QACD;;QAED,IAAI,MAAJ,EAAY;UACV,IAAI,GAAG,IAAI,SAAJ,CAAc,GAAd,CAAP;UACA,IAAI,MAAJ,EAAY,CAAC,CAAC,CAAF,GAAM,CAAN;UACZ,MAAM,GAAG,KAAK,CAAC,CAAD,CAAd;QACD,CAJD,MAIO;UACL,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,OAAO,CAAC,CAAD,CAAjB,CAAJ;UACA,MAAM,GAAG,CAAC,GAAG,CAAb;QACD;;QAED,CAAC,GAAG,IAAI,SAAJ,CAAc,GAAd,CAAJ,CAvE0C,CAyEhD;;QACM,SAAU;UAER,IAAI,MAAJ,EAAY;YACV,CAAC,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAJ;YACA,IAAI,CAAC,CAAC,CAAC,CAAP,EAAU;;YAEV,IAAI,CAAJ,EAAO;cACL,IAAI,CAAC,CAAC,CAAF,CAAI,MAAJ,GAAa,CAAjB,EAAoB,CAAC,CAAC,CAAF,CAAI,MAAJ,GAAa,CAAb;YACrB,CAFD,MAEO,IAAI,QAAJ,EAAc;cACnB,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,CAAN,CAAJ,CADmB,CACN;YACd;UACF;;UAED,IAAI,CAAJ,EAAO;YACL,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAL,CAAb;YACA,IAAI,CAAC,KAAK,CAAV,EAAa;YACb,MAAM,GAAG,CAAC,GAAG,CAAb;UACD,CAJD,MAIO;YACL,CAAC,GAAG,CAAC,CAAC,KAAF,CAAQ,IAAR,CAAJ;YACA,KAAK,CAAC,CAAD,EAAI,CAAC,CAAC,CAAF,GAAM,CAAV,EAAa,CAAb,CAAL;;YAEA,IAAI,CAAC,CAAC,CAAF,GAAM,EAAV,EAAc;cACZ,MAAM,GAAG,KAAK,CAAC,CAAD,CAAd;YACD,CAFD,MAEO;cACL,CAAC,GAAG,CAAC,OAAO,CAAC,CAAD,CAAZ;cACA,IAAI,CAAC,KAAK,CAAV,EAAa;cACb,MAAM,GAAG,CAAC,GAAG,CAAb;YACD;UACF;;UAED,CAAC,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAJ;;UAEA,IAAI,CAAJ,EAAO;YACL,IAAI,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAF,CAAI,MAAJ,GAAa,CAAxB,EAA2B,CAAC,CAAC,CAAF,CAAI,MAAJ,GAAa,CAAb;UAC5B,CAFD,MAEO,IAAI,QAAJ,EAAc;YACnB,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,CAAN,CAAJ,CADmB,CACN;UACd;QACF;;QAED,IAAI,QAAJ,EAAc,OAAO,CAAP;QACd,IAAI,MAAJ,EAAY,CAAC,GAAG,GAAG,CAAC,GAAJ,CAAQ,CAAR,CAAJ;QAEZ,OAAO,CAAC,GAAG,CAAC,CAAC,GAAF,CAAM,CAAN,CAAH,GAAc,CAAC,GAAG,KAAK,CAAC,CAAD,EAAI,aAAJ,EAAmB,aAAnB,EAAkC,IAAlC,CAAR,GAAkD,CAAzE;MACD,CArHD;MAwHJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,YAAF,GAAiB,UAAU,EAAV,EAAc;QAC7B,IAAI,CAAC,GAAG,IAAI,SAAJ,CAAc,IAAd,CAAR;QACA,IAAI,EAAE,IAAI,IAAV,EAAgB,EAAE,GAAG,aAAL,CAAhB,KACK,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAR;QACL,OAAO,KAAK,CAAC,CAAD,EAAI,CAAC,CAAC,CAAF,GAAM,CAAV,EAAa,EAAb,CAAZ;MACD,CALD;MAQJ;AACA;AACA;AACA;;;MACI,CAAC,CAAC,SAAF,GAAc,CAAC,CAAC,EAAF,GAAO,UAAU,CAAV,EAAa,CAAb,EAAgB;QACnC,OAAO,OAAO,CAAC,IAAD,EAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP,CAAP,KAAuC,CAA9C;MACD,CAFD;MAKJ;AACA;AACA;;;MACI,CAAC,CAAC,QAAF,GAAa,YAAY;QACvB,OAAO,CAAC,CAAC,KAAK,CAAd;MACD,CAFD;MAKJ;AACA;AACA;AACA;;;MACI,CAAC,CAAC,aAAF,GAAkB,CAAC,CAAC,EAAF,GAAO,UAAU,CAAV,EAAa,CAAb,EAAgB;QACvC,OAAO,OAAO,CAAC,IAAD,EAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP,CAAP,GAAqC,CAA5C;MACD,CAFD;MAKJ;AACA;AACA;AACA;;;MACI,CAAC,CAAC,sBAAF,GAA2B,CAAC,CAAC,GAAF,GAAQ,UAAU,CAAV,EAAa,CAAb,EAAgB;QACjD,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,IAAD,EAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP,CAAZ,MAA6C,CAA7C,IAAkD,CAAC,KAAK,CAA/D;MAED,CAHD;MAMJ;AACA;AACA;;;MACI,CAAC,CAAC,SAAF,GAAc,YAAY;QACxB,OAAO,CAAC,CAAC,KAAK,CAAP,IAAY,QAAQ,CAAC,KAAK,CAAL,GAAS,QAAV,CAAR,GAA8B,KAAK,CAAL,CAAO,MAAP,GAAgB,CAAjE;MACD,CAFD;MAKJ;AACA;AACA;AACA;;;MACI,CAAC,CAAC,UAAF,GAAe,CAAC,CAAC,EAAF,GAAO,UAAU,CAAV,EAAa,CAAb,EAAgB;QACpC,OAAO,OAAO,CAAC,IAAD,EAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP,CAAP,GAAqC,CAA5C;MACD,CAFD;MAKJ;AACA;AACA;AACA;;;MACI,CAAC,CAAC,mBAAF,GAAwB,CAAC,CAAC,GAAF,GAAQ,UAAU,CAAV,EAAa,CAAb,EAAgB;QAC9C,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,IAAD,EAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAP,CAAZ,MAA6C,CAAC,CAA9C,IAAmD,CAAC,KAAK,CAAhE;MACD,CAFD;MAKJ;AACA;AACA;;;MACI,CAAC,CAAC,KAAF,GAAU,YAAY;QACpB,OAAO,CAAC,KAAK,CAAb;MACD,CAFD;MAKJ;AACA;AACA;;;MACI,CAAC,CAAC,UAAF,GAAe,YAAY;QACzB,OAAO,KAAK,CAAL,GAAS,CAAhB;MACD,CAFD;MAKJ;AACA;AACA;;;MACI,CAAC,CAAC,UAAF,GAAe,YAAY;QACzB,OAAO,KAAK,CAAL,GAAS,CAAhB;MACD,CAFD;MAKJ;AACA;AACA;;;MACI,CAAC,CAAC,MAAF,GAAW,YAAY;QACrB,OAAO,CAAC,CAAC,KAAK,CAAP,IAAY,KAAK,CAAL,CAAO,CAAP,KAAa,CAAhC;MACD,CAFD;MAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,KAAF,GAAU,UAAU,CAAV,EAAa,CAAb,EAAgB;QACxB,IAAI,CAAJ;QAAA,IAAO,CAAP;QAAA,IAAU,CAAV;QAAA,IAAa,IAAb;QAAA,IACE,CAAC,GAAG,IADN;QAAA,IAEE,CAAC,GAAG,CAAC,CAAC,CAFR;QAIA,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAJ;QACA,CAAC,GAAG,CAAC,CAAC,CAAN,CANwB,CAQ9B;;QACM,IAAI,CAAC,CAAD,IAAM,CAAC,CAAX,EAAc,OAAO,IAAI,SAAJ,CAAc,GAAd,CAAP,CATU,CAW9B;;QACM,IAAI,CAAC,IAAI,CAAT,EAAY;UACV,CAAC,CAAC,CAAF,GAAM,CAAC,CAAP;UACA,OAAO,CAAC,CAAC,IAAF,CAAO,CAAP,CAAP;QACD;;QAED,IAAI,EAAE,GAAG,CAAC,CAAC,CAAF,GAAM,QAAf;QAAA,IACE,EAAE,GAAG,CAAC,CAAC,CAAF,GAAM,QADb;QAAA,IAEE,EAAE,GAAG,CAAC,CAAC,CAFT;QAAA,IAGE,EAAE,GAAG,CAAC,CAAC,CAHT;;QAKA,IAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB;UAEtB;UACQ,IAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAF,GAAM,CAAC,CAAP,EAAU,CAAd,IAAmB,IAAI,SAAJ,CAAc,EAAE,GAAG,CAAH,GAAO,GAAvB,CAA5B,CAHF,CAKtB;;UACQ,IAAI,CAAC,EAAE,CAAC,CAAD,CAAH,IAAU,CAAC,EAAE,CAAC,CAAD,CAAjB,EAAsB;YAE9B;YACU,OAAO,EAAE,CAAC,CAAD,CAAF,IAAS,CAAC,CAAC,CAAF,GAAM,CAAC,CAAP,EAAU,CAAnB,IAAwB,IAAI,SAAJ,CAAc,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,GAEvD;YACW,aAAa,IAAI,CAAjB,GAAqB,CAAC,CAAtB,GAA0B,CAHI,CAA/B;UAID;QACF;;QAED,EAAE,GAAG,QAAQ,CAAC,EAAD,CAAb;QACA,EAAE,GAAG,QAAQ,CAAC,EAAD,CAAb;QACA,EAAE,GAAG,EAAE,CAAC,KAAH,EAAL,CAxCwB,CA0C9B;;QACM,IAAI,CAAC,GAAG,EAAE,GAAG,EAAb,EAAiB;UAEf,IAAI,IAAI,GAAG,CAAC,GAAG,CAAf,EAAkB;YAChB,CAAC,GAAG,CAAC,CAAL;YACA,CAAC,GAAG,EAAJ;UACD,CAHD,MAGO;YACL,EAAE,GAAG,EAAL;YACA,CAAC,GAAG,EAAJ;UACD;;UAED,CAAC,CAAC,OAAF,GAVe,CAYvB;;UACQ,KAAK,CAAC,GAAG,CAAT,EAAY,CAAC,EAAb,EAAiB,CAAC,CAAC,IAAF,CAAO,CAAP,CAAjB,CAA2B;;UAC3B,CAAC,CAAC,OAAF;QACD,CAfD,MAeO;UAEb;UACQ,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,MAAR,KAAmB,CAAC,GAAG,EAAE,CAAC,MAA1B,CAAR,IAA6C,CAA7C,GAAiD,CAArD;;UAEA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;YAE1B,IAAI,EAAE,CAAC,CAAD,CAAF,IAAS,EAAE,CAAC,CAAD,CAAf,EAAoB;cAClB,IAAI,GAAG,EAAE,CAAC,CAAD,CAAF,GAAQ,EAAE,CAAC,CAAD,CAAjB;cACA;YACD;UACF;QACF,CAtEuB,CAwE9B;;;QACM,IAAI,IAAJ,EAAU,CAAC,GAAG,EAAJ,EAAQ,EAAE,GAAG,EAAb,EAAiB,EAAE,GAAG,CAAtB,EAAyB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAlC;QAEV,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,MAAR,KAAmB,CAAC,GAAG,EAAE,CAAC,MAA1B,CAAJ,CA3EwB,CA6E9B;QACA;;QACM,IAAI,CAAC,GAAG,CAAR,EAAW,OAAO,CAAC,EAAR,EAAY,EAAE,CAAC,CAAC,EAAF,CAAF,GAAU,CAAtB,CAAwB;QACnC,CAAC,GAAG,IAAI,GAAG,CAAX,CAhFwB,CAkF9B;;QACM,OAAO,CAAC,GAAG,CAAX,GAAe;UAEb,IAAI,EAAE,CAAC,EAAE,CAAH,CAAF,GAAU,EAAE,CAAC,CAAD,CAAhB,EAAqB;YACnB,KAAK,CAAC,GAAG,CAAT,EAAY,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAH,CAApB,EAA2B,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAnC,CAAqC;;YACrC,EAAE,EAAE,CAAC,CAAD,CAAJ;YACA,EAAE,CAAC,CAAD,CAAF,IAAS,IAAT;UACD;;UAED,EAAE,CAAC,CAAD,CAAF,IAAS,EAAE,CAAC,CAAD,CAAX;QACD,CA5FuB,CA8F9B;;;QACM,OAAO,EAAE,CAAC,CAAD,CAAF,IAAS,CAAhB,EAAmB,EAAE,CAAC,MAAH,CAAU,CAAV,EAAa,CAAb,GAAiB,EAAE,EAAtC,CAAyC,CA/FjB,CAiG9B;;;QACM,IAAI,CAAC,EAAE,CAAC,CAAD,CAAP,EAAY;UAElB;UACA;UACQ,CAAC,CAAC,CAAF,GAAM,aAAa,IAAI,CAAjB,GAAqB,CAAC,CAAtB,GAA0B,CAAhC;UACA,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAF,GAAM,CAAP,CAAN;UACA,OAAO,CAAP;QACD,CAzGuB,CA2G9B;QACA;;;QACM,OAAO,SAAS,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAhB;MACD,CA9GD;MAiHJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,GAAF,GAAQ,UAAU,CAAV,EAAa,CAAb,EAAgB;QACjC,IAAI,CAAJ;QAAA,IAAO,CAAP;QAAA,IACE,CAAC,GAAG,IADN;QAGA,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAJ,CAJiC,CAMvC;;QACM,IAAI,CAAC,CAAC,CAAC,CAAH,IAAQ,CAAC,CAAC,CAAC,CAAX,IAAgB,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAC,CAAF,CAAI,CAAJ,CAA5B,EAAoC;UAClC,OAAO,IAAI,SAAJ,CAAc,GAAd,CAAP,CADkC,CAG1C;QACO,CAJD,MAIO,IAAI,CAAC,CAAC,CAAC,CAAH,IAAQ,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAC,CAAF,CAAI,CAAJ,CAApB,EAA4B;UACjC,OAAO,IAAI,SAAJ,CAAc,CAAd,CAAP;QACD;;QAED,IAAI,WAAW,IAAI,CAAnB,EAAsB;UAE5B;UACA;UACQ,CAAC,GAAG,CAAC,CAAC,CAAN;UACA,CAAC,CAAC,CAAF,GAAM,CAAN;UACA,CAAC,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;UACA,CAAC,CAAC,CAAF,GAAM,CAAN;UACA,CAAC,CAAC,CAAF,IAAO,CAAP;QACD,CATD,MASO;UACL,CAAC,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,WAAV,CAAP;QACD;;QAED,CAAC,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAR,CAAJ,CA5BiC,CA8BvC;;QACM,IAAI,CAAC,CAAC,CAAC,CAAF,CAAI,CAAJ,CAAD,IAAW,WAAW,IAAI,CAA9B,EAAiC,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAR;QAEjC,OAAO,CAAP;MACD,CAlCD;MAqCJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,YAAF,GAAiB,CAAC,CAAC,KAAF,GAAU,UAAU,CAAV,EAAa,CAAb,EAAgB;QACzC,IAAI,CAAJ;QAAA,IAAO,CAAP;QAAA,IAAU,CAAV;QAAA,IAAa,CAAb;QAAA,IAAgB,CAAhB;QAAA,IAAmB,CAAnB;QAAA,IAAsB,GAAtB;QAAA,IAA2B,GAA3B;QAAA,IAAgC,GAAhC;QAAA,IAAqC,GAArC;QAAA,IAA0C,GAA1C;QAAA,IAA+C,GAA/C;QAAA,IAAoD,EAApD;QAAA,IACE,IADF;QAAA,IACQ,QADR;QAAA,IAEE,CAAC,GAAG,IAFN;QAAA,IAGE,EAAE,GAAG,CAAC,CAAC,CAHT;QAAA,IAIE,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAL,EAA0B,CAJjC,CADyC,CAO/C;;QACM,IAAI,CAAC,EAAD,IAAO,CAAC,EAAR,IAAc,CAAC,EAAE,CAAC,CAAD,CAAjB,IAAwB,CAAC,EAAE,CAAC,CAAD,CAA/B,EAAoC;UAE1C;UACQ,IAAI,CAAC,CAAC,CAAC,CAAH,IAAQ,CAAC,CAAC,CAAC,CAAX,IAAgB,EAAE,IAAI,CAAC,EAAE,CAAC,CAAD,CAAT,IAAgB,CAAC,EAAjC,IAAuC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAD,CAAT,IAAgB,CAAC,EAA5D,EAAgE;YAC9D,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,IAAlB;UACD,CAFD,MAEO;YACL,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAT,CADK,CAGf;;YACU,IAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB;cACd,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAF,GAAM,IAAZ,CADc,CAG1B;YACW,CAJD,MAIO;cACL,CAAC,CAAC,CAAF,GAAM,CAAC,CAAD,CAAN;cACA,CAAC,CAAC,CAAF,GAAM,CAAN;YACD;UACF;;UAED,OAAO,CAAP;QACD;;QAED,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAF,GAAM,QAAP,CAAR,GAA2B,QAAQ,CAAC,CAAC,CAAC,CAAF,GAAM,QAAP,CAAvC;QACA,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAT;QACA,GAAG,GAAG,EAAE,CAAC,MAAT;QACA,GAAG,GAAG,EAAE,CAAC,MAAT,CAjCyC,CAmC/C;;QACM,IAAI,GAAG,GAAG,GAAV,EAAe,EAAE,GAAG,EAAL,EAAS,EAAE,GAAG,EAAd,EAAkB,EAAE,GAAG,EAAvB,EAA2B,CAAC,GAAG,GAA/B,EAAoC,GAAG,GAAG,GAA1C,EAA+C,GAAG,GAAG,CAArD,CApC0B,CAsC/C;;QACM,KAAK,CAAC,GAAG,GAAG,GAAG,GAAV,EAAe,EAAE,GAAG,EAAzB,EAA6B,CAAC,EAA9B,EAAkC,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAlC,CAA6C;;QAE7C,IAAI,GAAG,IAAP;QACA,QAAQ,GAAG,SAAX;;QAEA,KAAK,CAAC,GAAG,GAAT,EAAc,EAAE,CAAF,IAAO,CAArB,GAAyB;UACvB,CAAC,GAAG,CAAJ;UACA,GAAG,GAAG,EAAE,CAAC,CAAD,CAAF,GAAQ,QAAd;UACA,GAAG,GAAG,EAAE,CAAC,CAAD,CAAF,GAAQ,QAAR,GAAmB,CAAzB;;UAEA,KAAK,CAAC,GAAG,GAAJ,EAAS,CAAC,GAAG,CAAC,GAAG,CAAtB,EAAyB,CAAC,GAAG,CAA7B,GAAiC;YAC/B,GAAG,GAAG,EAAE,CAAC,EAAE,CAAH,CAAF,GAAU,QAAhB;YACA,GAAG,GAAG,EAAE,CAAC,CAAD,CAAF,GAAQ,QAAR,GAAmB,CAAzB;YACA,CAAC,GAAG,GAAG,GAAG,GAAN,GAAY,GAAG,GAAG,GAAtB;YACA,GAAG,GAAG,GAAG,GAAG,GAAN,GAAc,CAAC,GAAG,QAAL,GAAiB,QAA9B,GAA0C,EAAE,CAAC,CAAD,CAA5C,GAAkD,CAAxD;YACA,CAAC,GAAG,CAAC,GAAG,GAAG,IAAN,GAAa,CAAd,KAAoB,CAAC,GAAG,QAAJ,GAAe,CAAnC,IAAwC,GAAG,GAAG,GAAlD;YACA,EAAE,CAAC,CAAC,EAAF,CAAF,GAAU,GAAG,GAAG,IAAhB;UACD;;UAED,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR;QACD;;QAED,IAAI,CAAJ,EAAO;UACL,EAAE,CAAF;QACD,CAFD,MAEO;UACL,EAAE,CAAC,MAAH,CAAU,CAAV,EAAa,CAAb;QACD;;QAED,OAAO,SAAS,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,CAAhB;MACD,CApED;MAuEJ;AACA;AACA;AACA;;;MACI,CAAC,CAAC,OAAF,GAAY,YAAY;QACtB,IAAI,CAAC,GAAG,IAAI,SAAJ,CAAc,IAAd,CAAR;QACA,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAC,CAAH,IAAQ,IAAd;QACA,OAAO,CAAP;MACD,CAJD;MAOJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,IAAF,GAAS,UAAU,CAAV,EAAa,CAAb,EAAgB;QACvB,IAAI,CAAJ;QAAA,IACE,CAAC,GAAG,IADN;QAAA,IAEE,CAAC,GAAG,CAAC,CAAC,CAFR;QAIA,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAJ;QACA,CAAC,GAAG,CAAC,CAAC,CAAN,CANuB,CAQ7B;;QACM,IAAI,CAAC,CAAD,IAAM,CAAC,CAAX,EAAc,OAAO,IAAI,SAAJ,CAAc,GAAd,CAAP,CATS,CAW7B;;QACO,IAAI,CAAC,IAAI,CAAT,EAAY;UACX,CAAC,CAAC,CAAF,GAAM,CAAC,CAAP;UACA,OAAO,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAP;QACD;;QAED,IAAI,EAAE,GAAG,CAAC,CAAC,CAAF,GAAM,QAAf;QAAA,IACE,EAAE,GAAG,CAAC,CAAC,CAAF,GAAM,QADb;QAAA,IAEE,EAAE,GAAG,CAAC,CAAC,CAFT;QAAA,IAGE,EAAE,GAAG,CAAC,CAAC,CAHT;;QAKA,IAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB;UAEtB;UACQ,IAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB,OAAO,IAAI,SAAJ,CAAc,CAAC,GAAG,CAAlB,CAAP,CAHF,CAKtB;UACA;;UACQ,IAAI,CAAC,EAAE,CAAC,CAAD,CAAH,IAAU,CAAC,EAAE,CAAC,CAAD,CAAjB,EAAsB,OAAO,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,GAAY,IAAI,SAAJ,CAAc,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,GAAY,CAAC,GAAG,CAA9B,CAAnB;QACvB;;QAED,EAAE,GAAG,QAAQ,CAAC,EAAD,CAAb;QACA,EAAE,GAAG,QAAQ,CAAC,EAAD,CAAb;QACA,EAAE,GAAG,EAAE,CAAC,KAAH,EAAL,CAlCuB,CAoC7B;;QACM,IAAI,CAAC,GAAG,EAAE,GAAG,EAAb,EAAiB;UACf,IAAI,CAAC,GAAG,CAAR,EAAW;YACT,EAAE,GAAG,EAAL;YACA,CAAC,GAAG,EAAJ;UACD,CAHD,MAGO;YACL,CAAC,GAAG,CAAC,CAAL;YACA,CAAC,GAAG,EAAJ;UACD;;UAED,CAAC,CAAC,OAAF;;UACA,OAAO,CAAC,EAAR,EAAY,CAAC,CAAC,IAAF,CAAO,CAAP,CAAZ,CAAsB;;UACtB,CAAC,CAAC,OAAF;QACD;;QAED,CAAC,GAAG,EAAE,CAAC,MAAP;QACA,CAAC,GAAG,EAAE,CAAC,MAAP,CApDuB,CAsD7B;;QACM,IAAI,CAAC,GAAG,CAAJ,GAAQ,CAAZ,EAAe,CAAC,GAAG,EAAJ,EAAQ,EAAE,GAAG,EAAb,EAAiB,EAAE,GAAG,CAAtB,EAAyB,CAAC,GAAG,CAA7B,CAvDQ,CAyD7B;;QACM,KAAK,CAAC,GAAG,CAAT,EAAY,CAAZ,GAAgB;UACd,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAH,CAAF,GAAU,EAAE,CAAC,CAAD,CAAF,GAAQ,EAAE,CAAC,CAAD,CAAV,GAAgB,CAA3B,IAAgC,IAAhC,GAAuC,CAA3C;UACA,EAAE,CAAC,CAAD,CAAF,GAAQ,IAAI,KAAK,EAAE,CAAC,CAAD,CAAX,GAAiB,CAAjB,GAAqB,EAAE,CAAC,CAAD,CAAF,GAAQ,IAArC;QACD;;QAED,IAAI,CAAJ,EAAO;UACL,EAAE,GAAG,CAAC,CAAD,EAAI,MAAJ,CAAW,EAAX,CAAL;UACA,EAAE,EAAF;QACD,CAlEsB,CAoE7B;QACA;;;QACM,OAAO,SAAS,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAhB;MACD,CAvED;MA0EJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,SAAF,GAAc,CAAC,CAAC,EAAF,GAAO,UAAU,EAAV,EAAc,EAAd,EAAkB;QACrC,IAAI,CAAJ;QAAA,IAAO,CAAP;QAAA,IAAU,CAAV;QAAA,IACE,CAAC,GAAG,IADN;;QAGA,IAAI,EAAE,IAAI,IAAN,IAAc,EAAE,KAAK,CAAC,CAAC,EAA3B,EAA+B;UAC7B,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,GAAR,CAAR;UACA,IAAI,EAAE,IAAI,IAAV,EAAgB,EAAE,GAAG,aAAL,CAAhB,KACK,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAR;UAEL,OAAO,KAAK,CAAC,IAAI,SAAJ,CAAc,CAAd,CAAD,EAAmB,EAAnB,EAAuB,EAAvB,CAAZ;QACD;;QAED,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAR,CAAJ,EAAgB,OAAO,IAAP;QAChB,CAAC,GAAG,CAAC,CAAC,MAAF,GAAW,CAAf;QACA,CAAC,GAAG,CAAC,GAAG,QAAJ,GAAe,CAAnB;;QAEA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAD,CAAT,EAAc;UAEpB;UACQ,OAAO,CAAC,GAAG,EAAJ,IAAU,CAAjB,EAAoB,CAAC,IAAI,EAAL,EAAS,CAAC,EAA9B,CAAiC,CAHrB,CAKpB;;;UACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAD,CAAV,EAAe,CAAC,IAAI,EAApB,EAAwB,CAAC,IAAI,EAAL,EAAS,CAAC,EAAlC,CAAqC;QACtC;;QAED,IAAI,EAAE,IAAI,CAAC,CAAC,CAAF,GAAM,CAAN,GAAU,CAApB,EAAuB,CAAC,GAAG,CAAC,CAAC,CAAF,GAAM,CAAV;QAEvB,OAAO,CAAP;MACD,CA5BD;MA+BJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,SAAF,GAAc,UAAU,CAAV,EAAa;QACzB,QAAQ,CAAC,CAAD,EAAI,CAAC,gBAAL,EAAuB,gBAAvB,CAAR;QACA,OAAO,KAAK,KAAL,CAAW,OAAO,CAAlB,CAAP;MACD,CAHD;MAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,UAAF,GAAe,CAAC,CAAC,IAAF,GAAS,YAAY;QAClC,IAAI,CAAJ;QAAA,IAAO,CAAP;QAAA,IAAU,CAAV;QAAA,IAAa,GAAb;QAAA,IAAkB,CAAlB;QAAA,IACE,CAAC,GAAG,IADN;QAAA,IAEE,CAAC,GAAG,CAAC,CAAC,CAFR;QAAA,IAGE,CAAC,GAAG,CAAC,CAAC,CAHR;QAAA,IAIE,CAAC,GAAG,CAAC,CAAC,CAJR;QAAA,IAKE,EAAE,GAAG,cAAc,GAAG,CALxB;QAAA,IAME,IAAI,GAAG,IAAI,SAAJ,CAAc,KAAd,CANT,CADkC,CASxC;;QACM,IAAI,CAAC,KAAK,CAAN,IAAW,CAAC,CAAZ,IAAiB,CAAC,CAAC,CAAC,CAAD,CAAvB,EAA4B;UAC1B,OAAO,IAAI,SAAJ,CAAc,CAAC,CAAD,IAAM,CAAC,GAAG,CAAJ,KAAU,CAAC,CAAD,IAAM,CAAC,CAAC,CAAD,CAAjB,CAAN,GAA8B,GAA9B,GAAoC,CAAC,GAAG,CAAH,GAAO,IAAI,CAA9D,CAAP;QACD,CAZiC,CAcxC;;;QACM,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,CAAC,OAAO,CAAC,CAAD,CAAlB,CAAJ,CAfkC,CAiBxC;QACA;;QACM,IAAI,CAAC,IAAI,CAAL,IAAU,CAAC,IAAI,IAAI,CAAvB,EAA0B;UACxB,CAAC,GAAG,aAAa,CAAC,CAAD,CAAjB;UACA,IAAI,CAAC,CAAC,CAAC,MAAF,GAAW,CAAZ,IAAiB,CAAjB,IAAsB,CAA1B,EAA6B,CAAC,IAAI,GAAL;UAC7B,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,CAAC,CAAX,CAAJ;UACA,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAL,IAAU,CAAX,CAAR,IAAyB,CAAC,GAAG,CAAJ,IAAS,CAAC,GAAG,CAAtC,CAAJ;;UAEA,IAAI,CAAC,IAAI,IAAI,CAAb,EAAgB;YACd,CAAC,GAAG,OAAO,CAAX;UACD,CAFD,MAEO;YACL,CAAC,GAAG,CAAC,CAAC,aAAF,EAAJ;YACA,CAAC,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAC,OAAF,CAAU,GAAV,IAAiB,CAA5B,IAAiC,CAArC;UACD;;UAED,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,CAAJ;QACD,CAdD,MAcO;UACL,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAC,GAAG,EAAlB,CAAJ;QACD,CAnCiC,CAqCxC;QACA;QACA;QACA;;;QACM,IAAI,CAAC,CAAC,CAAF,CAAI,CAAJ,CAAJ,EAAY;UACV,CAAC,GAAG,CAAC,CAAC,CAAN;UACA,CAAC,GAAG,CAAC,GAAG,EAAR;UACA,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,CAAJ,CAHD,CAKlB;;UACQ,SAAU;YACR,CAAC,GAAG,CAAJ;YACA,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,CAAC,IAAF,CAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAX,CAAV,CAAX,CAAJ;;YAEA,IAAI,aAAa,CAAC,CAAC,CAAC,CAAH,CAAb,CAAmB,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,MAAmC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAH,CAAlB,EAAyB,KAAzB,CAA+B,CAA/B,EAAkC,CAAlC,CAAvC,EAA6E;cAEvF;cACA;cACA;cACY,IAAI,CAAC,CAAC,CAAF,GAAM,CAAV,EAAa,EAAE,CAAF;cACb,CAAC,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAC,GAAG,CAAZ,EAAe,CAAC,GAAG,CAAnB,CAAJ,CAN2E,CAQvF;cACA;cACA;;cACY,IAAI,CAAC,IAAI,MAAL,IAAe,CAAC,GAAD,IAAQ,CAAC,IAAI,MAAhC,EAAwC;gBAEpD;gBACA;gBACc,IAAI,CAAC,GAAL,EAAU;kBACR,KAAK,CAAC,CAAD,EAAI,CAAC,CAAC,CAAF,GAAM,cAAN,GAAuB,CAA3B,EAA8B,CAA9B,CAAL;;kBAEA,IAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,EAAX,CAAc,CAAd,CAAJ,EAAsB;oBACpB,CAAC,GAAG,CAAJ;oBACA;kBACD;gBACF;;gBAED,EAAE,IAAI,CAAN;gBACA,CAAC,IAAI,CAAL;gBACA,GAAG,GAAG,CAAN;cACD,CAhBD,MAgBO;gBAEnB;gBACA;gBACc,IAAI,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAF,IAAgB,CAAC,CAAC,MAAF,CAAS,CAAT,KAAe,GAA1C,EAA+C;kBAE7D;kBACgB,KAAK,CAAC,CAAD,EAAI,CAAC,CAAC,CAAF,GAAM,cAAN,GAAuB,CAA3B,EAA8B,CAA9B,CAAL;kBACA,CAAC,GAAG,CAAC,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,EAAX,CAAc,CAAd,CAAL;gBACD;;gBAED;cACD;YACF;UACF;QACF;;QAED,OAAO,KAAK,CAAC,CAAD,EAAI,CAAC,CAAC,CAAF,GAAM,cAAN,GAAuB,CAA3B,EAA8B,aAA9B,EAA6C,CAA7C,CAAZ;MACD,CAhGD;MAmGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,aAAF,GAAkB,UAAU,EAAV,EAAc,EAAd,EAAkB;QAClC,IAAI,EAAE,IAAI,IAAV,EAAgB;UACd,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,GAAR,CAAR;UACA,EAAE;QACH;;QACD,OAAO,MAAM,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX,EAAe,CAAf,CAAb;MACD,CAND;MASJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,OAAF,GAAY,UAAU,EAAV,EAAc,EAAd,EAAkB;QAC5B,IAAI,EAAE,IAAI,IAAV,EAAgB;UACd,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,GAAR,CAAR;UACA,EAAE,GAAG,EAAE,GAAG,KAAK,CAAV,GAAc,CAAnB;QACD;;QACD,OAAO,MAAM,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX,CAAb;MACD,CAND;MASJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,QAAF,GAAa,UAAU,EAAV,EAAc,EAAd,EAAkB,MAAlB,EAA0B;QACrC,IAAI,GAAJ;QAAA,IACE,CAAC,GAAG,IADN;;QAGA,IAAI,MAAM,IAAI,IAAd,EAAoB;UAClB,IAAI,EAAE,IAAI,IAAN,IAAc,EAAd,IAAoB,OAAO,EAAP,IAAa,QAArC,EAA+C;YAC7C,MAAM,GAAG,EAAT;YACA,EAAE,GAAG,IAAL;UACD,CAHD,MAGO,IAAI,EAAE,IAAI,OAAO,EAAP,IAAa,QAAvB,EAAiC;YACtC,MAAM,GAAG,EAAT;YACA,EAAE,GAAG,EAAE,GAAG,IAAV;UACD,CAHM,MAGA;YACL,MAAM,GAAG,MAAT;UACD;QACF,CAVD,MAUO,IAAI,OAAO,MAAP,IAAiB,QAArB,EAA+B;UACpC,MAAM,KAAK,CACR,cAAc,GAAG,0BAAjB,GAA8C,MADtC,CAAX;QAED;;QAED,GAAG,GAAG,CAAC,CAAC,OAAF,CAAU,EAAV,EAAc,EAAd,CAAN;;QAEA,IAAI,CAAC,CAAC,CAAN,EAAS;UACP,IAAI,CAAJ;UAAA,IACE,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CADR;UAAA,IAEE,EAAE,GAAG,CAAC,MAAM,CAAC,SAFf;UAAA,IAGE,EAAE,GAAG,CAAC,MAAM,CAAC,kBAHf;UAAA,IAIE,cAAc,GAAG,MAAM,CAAC,cAAP,IAAyB,EAJ5C;UAAA,IAKE,OAAO,GAAG,GAAG,CAAC,CAAD,CALf;UAAA,IAME,YAAY,GAAG,GAAG,CAAC,CAAD,CANpB;UAAA,IAOE,KAAK,GAAG,CAAC,CAAC,CAAF,GAAM,CAPhB;UAAA,IAQE,SAAS,GAAG,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,CAAd,CAAH,GAAsB,OARzC;UAAA,IASE,GAAG,GAAG,SAAS,CAAC,MATlB;UAWA,IAAI,EAAJ,EAAQ,CAAC,GAAG,EAAJ,EAAQ,EAAE,GAAG,EAAb,EAAiB,EAAE,GAAG,CAAtB,EAAyB,GAAG,IAAI,CAAhC;;UAER,IAAI,EAAE,GAAG,CAAL,IAAU,GAAG,GAAG,CAApB,EAAuB;YACrB,CAAC,GAAG,GAAG,GAAG,EAAN,IAAY,EAAhB;YACA,OAAO,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAApB,CAAV;;YACA,OAAO,CAAC,GAAG,GAAX,EAAgB,CAAC,IAAI,EAArB,EAAyB,OAAO,IAAI,cAAc,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,EAApB,CAA5B;;YACzB,IAAI,EAAE,GAAG,CAAT,EAAY,OAAO,IAAI,cAAc,GAAG,SAAS,CAAC,KAAV,CAAgB,CAAhB,CAA5B;YACZ,IAAI,KAAJ,EAAW,OAAO,GAAG,MAAM,OAAhB;UACZ;;UAED,GAAG,GAAG,YAAY,GACf,OAAO,IAAI,MAAM,CAAC,gBAAP,IAA2B,EAA/B,CAAP,IAA6C,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,iBAAd,IAC5C,YAAY,CAAC,OAAb,CAAqB,IAAI,MAAJ,CAAW,SAAS,EAAT,GAAc,MAAzB,EAAiC,GAAjC,CAArB,EACD,QAAQ,MAAM,CAAC,sBAAP,IAAiC,EAAzC,CADC,CAD4C,GAG5C,YAHD,CADe,GAKf,OALH;QAMD;;QAED,OAAO,CAAC,MAAM,CAAC,MAAP,IAAiB,EAAlB,IAAwB,GAAxB,IAA+B,MAAM,CAAC,MAAP,IAAiB,EAAhD,CAAP;MACD,CApDD;MAuDJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,UAAF,GAAe,UAAU,EAAV,EAAc;QAC3B,IAAI,CAAJ;QAAA,IAAO,EAAP;QAAA,IAAW,EAAX;QAAA,IAAe,EAAf;QAAA,IAAmB,CAAnB;QAAA,IAAsB,GAAtB;QAAA,IAA2B,CAA3B;QAAA,IAA8B,EAA9B;QAAA,IAAkC,EAAlC;QAAA,IAAsC,CAAtC;QAAA,IAAyC,CAAzC;QAAA,IAA4C,CAA5C;QAAA,IACE,CAAC,GAAG,IADN;QAAA,IAEE,EAAE,GAAG,CAAC,CAAC,CAFT;;QAIA,IAAI,EAAE,IAAI,IAAV,EAAgB;UACd,CAAC,GAAG,IAAI,SAAJ,CAAc,EAAd,CAAJ,CADc,CAGtB;;UACQ,IAAI,CAAC,CAAC,CAAC,SAAF,EAAD,KAAmB,CAAC,CAAC,CAAF,IAAO,CAAC,CAAC,CAAF,KAAQ,CAAlC,KAAwC,CAAC,CAAC,EAAF,CAAK,GAAL,CAA5C,EAAuD;YACrD,MAAM,KAAK,CACR,cAAc,GAAG,WAAjB,IACE,CAAC,CAAC,SAAF,KAAgB,gBAAhB,GAAmC,kBADrC,IAC2D,OAAO,CAAC,CAAD,CAF1D,CAAX;UAGD;QACF;;QAED,IAAI,CAAC,EAAL,EAAS,OAAO,IAAI,SAAJ,CAAc,CAAd,CAAP;QAET,CAAC,GAAG,IAAI,SAAJ,CAAc,GAAd,CAAJ;QACA,EAAE,GAAG,EAAE,GAAG,IAAI,SAAJ,CAAc,GAAd,CAAV;QACA,EAAE,GAAG,EAAE,GAAG,IAAI,SAAJ,CAAc,GAAd,CAAV;QACA,CAAC,GAAG,aAAa,CAAC,EAAD,CAAjB,CArB2B,CAuBjC;QACA;;QACM,CAAC,GAAG,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,CAAb,GAAiB,CAA3B;QACA,CAAC,CAAC,CAAF,CAAI,CAAJ,IAAS,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,QAAX,IAAuB,CAAvB,GAA2B,QAAQ,GAAG,GAAtC,GAA4C,GAA7C,CAAjB;QACA,EAAE,GAAG,CAAC,EAAD,IAAO,CAAC,CAAC,UAAF,CAAa,CAAb,IAAkB,CAAzB,GAA8B,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,EAA1C,GAAgD,CAArD;QAEA,GAAG,GAAG,OAAN;QACA,OAAO,GAAG,IAAI,CAAd;QACA,CAAC,GAAG,IAAI,SAAJ,CAAc,CAAd,CAAJ,CA/B2B,CAiCjC;;QACM,EAAE,CAAC,CAAH,CAAK,CAAL,IAAU,CAAV;;QAEA,SAAW;UACT,CAAC,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;UACA,EAAE,GAAG,EAAE,CAAC,IAAH,CAAQ,CAAC,CAAC,KAAF,CAAQ,EAAR,CAAR,CAAL;UACA,IAAI,EAAE,CAAC,UAAH,CAAc,EAAd,KAAqB,CAAzB,EAA4B;UAC5B,EAAE,GAAG,EAAL;UACA,EAAE,GAAG,EAAL;UACA,EAAE,GAAG,EAAE,CAAC,IAAH,CAAQ,CAAC,CAAC,KAAF,CAAQ,EAAE,GAAG,EAAb,CAAR,CAAL;UACA,EAAE,GAAG,EAAL;UACA,CAAC,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAC,CAAC,KAAF,CAAQ,EAAE,GAAG,CAAb,CAAR,CAAJ;UACA,CAAC,GAAG,EAAJ;QACD;;QAED,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,KAAH,CAAS,EAAT,CAAD,EAAe,EAAf,EAAmB,CAAnB,EAAsB,CAAtB,CAAR;QACA,EAAE,GAAG,EAAE,CAAC,IAAH,CAAQ,EAAE,CAAC,KAAH,CAAS,EAAT,CAAR,CAAL;QACA,EAAE,GAAG,EAAE,CAAC,IAAH,CAAQ,EAAE,CAAC,KAAH,CAAS,EAAT,CAAR,CAAL;QACA,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAH,GAAO,CAAC,CAAC,CAAhB;QACA,CAAC,GAAG,CAAC,GAAG,CAAR,CApD2B,CAsDjC;;QACM,CAAC,GAAG,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,aAAZ,CAAH,CAA8B,KAA9B,CAAoC,CAApC,EAAuC,GAAvC,GAA6C,UAA7C,CACA,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,aAAZ,CAAH,CAA8B,KAA9B,CAAoC,CAApC,EAAuC,GAAvC,EADA,IACgD,CADhD,GACoD,CAAC,EAAD,EAAK,EAAL,CADpD,GAC+D,CAAC,EAAD,EAAK,EAAL,CADnE;QAGA,OAAO,GAAG,GAAV;QAEA,OAAO,CAAP;MACD,CA7DD;MAgEJ;AACA;AACA;;;MACI,CAAC,CAAC,QAAF,GAAa,YAAY;QACvB,OAAO,CAAC,OAAO,CAAC,IAAD,CAAf;MACD,CAFD;MAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,WAAF,GAAgB,UAAU,EAAV,EAAc,EAAd,EAAkB;QAChC,IAAI,EAAE,IAAI,IAAV,EAAgB,QAAQ,CAAC,EAAD,EAAK,CAAL,EAAQ,GAAR,CAAR;QAChB,OAAO,MAAM,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX,EAAe,CAAf,CAAb;MACD,CAHD;MAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MACI,CAAC,CAAC,QAAF,GAAa,UAAU,CAAV,EAAa;QACxB,IAAI,GAAJ;QAAA,IACE,CAAC,GAAG,IADN;QAAA,IAEE,CAAC,GAAG,CAAC,CAAC,CAFR;QAAA,IAGE,CAAC,GAAG,CAAC,CAAC,CAHR,CADwB,CAM9B;;QACM,IAAI,CAAC,KAAK,IAAV,EAAgB;UACd,IAAI,CAAJ,EAAO;YACL,GAAG,GAAG,UAAN;YACA,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,MAAM,GAAZ;UACZ,CAHD,MAGO;YACL,GAAG,GAAG,KAAN;UACD;QACF,CAPD,MAOO;UACL,IAAI,CAAC,IAAI,IAAT,EAAe;YACb,GAAG,GAAG,CAAC,IAAI,UAAL,IAAmB,CAAC,IAAI,UAAxB,GACH,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,CAAH,CAAd,EAAqB,CAArB,CADV,GAEH,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,CAAH,CAAd,EAAqB,CAArB,EAAwB,GAAxB,CAFf;UAGD,CAJD,MAIO,IAAI,CAAC,KAAK,EAAV,EAAc;YACnB,CAAC,GAAG,KAAK,CAAC,IAAI,SAAJ,CAAc,CAAd,CAAD,EAAmB,cAAc,GAAG,CAAjB,GAAqB,CAAxC,EAA2C,aAA3C,CAAT;YACA,GAAG,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,CAAH,CAAd,EAAqB,CAAC,CAAC,CAAvB,EAA0B,GAA1B,CAAlB;UACD,CAHM,MAGA;YACL,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,QAAQ,CAAC,MAAhB,EAAwB,MAAxB,CAAR;YACA,GAAG,GAAG,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,CAAH,CAAd,EAAqB,CAArB,EAAwB,GAAxB,CAAb,EAA2C,EAA3C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,IAArD,CAAjB;UACD;;UAED,IAAI,CAAC,GAAG,CAAJ,IAAS,CAAC,CAAC,CAAF,CAAI,CAAJ,CAAb,EAAqB,GAAG,GAAG,MAAM,GAAZ;QACtB;;QAED,OAAO,GAAP;MACD,CA/BD;MAkCJ;AACA;AACA;AACA;;;MACI,CAAC,CAAC,OAAF,GAAY,CAAC,CAAC,MAAF,GAAW,YAAY;QACjC,OAAO,OAAO,CAAC,IAAD,CAAd;MACD,CAFD;;MAKA,CAAC,CAAC,YAAF,GAAiB,IAAjB;MAEA,IAAI,YAAY,IAAI,IAApB,EAA0B,SAAS,CAAC,GAAV,CAAc,YAAd;MAE1B,OAAO,SAAP;IACD,CA7rFuB,CAgsF1B;IAEA;IACA;;;IAGE,SAAS,QAAT,CAAkB,CAAlB,EAAqB;MACnB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAZ;MACA,OAAO,CAAC,GAAG,CAAJ,IAAS,CAAC,KAAK,CAAf,GAAmB,CAAnB,GAAuB,CAAC,GAAG,CAAlC;IACD,CAzsFuB,CA4sF1B;;;IACE,SAAS,aAAT,CAAuB,CAAvB,EAA0B;MACxB,IAAI,CAAJ;MAAA,IAAO,CAAP;MAAA,IACE,CAAC,GAAG,CADN;MAAA,IAEE,CAAC,GAAG,CAAC,CAAC,MAFR;MAAA,IAGE,CAAC,GAAG,CAAC,CAAC,CAAD,CAAD,GAAO,EAHb;;MAKA,OAAO,CAAC,GAAG,CAAX,GAAe;QACb,CAAC,GAAG,CAAC,CAAC,CAAC,EAAF,CAAD,GAAS,EAAb;QACA,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,MAAjB;;QACA,OAAO,CAAC,EAAR,EAAY,CAAC,GAAG,MAAM,CAAtB,CAAwB;;QACxB,CAAC,IAAI,CAAL;MACD,CAXuB,CAa5B;;;MACI,KAAK,CAAC,GAAG,CAAC,CAAC,MAAX,EAAmB,CAAC,CAAC,UAAF,CAAa,EAAE,CAAf,MAAsB,EAAzC,EAA6C;;MAE7C,OAAO,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,CAAC,GAAG,CAAJ,IAAS,CAApB,CAAP;IACD,CA9tFuB,CAiuF1B;;;IACE,SAAS,OAAT,CAAiB,CAAjB,EAAoB,CAApB,EAAuB;MACrB,IAAI,CAAJ;MAAA,IAAO,CAAP;MAAA,IACE,EAAE,GAAG,CAAC,CAAC,CADT;MAAA,IAEE,EAAE,GAAG,CAAC,CAAC,CAFT;MAAA,IAGE,CAAC,GAAG,CAAC,CAAC,CAHR;MAAA,IAIE,CAAC,GAAG,CAAC,CAAC,CAJR;MAAA,IAKE,CAAC,GAAG,CAAC,CAAC,CALR;MAAA,IAME,CAAC,GAAG,CAAC,CAAC,CANR,CADqB,CASzB;;MACI,IAAI,CAAC,CAAD,IAAM,CAAC,CAAX,EAAc,OAAO,IAAP;MAEd,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAD,CAAb;MACA,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAD,CAAb,CAbqB,CAezB;;MACI,IAAI,CAAC,IAAI,CAAT,EAAY,OAAO,CAAC,GAAG,CAAC,GAAG,CAAH,GAAO,CAAC,CAAZ,GAAgB,CAAxB,CAhBS,CAkBzB;;MACI,IAAI,CAAC,IAAI,CAAT,EAAY,OAAO,CAAP;MAEZ,CAAC,GAAG,CAAC,GAAG,CAAR;MACA,CAAC,GAAG,CAAC,IAAI,CAAT,CAtBqB,CAwBzB;;MACI,IAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB,OAAO,CAAC,GAAG,CAAH,GAAO,CAAC,EAAD,GAAM,CAAN,GAAU,CAAV,GAAc,CAAC,CAA9B,CAzBK,CA2BzB;;MACI,IAAI,CAAC,CAAL,EAAQ,OAAO,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAAxB;MAER,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,MAAR,KAAmB,CAAC,GAAG,EAAE,CAAC,MAA1B,IAAoC,CAApC,GAAwC,CAA5C,CA9BqB,CAgCzB;;MACI,KAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,CAAhB,EAAmB,CAAC,EAApB,EAAwB,IAAI,EAAE,CAAC,CAAD,CAAF,IAAS,EAAE,CAAC,CAAD,CAAf,EAAoB,OAAO,EAAE,CAAC,CAAD,CAAF,GAAQ,EAAE,CAAC,CAAD,CAAV,GAAgB,CAAhB,GAAoB,CAApB,GAAwB,CAAC,CAAhC,CAjCvB,CAmCzB;;;MACI,OAAO,CAAC,IAAI,CAAL,GAAS,CAAT,GAAa,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAArC;IACD;IAGH;AACA;AACA;;;IACE,SAAS,QAAT,CAAkB,CAAlB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,IAA/B,EAAqC;MACnC,IAAI,CAAC,GAAG,GAAJ,IAAW,CAAC,GAAG,GAAf,IAAsB,CAAC,KAAK,SAAS,CAAC,CAAD,CAAzC,EAA8C;QAC5C,MAAM,KAAK,CACT,cAAc,IAAI,IAAI,IAAI,UAAZ,CAAd,IAAyC,OAAO,CAAP,IAAY,QAAZ,GACtC,CAAC,GAAG,GAAJ,IAAW,CAAC,GAAG,GAAf,GAAqB,iBAArB,GAAyC,mBADH,GAEtC,2BAFH,IAEkC,MAAM,CAAC,CAAD,CAH/B,CAAX;MAID;IACF,CApxFuB,CAuxF1B;;;IACE,SAAS,KAAT,CAAe,CAAf,EAAkB;MAChB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAF,CAAI,MAAJ,GAAa,CAArB;MACA,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAF,GAAM,QAAP,CAAR,IAA4B,CAA5B,IAAiC,CAAC,CAAC,CAAF,CAAI,CAAJ,IAAS,CAAT,IAAc,CAAtD;IACD;;IAGD,SAAS,aAAT,CAAuB,GAAvB,EAA4B,CAA5B,EAA+B;MAC7B,OAAO,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAb,GAAiB,GAAG,CAAC,MAAJ,CAAW,CAAX,IAAgB,GAAhB,GAAsB,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAvC,GAAsD,GAAvD,KACL,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,IADT,IACiB,CADxB;IAED;;IAGD,SAAS,YAAT,CAAsB,GAAtB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC;MAC/B,IAAI,GAAJ,EAAS,EAAT,CAD+B,CAGnC;;MACI,IAAI,CAAC,GAAG,CAAR,EAAW;QAEf;QACM,KAAK,EAAE,GAAG,CAAC,GAAG,GAAd,EAAmB,EAAE,CAArB,EAAwB,EAAE,IAAI,CAA9B,CAAgC;;QAChC,GAAG,GAAG,EAAE,GAAG,GAAX,CAJS,CAMf;MACK,CAPD,MAOO;QACL,GAAG,GAAG,GAAG,CAAC,MAAV,CADK,CAGX;;QACM,IAAI,EAAE,CAAF,GAAM,GAAV,EAAe;UACb,KAAK,EAAE,GAAG,CAAL,EAAQ,CAAC,IAAI,GAAlB,EAAuB,EAAE,CAAzB,EAA4B,EAAE,IAAI,CAAlC,CAAoC;;UACpC,GAAG,IAAI,EAAP;QACD,CAHD,MAGO,IAAI,CAAC,GAAG,GAAR,EAAa;UAClB,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAb,IAAkB,GAAlB,GAAwB,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA9B;QACD;MACF;;MAED,OAAO,GAAP;IACD,CA5zFuB,CA+zF1B;;;IAGE,SAAS,GAAG,KAAK,EAAjB;IACA,SAAS,CAAC,SAAD,CAAT,GAAuB,SAAS,CAAC,SAAV,GAAsB,SAA7C,CAn0FwB,CAq0F1B;;IAKS,IAAoC,MAAM,CAAC,OAA3C,EAAoD;MACzD,MAAA,CAAA,OAAA,GAAiB,SAAjB,CADyD,CAG7D;IACG,CAJM,MAIA;MACL,IAAI,CAAC,YAAL,EAAmB;QACjB,YAAY,GAAG,OAAO,IAAP,IAAe,WAAf,IAA8B,IAA9B,GAAqC,IAArC,GAA4C,MAA3D;MACD;;MAED,YAAY,CAAC,SAAb,GAAyB,SAAzB;IACD;EACF,CAr1FA,EAq1FEgB,cAr1FF;;;ACED,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,OAAA,EAAA,mBAAA,EAAA;MAAkBC,mBAAAA,KAAAA,KAAAA,C,EAAAA;IAAAA,mBAAAA,GAAsB,IAAtBA;;;EACxC,IAAMC,aAAa,GAAGL,MAAM,CAA5B,OAA4B,CAA5B;;EACA,IAAI,CAACK,aAAa,CAAbA,KAAAA,CAAL,WAAKA,CAAL,EAAuC;IACrC,OAAA,KAAA;EACD;;EACD,IAAMC,QAAQ,GAAG,IAAA,SAAA,CAAjB,aAAiB,CAAjB;EACA,IAAMC,KAAK,GAAGH,mBAAmB,GAAA,CAAA,GAAO,CAAxC,CAAA;EACA,OAAOE,QAAQ,CAARA,QAAAA,CAAAA,EAAAA,MAAAA,aAAAA,IAA2CA,QAAQ,CAARA,UAAAA,CAAAA,CAAAA,KAAlD,KAAA;AAPF,CAAA;;ACAA,SAAA,MAAA,CAAA,GAAA,EAAA,YAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,SAAA,EAAA;EAOEE,sBAAsB,GACpB,OAAA,sBAAA,KAAA,WAAA,GAAA,sBAAA,GADFA,KAAAA;EAKA,IAAIC,KAAK,GAAGC,GAAG,CAAHA,QAAAA,GAAAA,KAAAA,CAAZ,EAAYA,CAAZ;EAEA,IAAIC,QAAQ,GAAZ,KAAA;;EACA,IAAIF,KAAK,CAALA,CAAK,CAALA,KAAJ,GAAA,EAAsB;IACpBA,KAAK,CAALA,KAAAA;IACAE,QAAQ,GAARA,IAAAA;EACD;;EAED,IAAIC,YAAY,KAAhB,CAAA,EAAwB;IAEtB,OAAOH,KAAK,CAALA,MAAAA,GAAeG,YAAY,GAAlC,CAAA,EAAwC;MACtCH,KAAK,CAALA,OAAAA,CAAAA,GAAAA;IACD;;IAGDA,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAALA,MAAAA,GAAbA,YAAAA,EAAAA,CAAAA,EAAAA,GAAAA;;IAGA,OAAOA,KAAK,CAALA,MAAAA,GAAeA,KAAK,CAALA,OAAAA,CAAfA,GAAeA,CAAfA,IAAP,QAAA,EAAsD;MACpDA,KAAK,CAALA,IAAAA,CAAAA,GAAAA;IACD;;IAED,IAAA,sBAAA,EAA4B;MAC1B,IAAII,iBAAiB,GAArB,CAAA;;MACA,KAAK,IAAIC,CAAC,GAAGL,KAAK,CAALA,MAAAA,GAAb,CAAA,EAA+BK,CAAC,GAAhC,CAAA,EAAsCA,CAAtC,EAAA,EAA2C;QACzC,IAAIL,KAAK,CAALA,CAAK,CAALA,KAAJ,GAAA,EAAsB;UACpBI,iBAAiB,GAAGC,CAAC,GAArBD,CAAAA;UACA;QACD;MACF;;MACD,IAAME,aAAa,GAAGN,KAAK,CAALA,OAAAA,CAAAA,GAAAA,IAAAA,QAAAA,GAAtB,CAAA;MACA,IAAMO,UAAU,GAAGf,IAAI,CAAJA,GAAAA,CAAAA,aAAAA,EAAnB,iBAAmBA,CAAnB;MACAQ,KAAK,GAAGA,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAARA,UAAQA,CAARA;IAVF,CAAA,MAWO;MAELA,KAAK,GAAGA,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAeA,KAAK,CAALA,OAAAA,CAAAA,GAAAA,IAAAA,QAAAA,GAAvBA,CAAQA,CAARA;IACD;EACF;;EAED,IAAA,SAAA,EAAe;IAEbA,KAAK,GAAGA,KAAK,CAAbA,OAAQA,EAARA;IACA,IAAMQ,SAAS,GAAGL,YAAY,GAC1BH,KAAK,CAALA,MAAAA,GAAeA,KAAK,CAALA,OAAAA,CAAfA,GAAeA,CAAfA,GAD0B,CAAA,GAE1BA,KAAK,CAFT,MAAA;IAGA,IAAMS,KAAK,GAAGjB,IAAI,CAAJA,KAAAA,CAAWgB,SAAS,GAAlC,CAAchB,CAAd;;IACA,KAAK,IAAIa,EAAC,GAAV,CAAA,EAAgBA,EAAC,IAAjB,KAAA,EAA4BA,EAA5B,EAAA,EAAiC;MAC/B,IAAMK,QAAQ,GAAGV,KAAK,CAALA,OAAAA,CAAAA,GAAAA,IAAqB,IAArBA,EAAAA,GAAjB,EAAA;;MACA,IAAIU,QAAQ,KAAKV,KAAK,CAAtB,MAAA,EAA+B;QAC7BA,KAAK,CAALA,MAAAA,CAAAA,QAAAA,EAAAA,CAAAA,EAAAA,GAAAA;MACD;IACF;;IACDA,KAAK,GAAGA,KAAK,CAAbA,OAAQA,EAARA;EACD;;EAED,IAAMW,eAAe,GAAG,KAAK,CAAL,KAAA,CACfX,KAAK,CAALA,OAAAA,CAAAA,GAAAA,IADe,CAAA,EAAA,KAAA,CAEf,UAAA,KAAA,EAAA;IAAA,OAAWY,KAAK,CAALA,QAAAA,OAAX,GAAA;EAFT,CAAwB,CAAxB;EAIA,IAAMC,MAAM,GAAGb,KAAK,CAALA,IAAAA,CAAf,EAAeA,CAAf;EAEA,IAAA,MAAA;;EACA,IAAA,eAAA,EAAqB;IACnBc,MAAM,GAAGD,MAAM,CAANA,KAAAA,CAAAA,GAAAA,EAATC,CAASD,CAATC;EADF,CAAA,MAEO;IACLA,MAAM,GACJC,QAAQ,KAARA,CAAAA,IAAkB,CAAlBA,sBAAAA,GACIF,MAAM,CAANA,KAAAA,CAAAA,GAAAA,EAAAA,IAAAA,CADJE,EACIF,CADJE,GADFD,MAAAA;EAID;;EAED,IAAA,QAAA,EAAc;IACZA,MAAM,GAAG,MAATA,MAAAA;EACD;;EAED,OAAA,MAAA;AACD;;AAUD,SAAwBE,UAAxB,CAAwBA,IAAxB,EAAwBA;MACtBC,KAAAA,GAAAA,IAAAA,CAAAA,K;MACAd,YAAAA,GAAAA,IAAAA,CAAAA,Y;MACAY,QAAAA,GAAAA,IAAAA,CAAAA,Q;mCACAhB,sB;MAAAA,sBAAAA,GAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAyB,KAAzBA,GAAyB,qB;4BACzBmB,S;MAAAA,SAAAA,GAAAA,cAAAA,KAAAA,KAAAA,CAAAA,GAAY,IAAZA,GAAY,c;;EAEZ,IAAI,CAACxB,eAAe,CAAA,KAAA,EAApB,KAAoB,CAApB,EAAoC;IAClC,MAAM,IAAA,KAAA,CAAN,eAAM,CAAN;EACD;;EAED,OAAOyB,MAAM,CAAA,KAAA,EAAA,YAAA,EAAA,QAAA,EAAA,sBAAA,EAAb,SAAa,CAAb;AAOD;;ACtHM,IAAMJ,QAAQ,GAAd,CAAA;AACA,IAAMZ,YAAY,GAAlB,EAAA;AACA,IAAMiB,QAAQ,GAAd,MAAA;;ACkBP,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAA;EACxB,OACE,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA;mBAEIC,KAAK,CAALA,aAAK,CAALA,GAAuBA,KAAK,CAA5BA,aAA4B,CAA5BA,GAA8C;EAFlD,CAAA,EAKE,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM7C,SAAS,EAAC;EAAhB,CAAA,EANJ,KAMI,CALF,CADF;AADF,CAAA;;AAYA,IAAM8C,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAA;EACtB,IACEC,KADF,GAKIF,KALJ,CAAA,KAAA;EAAA,IAAA,qBAAA,GAKIA,KALJ,CAAA,sBAAA;EAAA,IAEEvB,sBAFF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,qBAAA;EAAA,IAAA,gBAAA,GAKIuB,KALJ,CAAA,SAAA;EAAA,IAGEG,SAHF,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,gBAAA;EAAA,IAAA,eAAA,GAKIH,KALJ,CAAA,QAAA;EAAA,IAIEF,UAJF,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAAA,eAAA;EAMA,IAAML,UAAQ,GACZO,KAAK,CAALA,QAAAA,KAAAA,SAAAA,GAA+BA,KAAK,CAApCA,QAAAA,GADF,QAAA;EAEA,IAAMnB,cAAY,GAChBmB,KAAK,CAALA,YAAAA,KAAAA,SAAAA,GAAmCA,KAAK,CAAxCA,YAAAA,GADF,YAAA;EAGA,IAAMI,gBAAgB,GAAGV,UAAU,CAAC;IAClCC,KAAK,EAD6B,KAAA;IAElCd,YAAY,EAFsB,cAAA;IAGlCY,QAAQ,EAH0B,UAAA;IAIlChB,sBAAsB,EAAtBA;EAJkC,CAAD,CAAnC;EAOA,IAAM4B,UAAU,GAAGD,gBAAgB,CAAhBA,KAAAA,CAAnB,GAAmBA,CAAnB;EACA,IAAME,aAAa,GAAGD,UAAU,CAAVA,MAAAA,KAAtB,CAAA;EACA,IAAME,SAAS,GAAGH,gBAAgB,KAAlC,GAAA;;EAEA,IAAIX,UAAQ,GAARA,CAAAA,IAAAA,aAAAA,IAAJ,SAAA,EAAgD;IAC9C,IAAIe,KAAK,GAAT,EAAA;;IAEA,KAAK,IAAIzB,CAAC,GAAV,CAAA,EAAgBA,CAAC,IAAjB,UAAA,EAA+BA,CAA/B,EAAA,EAAoC;MAClCyB,KAAK,GAAGA,KAAK,GAAbA,GAAAA;IACD;;IAEDH,UAAU,CAAVA,IAAAA,CAAAA,KAAAA;EACD;;EAED,OACE,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA;mBAEIL,KAAK,CAALA,aAAK,CAALA,GAAuBA,KAAK,CAA5BA,aAA4B,CAA5BA,GAA8C;EAFlD,CAAA,EAKE,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM7C,SAAS,EAAC;EAAhB,CAAA,EAA8BkD,UAAU,CAL1C,CAK0C,CAAxC,CALF,EAMGA,UAAU,CAAVA,MAAAA,GAAAA,CAAAA,IACC,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAMlD,SAAS,EAAC;EAAhB,CAAA,EAAA,GAAA,EAA6BkD,UAAU,CAP3C,CAO2C,CAAvC,CAPJ,EASGF,SAAS,IACR,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAMhD,SAAS,EAAA,aAAY6C,KAAK,CAALA,KAAAA,GAAAA,YAAAA,GAAZ,EAAA;EAAf,CAAA,EAAA,MAAA,EACSA,KAAK,CAALA,KAAAA,GAAcA,KAAK,CAAnBA,KAAAA,GAZf,UAWM,CAVJ,CADF;AAjCF,CAAA;;AAoDA,IAAMS,UAAU,GAAG,SAAbA,UAAa,CAAA,KAAA,EAAA;EAUjB,IAAQP,KAAR,GAAkBF,KAAlB,CAAA,KAAA;EAEA,OAAO,CAAC5B,eAAe,CAAhB,KAAgB,CAAhB,GACH2B,iBAAiB,CADd,KACc,CADd,GAEHE,eAAe,CAFnB,KAEmB,CAFnB;AAZF,CAAA;;;;;;;;;;;;;;;;;ACpFA,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAAA,IAAA,EAAA;MACfC,MAAAA,GAAAA,IAAAA,CAAAA,M;MACAC,GAAAA,GAAAA,IAAAA,CAAAA,G;2BACAnB,Q;MAAAA,QAAAA,GAAAA,aAAAA,KAAAA,KAAAA,CAAAA,GAAW,CAAXA,GAAW,a;EAMX,IAAMoB,GAAG,GAAG,CAACC,UAAU,CAAVA,MAAU,CAAVA,GAAD,GAAA,EAAA,OAAA,CAAZ,QAAY,CAAZ;EACA,OAAO,UAAU,CAAV,GAAU,CAAV,CAAA,cAAA,CAAA,IAAA,EAAqC;IAC1CC,qBAAqB,EADqB,QAAA;IAE1CC,qBAAqB,EAAEvB;EAFmB,CAArC,CAAP;AAVF,CAAA;;;;ACGA,IAAMwB,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA;EAKf,IAAQN,MAAR,GAAuCX,KAAvC,CAAA,MAAA;EAAA,IAAgBY,GAAhB,GAAuCZ,KAAvC,CAAA,GAAA;EAAA,IAAwB9C,UAAxB,GAAA,6BAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;EACA,IAAMgD,KAAK,GAAA,aAASQ,QAAQ,CAAC;IAAEC,MAAM,EAAR,MAAA;IAAUC,GAAG,EAAHA;EAAV,CAAD,CAA5B;EACA,OACEtD,aAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;IAAOH,SAAS,EAAC;EAAjBG,CAAAA,EAAAA,UAAAA,CAAAA,EACG,KAAA,MAAA,KAAA,GAAA,GAAA,MAAA,GAFL,KACEA,CADF;AAPF,CAAA;;SCDwB4D,Q,CAASvB,K,EAAewB,kB,EAAAA;EAC9C,IAAMC,KAAK,GAAGzB,KAAK,CAALA,QAAAA,GAAAA,KAAAA,CAAd,GAAcA,CAAd;EACA,IAAMd,cAAY,GAAGsC,kBAAkB,KAAlBA,SAAAA,GAAAA,kBAAAA,GAArB,YAAA;;EAEA,IAAIC,KAAK,CAAT,CAAS,CAAT,EAAc;IAEZ,OAAOA,KAAK,CAALA,CAAK,CAALA,CAAAA,SAAAA,CAAmBA,KAAK,CAALA,CAAK,CAALA,CAAAA,MAAAA,GAAnBA,CAAAA,MAAAA,GAAAA,IAAmDA,KAAK,CAALA,CAAK,CAALA,CAAAA,MAAAA,GAA1D,CAAA,EAA+E;MAC7EA,KAAK,CAALA,CAAK,CAALA,GAAWA,KAAK,CAALA,CAAK,CAALA,CAAAA,SAAAA,CAAAA,CAAAA,EAAsBA,KAAK,CAALA,CAAK,CAALA,CAAAA,MAAAA,GAAjCA,CAAWA,CAAXA;IACD;EACF;;EAED,IAAIjC,KAAK,GAAGiC,KAAK,CAALA,CAAK,CAALA,GAAWvC,cAAY,GAAGuC,KAAK,CAALA,CAAK,CAALA,CAA1BA,MAAAA,GAAZ,cAAA;EAEAjC,KAAK,GAAGA,KAAK,GAALA,CAAAA,GAAAA,CAAAA,GAARA,KAAAA;EAEA,IAAIkC,WAAW,GAAGD,KAAK,CAALA,IAAAA,CAAAA,EAAAA,IAAiB,IAAA,MAAA,CAAnC,KAAmC,CAAnC;;EAGA,OAAOC,WAAW,CAAXA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,GAAAA,IAAuCA,WAAW,CAAXA,MAAAA,GAA9C,CAAA,EAAsE;IACpEA,WAAW,GAAGA,WAAW,CAAXA,SAAAA,CAAdA,CAAcA,CAAdA;EACD;;EAED,OAAA,WAAA;AACD;;SCxBuBC,gB,CACtBC,I,EAAAA;EAEA,IAAIA,IAAI,IAAIA,IAAI,CAAJA,QAAAA,CAAZ,cAAYA,CAAZ,EAA2C;IACzC,IAAI;MACF,IAAA,WAAA,GAAiDA,IAAI,CAAJA,KAAAA,CAAjD,GAAiDA,CAAjD;MAAA,IAASC,YAAT,GAAA,WAAA,CAAA,CAAA,CAAA;MAAA,IAAuBC,aAAvB,GAAA,WAAA,CAAA,CAAA,CAAA;MAAA,IAAyCC,IAAzC,GAAA,WAAA,CAAA,KAAA,CAAA,CAAA,CAAA;;MACA,IAAMC,OAAO,GAAGC,MAAM,CAANA,IAAAA,CAAAA,YAAAA,EAAAA,KAAAA,EAAAA,QAAAA,CAAhB,OAAgBA,CAAhB;;MACA,IAAA,OAAA,EAAa;QACX,IAAMC,oBAAoB,GAAG,IAAA,SAAA,CAC3B,OAAOJ,aAAa,CAAbA,OAAAA,CAAAA,IAAAA,EADoB,EACpBA,CADoB,EAAA,QAAA,CAA7B,EAA6B,CAA7B;QAGA,OAAO;UACLE,OAAO,EADF,OAAA;UAELE,oBAAoB,EAApBA;QAFK,CAAP;MAJF,CAAA,MAQO;QACL,OAAO;UACLF,OAAO,EADF,EAAA;UAELE,oBAAoB,EAAE;QAFjB,CAAP;MAID;IAhBH,CAAA,CAiBE,OAAA,CAAA,EAAU;MACV,OAAO;QACLF,OAAO,EADF,EAAA;QAELE,oBAAoB,EAAE;MAFjB,CAAP;IAID;EACF;;EACD,OAAO;IACLF,OAAO,EADF,EAAA;IAELE,oBAAoB,EAAE;EAFjB,CAAP;AAID;;AChCD,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAA,MAAA,EAAA;EAEpB,IAAA,aAAA,GAAyBnB,MAAM,CAANA,KAAAA,CAAzB,GAAyBA,CAAzB;EAAA,IAAKoB,MAAL,GAAA,aAAA,CAAA,CAAA,CAAA;EAAA,IAAatC,QAAb,GAAA,aAAA,CAAA,CAAA,CAAA;;EACA,IAAA,QAAA,EAAc;IACZ,OAAOA,QAAQ,CAARA,MAAAA,CAAgBA,QAAQ,CAARA,MAAAA,GAAhBA,CAAAA,MAAP,GAAA,EAAqD;MACnDA,QAAQ,GAAGA,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAkB,CAA7BA,CAAWA,CAAXA;IACD;EACF;;EACD,IAAMuC,MAAM,GAAGvC,QAAQ,GAAG,CAAA,MAAA,EAAA,QAAA,EAAA,IAAA,CAAH,GAAG,CAAH,GAAvB,MAAA;EACA,IAAMlB,QAAQ,GAAG,IAAA,SAAA,CAAjB,MAAiB,CAAjB;EACA,OAAOA,QAAQ,CAARA,QAAAA,CAAAA,EAAAA,MAAAA,MAAAA,IAAoCA,QAAQ,CAARA,UAAAA,CAAAA,CAAAA,KAA3C,CAAA;AAVF,CAAA;;ACyBA,IAAM0D,eAAe,GAAG;EACtBC,IAAI,EADkB,gEAAA;EAEtBC,EAAE,EAAE;AAFkB,CAAxB;;AAIA,SAAwBC,iBAAxB,CAAwBA,IAAxB,EAAwBA;8BACtBC,W;MAAAA,WAAAA,GAAAA,gBAAAA,KAAAA,KAAAA,CAAAA,GAAc,OAAdA,GAAc,gB;MACdC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACMC,SAAAA,GAAAA,IAAAA,CAANjB,I;MACAkB,cAAAA,GAAAA,IAAAA,CAAAA,c;MACAC,gBAAAA,GAAAA,IAAAA,CAAAA,gB;kCACAC,e;MAAAA,eAAAA,GAAAA,oBAAAA,KAAAA,KAAAA,CAAAA,GAAkB,YAAlBA,GAAkB,oB;MAClBC,OAAAA,GAAAA,IAAAA,CAAAA,O;EAEA,IAAMrB,IAAI,GAAGiB,SAAS,IAAtB,EAAA;EACA,IAAMK,aAAa,GAAGzE,eAAe,CAAfA,QAAe,CAAfA,GAAAA,QAAAA,GAAtB,WAAA;EACA,IAAM0E,aAAa,GAAGhB,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAAtB,eAAA;EACA,IAAMiB,WAAW,GAAG,IAAA,WAAA,CAAgB;IAClCC,KAAK,EAAE,IAAA,KAAA,CAD2B,CAC3B,CAD2B;IAElC9C,KAAK,EAAE+C,OAAO,CAFoB,IAE3BA,EAF2B;IAGlCC,QAAQ,EAAE,IAAA,OAAA,CAAYjB,eAAe,CAHH,EAGxB,CAHwB;IAIlCM,QAAQ,EAAE,IAAA,QAAA,CAAaY,QAAQ,CAJG,aAIH,CAArB,CAJwB;IAKlCb,QAAQ,EAAE,IAAA,QAAA,CAAaa,QAAQ,CALG,aAKH,CAArB,CALwB;IAMlC5B,IAAI,EAAE,IAAA,kBAAA,CAAuBA,IAAI,CANC,IAMLA,EAAvB,CAN4B;IAOlC6B,OAAO,EAAE,IAAA,OAAA,CAPyB,OAOzB,CAPyB;IAQlCC,OAAO,EAAE,IAAA,kBAAA,CAAA,CAAA;EARyB,CAAhB,CAApB;EAWA,IAAMC,aAAa,GAAG,IAAtB,aAAsB,EAAtB;EACAA,aAAa,CAAbA,WAAAA,GAA4B,IAAA,QAAA,CAAaH,QAAQ,CAAjDG,WAAiD,CAArB,CAA5BA;EACAA,aAAa,CAAbA,cAAAA,GAA+BH,QAAQ,CAAvCG,cAAuC,CAAvCA;EACAA,aAAa,CAAbA,gBAAAA,GAAiC,IAAA,gBAAA,CAC/BxC,UAAU,CADZwC,gBACY,CADqB,CAAjCA;;EAGA,IAAI;IACF,IAAMC,KAAK,GAAGR,WAAW,CAAXA,UAAAA,CAAd,aAAcA,CAAd;IACA,IAAMS,GAAG,GAAGD,KAAK,CAALA,QAAAA,CAAZ,EAAYA,CAAZ;IACA,OAAA,GAAA;EAHF,CAAA,CAIE,OAAA,GAAA,EAAY;IACZE,OAAO,CAAPA,KAAAA,CAAAA,+BAAAA,EAAAA,GAAAA;IACA,OAAA,GAAA;EACD;AACF;;IChEYC,EAAE,GAAG;EAAEzC,QAAQ,EAAV,QAAA;EAAYjE,IAAI,EAAhB,IAAA;EAAkByD,UAAU,EAAVA;AAAlB,C;AAIlB,IAIakD,UAAU,GAAG;EACxBjE,UAAU,EADc,UAAA;EAExBwB,QAAQ,EAFgB,QAAA;EAGxBI,gBAAgB,EAHQ,gBAAA;EAIxBc,iBAAiB,EAAjBA;AAJwB,CAJ1B;AAaA,IACawB,OAAO,GAAG;EACrBlD,QAAQ,EAARA;AADqB,CADvB;AAOA,IAEamD,UAAU,GAAG;EAAEzF,eAAe,EAAjB,eAAA;EAAmB0D,aAAa,EAAbA;AAAnB,CAF1B","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useDebounce = (value: any, timeout: number) => {\n  const [state, setState] = useState(value);\n\n  const effect = () => {\n    const handler = setTimeout(() => setState(value), timeout);\n\n    return () => clearTimeout(handler);\n  };\n\n  useEffect(effect, [value]);\n\n  return state;\n};\n\nexport default useDebounce;\n","import * as React from \"react\";\nimport useDebounce from \"helpers/useDebounce\";\n\nconst Trim = ({\n  text,\n  \"data-testid\": dataTestId,\n  className = \"\",\n}: {\n  text: string;\n  \"data-testid\"?: string;\n  className?: string;\n}) => {\n  const [debounce, setDebounce] = React.useState(0);\n\n  const [overflow, setOverflow] = React.useState(false);\n  const trimRef = React.useRef(document.createElement(\"span\"));\n  const hiddenTextRef = React.useRef(document.createElement(\"span\"));\n\n  const debounceTracker = useDebounce(debounce, 100);\n\n  const listener = () => {\n    setDebounce(debounce + 1);\n  };\n\n  const effect = () => {\n    window.addEventListener(\"resize\", listener);\n    return () => {\n      window.removeEventListener(\"resize\", listener);\n    };\n  };\n\n  React.useEffect(effect, [debounce]);\n\n  React.useEffect(() => {\n    if (trimRef.current && hiddenTextRef.current) {\n      const diff =\n        hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n      setOverflow(diff > 1);\n    }\n  }, [debounceTracker]);\n\n  return (\n    <span\n      ref={trimRef}\n      className={`trim ${overflow ? \"overflow\" : \"\"}`}\n      data-testid={dataTestId}\n    >\n      <span ref={hiddenTextRef} className=\"hidden-text-ref\">\n        {text}\n      </span>\n\n      {overflow ? (\n        <React.Fragment>\n          <span className=\"left\">\n            <span className={className}>\n              {String(text).substring(0, Math.floor(text.length / 2))}\n            </span>\n          </span>\n          <span className={`ellipsis ${className}`}>...</span>\n          <span className=\"right\">\n            <span className={className}>\n              {String(text).substring(Math.ceil(text.length / 2))}\n            </span>\n          </span>\n        </React.Fragment>\n      ) : (\n        <span className={className}>{text}</span>\n      )}\n    </span>\n  );\n};\n\nexport default Trim;\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","import BigNumber from 'bignumber.js';\n\nconst stringIsInteger = (integer: string, positiveNumbersOnly = true) => {\n  const stringInteger = String(integer);\n  if (!stringInteger.match(/^[-]?\\d+$/)) {\n    return false;\n  }\n  const bNparsed = new BigNumber(stringInteger);\n  const limit = positiveNumbersOnly ? 0 : -1;\n  return bNparsed.toString(10) === stringInteger && bNparsed.comparedTo(0) >= limit;\n};\n\nexport default stringIsInteger;\n","import stringIsInteger from \"validation/stringIsInteger\";\n\nfunction format(\n  big: string,\n  denomination: number,\n  decimals: number,\n  showLastNonZeroDecimal: boolean,\n  addCommas: boolean\n) {\n  showLastNonZeroDecimal =\n    typeof showLastNonZeroDecimal !== \"undefined\"\n      ? showLastNonZeroDecimal\n      : false;\n\n  let array = big.toString().split(\"\");\n\n  let negative = false;\n  if (array[0] === \"-\") {\n    array.shift();\n    negative = true;\n  }\n\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift(\"0\");\n    }\n\n    // add our dot\n    array.splice(array.length - denomination, 0, \".\");\n\n    // make sure there are enough decimals after the dot\n    while (array.length - array.indexOf(\".\") <= decimals) {\n      array.push(\"0\");\n    }\n\n    if (showLastNonZeroDecimal) {\n      let nonZeroDigitIndex = 0;\n      for (let i = array.length - 1; i > 0; i--) {\n        if (array[i] !== \"0\") {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n      const decimalsIndex = array.indexOf(\".\") + decimals + 1;\n      const sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      array = array.slice(0, array.indexOf(\".\") + decimals + 1);\n    }\n  }\n\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    const reference = denomination\n      ? array.length - array.indexOf(\".\") - 1\n      : array.length;\n    const count = Math.floor(reference / 3);\n    for (let i = 1; i <= count; i++) {\n      const position = array.indexOf(\".\") + 3 * i + i;\n      if (position !== array.length) {\n        array.splice(position, 0, \",\");\n      }\n    }\n    array = array.reverse();\n  }\n\n  const allDecimalsZero = array\n    .slice(array.indexOf(\".\") + 1)\n    .every((digit) => digit.toString() === \"0\");\n\n  const string = array.join(\"\");\n\n  let output;\n  if (allDecimalsZero) {\n    output = string.split(\".\")[0];\n  } else {\n    output =\n      decimals === 0 && !showLastNonZeroDecimal\n        ? string.split(\".\").join(\"\")\n        : string;\n  }\n\n  if (negative) {\n    output = \"-\" + output;\n  }\n\n  return output;\n}\n\ninterface DenominateType {\n  input: string;\n  denomination: number;\n  decimals: number;\n  showLastNonZeroDecimal: boolean;\n  addCommas?: boolean;\n}\n\nexport default function denominate({\n  input,\n  denomination,\n  decimals,\n  showLastNonZeroDecimal = false,\n  addCommas = true,\n}: DenominateType): string {\n  if (!stringIsInteger(input, false)) {\n    throw new Error(\"Invalid input\");\n  }\n\n  return format(\n    input,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas\n  );\n}\n","export const decimals: number = 4;\nexport const denomination: number = 18;\nexport const erdLabel = \"EGLD\";\n","import React from \"react\";\nimport stringIsInteger from \"validation/stringIsInteger\";\nimport denominate from \"../../operations/denominate\";\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals,\n  erdLabel as configErdLabel,\n} from \"config\";\n\nexport interface DenominateType {\n  value: string;\n  showLastNonZeroDecimal?: boolean;\n  showLabel?: boolean;\n  token?: string;\n  decimals?: number;\n  denomination?: number;\n  erdLabel?: string;\n  \"data-testid\"?: string;\n}\n\nconst denominateInvalid = (props: DenominateType) => {\n  return (\n    <span\n      data-testid={\n        props[\"data-testid\"] ? props[\"data-testid\"] : \"denominateComponent\"\n      }\n    >\n      <span className=\"int-amount\">...</span>\n    </span>\n  );\n};\n\nconst denominateValid = (props: DenominateType) => {\n  const {\n    value,\n    showLastNonZeroDecimal = false,\n    showLabel = true,\n    erdLabel = configErdLabel,\n  } = props;\n  const decimals =\n    props.decimals !== undefined ? props.decimals : configDecimals;\n  const denomination =\n    props.denomination !== undefined ? props.denomination : configDenomination;\n\n  const denominatedValue = denominate({\n    input: value,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n  });\n\n  const valueParts = denominatedValue.split(\".\");\n  const hasNoDecimals = valueParts.length === 1;\n  const isNotZero = denominatedValue !== \"0\";\n\n  if (decimals > 0 && hasNoDecimals && isNotZero) {\n    let zeros = \"\";\n\n    for (let i = 1; i <= decimals; i++) {\n      zeros = zeros + \"0\";\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return (\n    <span\n      data-testid={\n        props[\"data-testid\"] ? props[\"data-testid\"] : \"denominateComponent\"\n      }\n    >\n      <span className=\"int-amount\">{valueParts[0]}</span>\n      {valueParts.length > 1 && (\n        <span className=\"decimals\">.{valueParts[1]}</span>\n      )}\n      {showLabel && (\n        <span className={`symbol ${props.token ? \"text-muted\" : \"\"}`}>\n          &nbsp;{props.token ? props.token : erdLabel}\n        </span>\n      )}\n    </span>\n  );\n};\n\nconst Denominate = (props: {\n  value: string;\n  showLastNonZeroDecimal?: boolean;\n  showLabel?: boolean;\n  token?: string;\n  decimals?: number;\n  denomination?: number;\n  erdLabel?: string;\n  \"data-testid\"?: string;\n}) => {\n  const { value } = props;\n\n  return !stringIsInteger(value)\n    ? denominateInvalid(props)\n    : denominateValid(props);\n};\n\nexport default Denominate;\n","const usdValue = ({\n  amount,\n  usd,\n  decimals = 2,\n}: {\n  amount: string;\n  usd: number;\n  decimals?: number;\n}) => {\n  const sum = (parseFloat(amount) * usd).toFixed(decimals);\n  return parseFloat(sum).toLocaleString('en', {\n    maximumFractionDigits: decimals,\n    minimumFractionDigits: decimals,\n  });\n};\n\nexport default usdValue;\n","import * as React from \"react\";\nimport usdValue from \"helpers/usdValue\";\n\nconst UsdValue = (props: {\n  amount: string;\n  usd: number;\n  \"data-testid\"?: string;\n}) => {\n  const { amount, usd, ...dataTestId } = props;\n  const value = `≈ $${usdValue({ amount, usd })}`;\n  return (\n    <small className=\"form-text text-secondary mt-0\" {...dataTestId}>\n      {`${amount}` === \"0\" ? \"= $0\" : value}\n    </small>\n  );\n};\n\nexport default UsdValue;\n","import { denomination as configDenomination } from 'config';\n\nexport default function nominate(input: string, customDenomination?: number) {\n  const parts = input.toString().split('.');\n  const denomination = customDenomination !== undefined ? customDenomination : configDenomination;\n\n  if (parts[1]) {\n    // remove trailing zeros\n    while (parts[1].substring(parts[1].length - 1) === '0' && parts[1].length > 1) {\n      parts[1] = parts[1].substring(0, parts[1].length - 1);\n    }\n  }\n\n  let count = parts[1] ? denomination - parts[1].length : denomination;\n\n  count = count < 0 ? 0 : count;\n\n  let transformed = parts.join('') + '0'.repeat(count);\n\n  // remove beginning zeros\n  while (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n    transformed = transformed.substring(1);\n  }\n\n  return transformed;\n}\n","import BigNumber from \"bignumber.js\";\r\nexport default function getTokenFromData(\r\n  data?: string\r\n): { tokenId: string; nominatedTokenAmount: string } {\r\n  if (data && data.includes(\"ESDTTransfer\")) {\r\n    try {\r\n      const [, encodedToken, encodedAmount, ...rest] = data.split(\"@\");\r\n      const tokenId = Buffer.from(encodedToken, \"hex\").toString(\"ascii\");\r\n      if (tokenId) {\r\n        const nominatedTokenAmount = new BigNumber(\r\n          \"0x\" + encodedAmount.replace(\"0x\", \"\")\r\n        ).toString(10);\r\n        return {\r\n          tokenId,\r\n          nominatedTokenAmount,\r\n        };\r\n      } else {\r\n        return {\r\n          tokenId: \"\",\r\n          nominatedTokenAmount: \"\",\r\n        };\r\n      }\r\n    } catch (e) {\r\n      return {\r\n        tokenId: \"\",\r\n        nominatedTokenAmount: \"\",\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    tokenId: \"\",\r\n    nominatedTokenAmount: \"\",\r\n  };\r\n}\r\n","import BigNumber from \"bignumber.js\";\r\nconst stringIsFloat = (amount: string) => {\r\n  // tslint:disable-next-line\r\n  let [wholes, decimals] = amount.split(\".\");\r\n  if (decimals) {\r\n    while (decimals.charAt(decimals.length - 1) === \"0\") {\r\n      decimals = decimals.slice(0, -1);\r\n    }\r\n  }\r\n  const number = decimals ? [wholes, decimals].join(\".\") : wholes;\r\n  const bNparsed = new BigNumber(number);\r\n  return bNparsed.toString(10) === number && bNparsed.comparedTo(0) >= 0;\r\n};\r\nexport default stringIsFloat;\r\n","import {\r\n  Transaction,\r\n  Nonce,\r\n  Balance,\r\n  GasPrice,\r\n  GasLimit,\r\n  TransactionPayload,\r\n  ChainID,\r\n  TransactionVersion,\r\n  Address,\r\n  NetworkConfig,\r\n  GasPriceModifier,\r\n} from \"@elrondnetwork/erdjs\";\r\n\r\nimport stringIsInteger from \"validation/stringIsInteger\";\r\nimport stringIsFloat from \"validation/stringIsFloat\";\r\ninterface CalculateFeeLimitType {\r\n  gasLimit: string;\r\n  gasPrice: string;\r\n  data: string;\r\n  gasPerDataByte: string;\r\n  gasPriceModifier: string;\r\n  chainId: string;\r\n  minGasLimit?: string;\r\n  defaultGasPrice?: string;\r\n}\r\nconst placeholderData = {\r\n  from: \"erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa\",\r\n  to: \"erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa\",\r\n};\r\nexport default function calculateFeeLimit({\r\n  minGasLimit = \"50000\",\r\n  gasLimit,\r\n  gasPrice,\r\n  data: inputData,\r\n  gasPerDataByte,\r\n  gasPriceModifier,\r\n  defaultGasPrice = \"1000000000\",\r\n  chainId,\r\n}: CalculateFeeLimitType) {\r\n  const data = inputData || \"\";\r\n  const validGasLimit = stringIsInteger(gasLimit) ? gasLimit : minGasLimit;\r\n  const validGasPrice = stringIsFloat(gasPrice) ? gasPrice : defaultGasPrice;\r\n  const transaction = new Transaction({\r\n    nonce: new Nonce(0),\r\n    value: Balance.Zero(),\r\n    receiver: new Address(placeholderData.to),\r\n    gasPrice: new GasPrice(parseInt(validGasPrice)),\r\n    gasLimit: new GasLimit(parseInt(validGasLimit)),\r\n    data: new TransactionPayload(data.trim()),\r\n    chainID: new ChainID(chainId),\r\n    version: new TransactionVersion(1),\r\n  });\r\n\r\n  const networkConfig = new NetworkConfig();\r\n  networkConfig.MinGasLimit = new GasLimit(parseInt(minGasLimit));\r\n  networkConfig.GasPerDataByte = parseInt(gasPerDataByte);\r\n  networkConfig.GasPriceModifier = new GasPriceModifier(\r\n    parseFloat(gasPriceModifier)\r\n  );\r\n  try {\r\n    const bNfee = transaction.computeFee(networkConfig);\r\n    const fee = bNfee.toString(10);\r\n    return fee;\r\n  } catch (err) {\r\n    console.error(\"Unable to calculate fee limit\", err);\r\n    return \"0\";\r\n  }\r\n}\r\n","//#region comopnents\nimport Trim from \"components/Trim\";\nimport Denominate from \"components/Denominate\";\nimport UsdValue from \"components/UsdValue\";\nexport const Ui = { UsdValue, Trim, Denominate };\n//#endregion\n\n//#region operations\nimport denominate from \"./operations/denominate\";\nimport nominate from \"./operations/nominate\";\nimport getTokenFromData from \"./operations/getTokenFromData\";\nimport calculateFeeLimit from \"./operations/calculateFeeLimit\";\nexport const operations = {\n  denominate,\n  nominate,\n  getTokenFromData,\n  calculateFeeLimit,\n};\n//#endregion\n\n//#region helpers\nimport usdValue from \"./helpers/usdValue\";\nexport const helpers = {\n  usdValue,\n};\n//#endregion\n\n//#region validation\nimport stringIsInteger from \"./validation/stringIsInteger\";\nimport stringIsFloat from \"./validation/stringIsFloat\";\nexport const validation = { stringIsInteger, stringIsFloat };\n//#endregion\n"]},"metadata":{},"sourceType":"module"}