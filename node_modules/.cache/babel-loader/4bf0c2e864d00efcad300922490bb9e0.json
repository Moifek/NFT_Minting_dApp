{"ast":null,"code":"import { SmartContract, Account, parseUserKey, UserSigner, GasLimit, Address, ContractFunction, Balance, U32Value } from '@elrondnetwork/erdjs';\nimport { core } from '@elrondnetwork/elrond-core-js';\nimport data from './wallet.json';\nexport const getMintTransaction = (contractAddress, baseGasLimit, tokensAmount) => {\n  const tokens = tokensAmount || 1;\n  const tokenSellingPrice = \"500000000000000000\";\n  const contract = new SmartContract({\n    address: new Address(contractAddress)\n  });\n  return contract.call({\n    func: new ContractFunction(\"getNftPrice\"),\n    gasLimit: new GasLimit(baseGasLimit + baseGasLimit / 1.4 * (tokensAmount - 1)),\n    args: [new U32Value(tokens)],\n    value: Balance.fromString(tokenSellingPrice).times(tokens)\n  });\n};\nexport const commonTxOperations = async (tx, account, signer, provider) => {\n  tx.setNonce(account.nonce);\n  account.incrementNonce();\n  signer.sign(tx);\n  await tx.send(provider);\n  await tx.awaitExecuted(provider);\n  const txHash = tx.getHash();\n  console.log(`Transaction: /transactions/${txHash}`);\n};\nexport const prepareUserAccount = async walletPemKey => {\n  const userKey = parseUserKey(walletPemKey);\n  const address = userKey.generatePublicKey().toAddress();\n  return new Account(address);\n};\nexport const publicEndpointSetup = async provider => {\n  let keyFileObject = JSON.parse(JSON.stringify(data)); // Provider type based on initial configuration\n\n  let account = new core.account();\n  const userAccount = await account.loadFromKeyFile(keyFileObject, \"u!D?G8Tf48fYL28\");\n  console.log(userAccount);\n  const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n  console.log(signer);\n  return {\n    signer,\n    userAccount,\n    provider\n  };\n};","map":{"version":3,"sources":["/home/adam/NFT_Minting_dApp/src/pages/Home/utils.ts"],"names":["SmartContract","Account","parseUserKey","UserSigner","GasLimit","Address","ContractFunction","Balance","U32Value","core","data","getMintTransaction","contractAddress","baseGasLimit","tokensAmount","tokens","tokenSellingPrice","contract","address","call","func","gasLimit","args","value","fromString","times","commonTxOperations","tx","account","signer","provider","setNonce","nonce","incrementNonce","sign","send","awaitExecuted","txHash","getHash","console","log","prepareUserAccount","walletPemKey","userKey","generatePublicKey","toAddress","publicEndpointSetup","keyFileObject","JSON","parse","stringify","userAccount","loadFromKeyFile","fromWallet"],"mappings":"AAAA,SAIIA,aAJJ,EAKIC,OALJ,EAMIC,YANJ,EAOIC,UAPJ,EAUIC,QAVJ,EAYIC,OAZJ,EAaIC,gBAbJ,EAeIC,OAfJ,EAgBIC,QAhBJ,QA6BS,sBA7BT;AA+BA,SAASC,IAAT,QAAqB,+BAArB;AAEE,OAAOC,IAAP,MAAiB,eAAjB;AACF,OAAO,MAAMC,kBAAkB,GAAG,CAC9BC,eAD8B,EAE9BC,YAF8B,EAG9BC,YAH8B,KAI3B;AACH,QAAMC,MAAM,GAAGD,YAAY,IAAI,CAA/B;AACA,QAAME,iBAAiB,GAAG,oBAA1B;AACE,QAAMC,QAAQ,GAAG,IAAIjB,aAAJ,CAAkB;AACjCkB,IAAAA,OAAO,EAAE,IAAIb,OAAJ,CAAYO,eAAZ;AADwB,GAAlB,CAAjB;AAGA,SAAOK,QAAQ,CAACE,IAAT,CAAc;AACnBC,IAAAA,IAAI,EAAE,IAAId,gBAAJ,CAAqB,aAArB,CADa;AAEnBe,IAAAA,QAAQ,EAAE,IAAIjB,QAAJ,CACRS,YAAY,GAAIA,YAAY,GAAG,GAAhB,IAAwBC,YAAY,GAAG,CAAvC,CADP,CAFS;AAKnBQ,IAAAA,IAAI,EAAE,CAAC,IAAId,QAAJ,CAAaO,MAAb,CAAD,CALa;AAMnBQ,IAAAA,KAAK,EAAEhB,OAAO,CAACiB,UAAR,CAAmBR,iBAAnB,EAAsCS,KAAtC,CAA4CV,MAA5C;AANY,GAAd,CAAP;AAQD,CAlBE;AAqBL,OAAO,MAAMW,kBAAkB,GAAG,OAChCC,EADgC,EAEhCC,OAFgC,EAGhCC,MAHgC,EAIhCC,QAJgC,KAK7B;AACHH,EAAAA,EAAE,CAACI,QAAH,CAAYH,OAAO,CAACI,KAApB;AACAJ,EAAAA,OAAO,CAACK,cAAR;AACAJ,EAAAA,MAAM,CAACK,IAAP,CAAYP,EAAZ;AAGA,QAAMA,EAAE,CAACQ,IAAH,CAAQL,QAAR,CAAN;AACA,QAAMH,EAAE,CAACS,aAAH,CAAiBN,QAAjB,CAAN;AACA,QAAMO,MAAM,GAAGV,EAAE,CAACW,OAAH,EAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BH,MAAO,EAAjD;AACD,CAhBM;AAkBP,OAAO,MAAMI,kBAAkB,GAAG,MAAOC,YAAP,IAAgC;AAChE,QAAMC,OAAO,GAAGzC,YAAY,CAACwC,YAAD,CAA5B;AACA,QAAMxB,OAAO,GAAGyB,OAAO,CAACC,iBAAR,GAA4BC,SAA5B,EAAhB;AACA,SAAO,IAAI5C,OAAJ,CAAYiB,OAAZ,CAAP;AACD,CAJM;AAMP,OAAO,MAAM4B,mBAAmB,GAAG,MAAOhB,QAAP,IAAmC;AACpE,MAAIiB,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAexC,IAAf,CAAX,CAApB,CADoE,CAEpE;;AACA,MAAIkB,OAAO,GAAG,IAAInB,IAAI,CAACmB,OAAT,EAAd;AACA,QAAMuB,WAAW,GAAG,MAAMvB,OAAO,CAACwB,eAAR,CAAwBL,aAAxB,EAAuC,iBAAvC,CAA1B;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYW,WAAZ;AAEA,QAAMtB,MAAM,GAAG1B,UAAU,CAACkD,UAAX,CAAsBN,aAAtB,EAAqC,iBAArC,CAAf;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACA,SAAO;AACLA,IAAAA,MADK;AAELsB,IAAAA,WAFK;AAGLrB,IAAAA;AAHK,GAAP;AAKD,CAdM","sourcesContent":["import {\n    ProxyProvider,\n    IProvider,\n    NetworkConfig,\n    SmartContract,\n    Account,\n    parseUserKey,\n    UserSigner,\n    SmartContractAbi,\n    Code,\n    GasLimit,\n    AbiRegistry,\n    Address,\n    ContractFunction,\n    BytesValue,\n    Balance,\n    U32Value,\n    BigUIntValue,\n    AddressValue,\n    Transaction,\n    TransactionPayload,\n    QueryResponse,\n    TypedValue,\n    CodeMetadata,\n    BooleanValue,\n    List,\n    ListType,\n    AddressType,\n    ISigner,\n  } from '@elrondnetwork/erdjs';\nimport { Provider } from 'react';\nimport { core } from '@elrondnetwork/elrond-core-js';\n\n  import data from './wallet.json';\nexport const getMintTransaction = (\n    contractAddress: string,\n    baseGasLimit: number,\n    tokensAmount: number\n  ) => {\n    const tokens = tokensAmount || 1;\n    const tokenSellingPrice = \"500000000000000000\";\n      const contract = new SmartContract({\n        address: new Address(contractAddress),\n      });\n      return contract.call({\n        func: new ContractFunction(\"getNftPrice\"),\n        gasLimit: new GasLimit(\n          baseGasLimit + (baseGasLimit / 1.4) * (tokensAmount - 1)\n        ),\n        args: [new U32Value(tokens)],\n        value: Balance.fromString(tokenSellingPrice).times(tokens),\n      });\n    };\n\n\n  export const commonTxOperations = async (\n    tx: Transaction,\n    account: Account,\n    signer: ISigner,\n    provider: ProxyProvider\n  ) => {\n    tx.setNonce(account.nonce);\n    account.incrementNonce();\n    signer.sign(tx);\n  \n  \n    await tx.send(provider);\n    await tx.awaitExecuted(provider);\n    const txHash = tx.getHash();\n    \n    console.log(`Transaction: /transactions/${txHash}`);\n  };\n\n  export const prepareUserAccount = async (walletPemKey: string) => {\n    const userKey = parseUserKey(walletPemKey);\n    const address = userKey.generatePublicKey().toAddress();\n    return new Account(address);\n  };\n\n  export const publicEndpointSetup = async (provider: ProxyProvider) => {\n    let keyFileObject = JSON.parse(JSON.stringify(data));\n    // Provider type based on initial configuration\n    let account = new core.account();\n    const userAccount = await account.loadFromKeyFile(keyFileObject, \"u!D?G8Tf48fYL28\");\n    console.log(userAccount);\n\n    const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n    console.log(signer);\n    return {\n      signer,\n      userAccount,\n      provider,\n    };\n  };"]},"metadata":{},"sourceType":"module"}