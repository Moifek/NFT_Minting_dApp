{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.List = exports.OptionValue = exports.ListType = exports.OptionType = void 0;\n\nconst utils_1 = require(\"../../utils\");\n\nconst collections_1 = require(\"./collections\");\n\nconst types_1 = require(\"./types\"); // TODO: Move to a new file, \"genericOption.ts\"\n\n\nclass OptionType extends types_1.Type {\n  constructor(typeParameter) {\n    super(\"Option\", [typeParameter]);\n  }\n\n  isAssignableFrom(type) {\n    if (!(type instanceof OptionType)) {\n      return false;\n    }\n\n    let invariantTypeParameters = this.getFirstTypeParameter().equals(type.getFirstTypeParameter());\n    let fakeCovarianceToNull = type.getFirstTypeParameter() instanceof types_1.NullType;\n    return invariantTypeParameters || fakeCovarianceToNull;\n  }\n\n}\n\nexports.OptionType = OptionType; // TODO: Move to a new file, \"genericList.ts\"\n\nclass ListType extends types_1.Type {\n  constructor(typeParameter) {\n    super(\"List\", [typeParameter]);\n  }\n\n}\n\nexports.ListType = ListType; // TODO: Move to a new file, \"genericOption.ts\"\n\nclass OptionValue extends types_1.TypedValue {\n  constructor(type) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(type); // TODO: assert value is of type type.getFirstTypeParameter()\n\n    this.value = value;\n  }\n  /**\r\n   * Creates an OptionValue, as a missing option argument.\r\n   */\n\n\n  static newMissing() {\n    let type = new OptionType(new types_1.NullType());\n    return new OptionValue(type);\n  }\n\n  static newMissingType(type) {\n    return new OptionValue(new OptionType(type));\n  }\n  /**\r\n   * Creates an OptionValue, as a provided option argument.\r\n   */\n\n\n  static newProvided(typedValue) {\n    let type = new OptionType(typedValue.getType());\n    return new OptionValue(type, typedValue);\n  }\n\n  isSet() {\n    return this.value ? true : false;\n  }\n\n  getTypedValue() {\n    utils_1.guardValueIsSet(\"value\", this.value);\n    return this.value;\n  }\n\n  valueOf() {\n    return this.value ? this.value.valueOf() : null;\n  }\n\n  equals(other) {\n    var _a;\n\n    return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.equals(other.value)) || false;\n  }\n\n}\n\nexports.OptionValue = OptionValue; // TODO: Move to a new file, \"genericList.ts\"\n// TODO: Rename to ListValue, for consistency (though the term is slighly unfortunate).\n// Question for review: or not?\n\nclass List extends types_1.TypedValue {\n  /**\r\n   *\r\n   * @param type the type of this TypedValue (an instance of ListType), not the type parameter of the ListType\r\n   * @param items the items, having the type type.getFirstTypeParameter()\r\n   */\n  constructor(type, items) {\n    super(type); // TODO: assert items are of type type.getFirstTypeParameter()\n\n    this.backingCollection = new collections_1.CollectionOfTypedValues(items);\n  }\n\n  static fromItems(items) {\n    if (items.length == 0) {\n      return new List(new types_1.TypePlaceholder(), []);\n    }\n\n    let typeParameter = items[0].getType();\n    let listType = new ListType(typeParameter);\n    return new List(listType, items);\n  }\n\n  getLength() {\n    return this.backingCollection.getLength();\n  }\n\n  getItems() {\n    return this.backingCollection.getItems();\n  }\n\n  valueOf() {\n    return this.backingCollection.valueOf();\n  }\n\n  equals(other) {\n    return this.backingCollection.equals(other.backingCollection);\n  }\n\n}\n\nexports.List = List;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/generic.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.List = exports.OptionValue = exports.ListType = exports.OptionType = void 0;\r\nconst utils_1 = require(\"../../utils\");\r\nconst collections_1 = require(\"./collections\");\r\nconst types_1 = require(\"./types\");\r\n// TODO: Move to a new file, \"genericOption.ts\"\r\nclass OptionType extends types_1.Type {\r\n    constructor(typeParameter) {\r\n        super(\"Option\", [typeParameter]);\r\n    }\r\n    isAssignableFrom(type) {\r\n        if (!(type instanceof OptionType)) {\r\n            return false;\r\n        }\r\n        let invariantTypeParameters = this.getFirstTypeParameter().equals(type.getFirstTypeParameter());\r\n        let fakeCovarianceToNull = type.getFirstTypeParameter() instanceof types_1.NullType;\r\n        return invariantTypeParameters || fakeCovarianceToNull;\r\n    }\r\n}\r\nexports.OptionType = OptionType;\r\n// TODO: Move to a new file, \"genericList.ts\"\r\nclass ListType extends types_1.Type {\r\n    constructor(typeParameter) {\r\n        super(\"List\", [typeParameter]);\r\n    }\r\n}\r\nexports.ListType = ListType;\r\n// TODO: Move to a new file, \"genericOption.ts\"\r\nclass OptionValue extends types_1.TypedValue {\r\n    constructor(type, value = null) {\r\n        super(type);\r\n        // TODO: assert value is of type type.getFirstTypeParameter()\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Creates an OptionValue, as a missing option argument.\r\n     */\r\n    static newMissing() {\r\n        let type = new OptionType(new types_1.NullType());\r\n        return new OptionValue(type);\r\n    }\r\n    static newMissingType(type) {\r\n        return new OptionValue(new OptionType(type));\r\n    }\r\n    /**\r\n     * Creates an OptionValue, as a provided option argument.\r\n     */\r\n    static newProvided(typedValue) {\r\n        let type = new OptionType(typedValue.getType());\r\n        return new OptionValue(type, typedValue);\r\n    }\r\n    isSet() {\r\n        return this.value ? true : false;\r\n    }\r\n    getTypedValue() {\r\n        utils_1.guardValueIsSet(\"value\", this.value);\r\n        return this.value;\r\n    }\r\n    valueOf() {\r\n        return this.value ? this.value.valueOf() : null;\r\n    }\r\n    equals(other) {\r\n        var _a;\r\n        return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.equals(other.value)) || false;\r\n    }\r\n}\r\nexports.OptionValue = OptionValue;\r\n// TODO: Move to a new file, \"genericList.ts\"\r\n// TODO: Rename to ListValue, for consistency (though the term is slighly unfortunate).\r\n// Question for review: or not?\r\nclass List extends types_1.TypedValue {\r\n    /**\r\n     *\r\n     * @param type the type of this TypedValue (an instance of ListType), not the type parameter of the ListType\r\n     * @param items the items, having the type type.getFirstTypeParameter()\r\n     */\r\n    constructor(type, items) {\r\n        super(type);\r\n        // TODO: assert items are of type type.getFirstTypeParameter()\r\n        this.backingCollection = new collections_1.CollectionOfTypedValues(items);\r\n    }\r\n    static fromItems(items) {\r\n        if (items.length == 0) {\r\n            return new List(new types_1.TypePlaceholder(), []);\r\n        }\r\n        let typeParameter = items[0].getType();\r\n        let listType = new ListType(typeParameter);\r\n        return new List(listType, items);\r\n    }\r\n    getLength() {\r\n        return this.backingCollection.getLength();\r\n    }\r\n    getItems() {\r\n        return this.backingCollection.getItems();\r\n    }\r\n    valueOf() {\r\n        return this.backingCollection.valueOf();\r\n    }\r\n    equals(other) {\r\n        return this.backingCollection.equals(other.backingCollection);\r\n    }\r\n}\r\nexports.List = List;\r\n//# sourceMappingURL=generic.js.map"]},"metadata":{},"sourceType":"script"}