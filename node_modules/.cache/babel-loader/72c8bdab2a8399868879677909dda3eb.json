{"ast":null,"code":"import { SmartContract, Account, UserSigner, GasLimit, Address, ContractFunction, Balance, U32Value } from \"@elrondnetwork/erdjs\"; //import { sign } from \"crypto\";\n//import data from \"./wallet.json\";\n\nexport const getMintTransaction = (contractAddress, baseGasLimit, tokensAmount) => {\n  const tokens = tokensAmount || 1;\n  const tokenSellingPrice = \"500000000000000000\";\n  const contract = new SmartContract({\n    address: new Address(contractAddress)\n  });\n  return contract.call({\n    func: new ContractFunction(\"getNftPrice\"),\n    gasLimit: new GasLimit(baseGasLimit + baseGasLimit / 1.4 * (tokensAmount - 1)),\n    args: [new U32Value(tokens)],\n    value: Balance.fromString(tokenSellingPrice).times(tokens)\n  });\n};\nexport const commonTxOperations = async (tx, account, signer, provider) => {\n  tx.setNonce(account.nonce);\n  account.incrementNonce();\n  signer.sign(tx);\n  await tx.send(provider);\n  await tx.awaitExecuted(provider);\n  const txHash = tx.getHash(); //console.log(`Transaction: /transactions/${txHash}`);\n};\nexport const publicEndpointSetup = async provider => {\n  let keyFileObject = JSON.parse(JSON.stringify(data)); // Provider type based on initial configuration\n\n  const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n  let userAccount = new Account(signer.getAddress()); //console.log(signer);\n\n  return {\n    signer,\n    userAccount,\n    provider\n  };\n};","map":{"version":3,"sources":["/home/mmo/workspace/NFT_Minting_dApp/src/pages/Home/utils.ts"],"names":["SmartContract","Account","UserSigner","GasLimit","Address","ContractFunction","Balance","U32Value","getMintTransaction","contractAddress","baseGasLimit","tokensAmount","tokens","tokenSellingPrice","contract","address","call","func","gasLimit","args","value","fromString","times","commonTxOperations","tx","account","signer","provider","setNonce","nonce","incrementNonce","sign","send","awaitExecuted","txHash","getHash","publicEndpointSetup","keyFileObject","JSON","parse","stringify","data","fromWallet","userAccount","getAddress"],"mappings":"AAAA,SAEEA,aAFF,EAGEC,OAHF,EAIEC,UAJF,EAKEC,QALF,EAMEC,OANF,EAOEC,gBAPF,EAQEC,OARF,EASEC,QATF,QAYO,sBAZP,C,CAaA;AAEA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,eADgC,EAEhCC,YAFgC,EAGhCC,YAHgC,KAI7B;AACH,QAAMC,MAAM,GAAGD,YAAY,IAAI,CAA/B;AACA,QAAME,iBAAiB,GAAG,oBAA1B;AACA,QAAMC,QAAQ,GAAG,IAAId,aAAJ,CAAkB;AACjCe,IAAAA,OAAO,EAAE,IAAIX,OAAJ,CAAYK,eAAZ;AADwB,GAAlB,CAAjB;AAGA,SAAOK,QAAQ,CAACE,IAAT,CAAc;AACnBC,IAAAA,IAAI,EAAE,IAAIZ,gBAAJ,CAAqB,aAArB,CADa;AAEnBa,IAAAA,QAAQ,EAAE,IAAIf,QAAJ,CACRO,YAAY,GAAIA,YAAY,GAAG,GAAhB,IAAwBC,YAAY,GAAG,CAAvC,CADP,CAFS;AAKnBQ,IAAAA,IAAI,EAAE,CAAC,IAAIZ,QAAJ,CAAaK,MAAb,CAAD,CALa;AAMnBQ,IAAAA,KAAK,EAAEd,OAAO,CAACe,UAAR,CAAmBR,iBAAnB,EAAsCS,KAAtC,CAA4CV,MAA5C;AANY,GAAd,CAAP;AAQD,CAlBM;AAoBP,OAAO,MAAMW,kBAAkB,GAAG,OAChCC,EADgC,EAEhCC,OAFgC,EAGhCC,MAHgC,EAIhCC,QAJgC,KAK7B;AACHH,EAAAA,EAAE,CAACI,QAAH,CAAYH,OAAO,CAACI,KAApB;AACAJ,EAAAA,OAAO,CAACK,cAAR;AACAJ,EAAAA,MAAM,CAACK,IAAP,CAAYP,EAAZ;AAEA,QAAMA,EAAE,CAACQ,IAAH,CAAQL,QAAR,CAAN;AACA,QAAMH,EAAE,CAACS,aAAH,CAAiBN,QAAjB,CAAN;AACA,QAAMO,MAAM,GAAGV,EAAE,CAACW,OAAH,EAAf,CAPG,CASH;AACD,CAfM;AAiBP,OAAO,MAAMC,mBAAmB,GAAG,MAAOT,QAAP,IAAmC;AACpE,MAAIU,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeC,IAAf,CAAX,CAApB,CADoE,CAEpE;;AACA,QAAMf,MAAM,GAAGxB,UAAU,CAACwC,UAAX,CAAsBL,aAAtB,EAAqC,iBAArC,CAAf;AACA,MAAIM,WAAW,GAAG,IAAI1C,OAAJ,CAAYyB,MAAM,CAACkB,UAAP,EAAZ,CAAlB,CAJoE,CAKpE;;AACA,SAAO;AACLlB,IAAAA,MADK;AAELiB,IAAAA,WAFK;AAGLhB,IAAAA;AAHK,GAAP;AAKD,CAXM","sourcesContent":["import {\n  ProxyProvider,\n  SmartContract,\n  Account,\n  UserSigner,\n  GasLimit,\n  Address,\n  ContractFunction,\n  Balance,\n  U32Value,\n  Transaction,\n  ISigner,\n} from \"@elrondnetwork/erdjs\";\n//import { sign } from \"crypto\";\n\n//import data from \"./wallet.json\";\nexport const getMintTransaction = (\n  contractAddress: string,\n  baseGasLimit: number,\n  tokensAmount: number\n) => {\n  const tokens = tokensAmount || 1;\n  const tokenSellingPrice = \"500000000000000000\";\n  const contract = new SmartContract({\n    address: new Address(contractAddress),\n  });\n  return contract.call({\n    func: new ContractFunction(\"getNftPrice\"),\n    gasLimit: new GasLimit(\n      baseGasLimit + (baseGasLimit / 1.4) * (tokensAmount - 1)\n    ),\n    args: [new U32Value(tokens)],\n    value: Balance.fromString(tokenSellingPrice).times(tokens),\n  });\n};\n\nexport const commonTxOperations = async (\n  tx: Transaction,\n  account: Account,\n  signer: ISigner,\n  provider: ProxyProvider\n) => {\n  tx.setNonce(account.nonce);\n  account.incrementNonce();\n  signer.sign(tx);\n\n  await tx.send(provider);\n  await tx.awaitExecuted(provider);\n  const txHash = tx.getHash();\n\n  //console.log(`Transaction: /transactions/${txHash}`);\n};\n\nexport const publicEndpointSetup = async (provider: ProxyProvider) => {\n  let keyFileObject = JSON.parse(JSON.stringify(data));\n  // Provider type based on initial configuration\n  const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n  let userAccount = new Account(signer.getAddress());\n  //console.log(signer);\n  return {\n    signer,\n    userAccount,\n    provider,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}