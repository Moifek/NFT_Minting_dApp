{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrictChecker = void 0;\n\nconst errors = __importStar(require(\"../errors\"));\n/**\r\n * An interaction checker that aims to be as strict as possible.\r\n * It is designed to catch programmer errors such as:\r\n *  - incorrect types of contract call arguments\r\n *  - errors related to calling \"non-payable\" functions with some value provided\r\n *  - gas estimation errors (not yet implemented)\r\n */\n\n\nclass StrictChecker {\n  checkInteraction(interaction) {\n    let definition = interaction.getEndpoint();\n    this.checkPayable(interaction, definition);\n    this.checkArguments(interaction, definition);\n  }\n\n  checkPayable(interaction, definition) {\n    let hasValue = interaction.getValue().isSet();\n    let isPayableInEGLD = definition.modifiers.isPayableInEGLD();\n\n    if (hasValue && !isPayableInEGLD) {\n      throw new errors.ErrContractInteraction(\"cannot send EGLD value to non-payable\");\n    }\n  }\n\n  checkArguments(interaction, definition) {\n    let formalArguments = definition.input;\n    let actualArguments = interaction.getArguments();\n    let numFormalArguments = formalArguments.length;\n    let numActualArguments = actualArguments.length;\n\n    if (numFormalArguments != numActualArguments) {\n      throw new errors.ErrContractInteraction(`bad arguments, expected: ${numFormalArguments}, got: ${numActualArguments}`);\n    } // TODO: discuss again, possibly redesign the handling of covariance / contravariance.\n\n\n    for (let i = 0; i < numFormalArguments; i++) {\n      let expectedType = formalArguments[i].type;\n      let argument = actualArguments[i];\n      let actualType = argument.getType(); // isAssignableFrom() is responsible to handle covariance and contravariance (depending on the class that overrides it).\n\n      let ok = expectedType.isAssignableFrom(actualType);\n\n      if (!ok) {\n        throw new errors.ErrContractInteraction(`type mismatch at index ${i}, expected: ${expectedType}, got: ${actualType}`);\n      }\n    }\n  }\n\n}\n\nexports.StrictChecker = StrictChecker;","map":{"version":3,"sources":["../../src/smartcontracts/strictChecker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;AAKA;;;;;;AAMG;;;AACH,MAAa,aAAb,CAA0B;EACtB,gBAAgB,CAAC,WAAD,EAAyB;IACrC,IAAI,UAAU,GAAG,WAAW,CAAC,WAAZ,EAAjB;IAEA,KAAK,YAAL,CAAkB,WAAlB,EAA+B,UAA/B;IACA,KAAK,cAAL,CAAoB,WAApB,EAAiC,UAAjC;EACH;;EAEO,YAAY,CAAC,WAAD,EAA2B,UAA3B,EAAyD;IACzE,IAAI,QAAQ,GAAG,WAAW,CAAC,QAAZ,GAAuB,KAAvB,EAAf;IACA,IAAI,eAAe,GAAG,UAAU,CAAC,SAAX,CAAqB,eAArB,EAAtB;;IAEA,IAAI,QAAQ,IAAI,CAAC,eAAjB,EAAkC;MAC9B,MAAM,IAAI,MAAM,CAAC,sBAAX,CAAkC,uCAAlC,CAAN;IACH;EACJ;;EAEO,cAAc,CAAC,WAAD,EAA2B,UAA3B,EAAyD;IAC3E,IAAI,eAAe,GAAG,UAAU,CAAC,KAAjC;IACA,IAAI,eAAe,GAAG,WAAW,CAAC,YAAZ,EAAtB;IACA,IAAI,kBAAkB,GAAG,eAAe,CAAC,MAAzC;IACA,IAAI,kBAAkB,GAAG,eAAe,CAAC,MAAzC;;IAEA,IAAI,kBAAkB,IAAI,kBAA1B,EAA8C;MAC1C,MAAM,IAAI,MAAM,CAAC,sBAAX,CAAkC,4BAA4B,kBAAkB,UAAU,kBAAkB,EAA5G,CAAN;IACH,CAR0E,CAU3E;;;IAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,kBAApB,EAAwC,CAAC,EAAzC,EAA6C;MACzC,IAAI,YAAY,GAAG,eAAe,CAAC,CAAD,CAAf,CAAmB,IAAtC;MACA,IAAI,QAAQ,GAAG,eAAe,CAAC,CAAD,CAA9B;MACA,IAAI,UAAU,GAAG,QAAQ,CAAC,OAAT,EAAjB,CAHyC,CAIzC;;MACA,IAAI,EAAE,GAAG,YAAY,CAAC,gBAAb,CAA8B,UAA9B,CAAT;;MAEA,IAAI,CAAC,EAAL,EAAS;QACL,MAAM,IAAI,MAAM,CAAC,sBAAX,CAAkC,0BAA0B,CAAC,eAAe,YAAY,UAAU,UAAU,EAA5G,CAAN;MACH;IACJ;EACJ;;AAxCqB;;AAA1B,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StrictChecker = void 0;\r\nconst errors = __importStar(require(\"../errors\"));\r\n/**\r\n * An interaction checker that aims to be as strict as possible.\r\n * It is designed to catch programmer errors such as:\r\n *  - incorrect types of contract call arguments\r\n *  - errors related to calling \"non-payable\" functions with some value provided\r\n *  - gas estimation errors (not yet implemented)\r\n */\r\nclass StrictChecker {\r\n    checkInteraction(interaction) {\r\n        let definition = interaction.getEndpoint();\r\n        this.checkPayable(interaction, definition);\r\n        this.checkArguments(interaction, definition);\r\n    }\r\n    checkPayable(interaction, definition) {\r\n        let hasValue = interaction.getValue().isSet();\r\n        let isPayableInEGLD = definition.modifiers.isPayableInEGLD();\r\n        if (hasValue && !isPayableInEGLD) {\r\n            throw new errors.ErrContractInteraction(\"cannot send EGLD value to non-payable\");\r\n        }\r\n    }\r\n    checkArguments(interaction, definition) {\r\n        let formalArguments = definition.input;\r\n        let actualArguments = interaction.getArguments();\r\n        let numFormalArguments = formalArguments.length;\r\n        let numActualArguments = actualArguments.length;\r\n        if (numFormalArguments != numActualArguments) {\r\n            throw new errors.ErrContractInteraction(`bad arguments, expected: ${numFormalArguments}, got: ${numActualArguments}`);\r\n        }\r\n        // TODO: discuss again, possibly redesign the handling of covariance / contravariance.\r\n        for (let i = 0; i < numFormalArguments; i++) {\r\n            let expectedType = formalArguments[i].type;\r\n            let argument = actualArguments[i];\r\n            let actualType = argument.getType();\r\n            // isAssignableFrom() is responsible to handle covariance and contravariance (depending on the class that overrides it).\r\n            let ok = expectedType.isAssignableFrom(actualType);\r\n            if (!ok) {\r\n                throw new errors.ErrContractInteraction(`type mismatch at index ${i}, expected: ${expectedType}, got: ${actualType}`);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.StrictChecker = StrictChecker;\r\n//# sourceMappingURL=strictChecker.js.map"]},"metadata":{},"sourceType":"script"}