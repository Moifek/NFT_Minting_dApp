{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddressValue = exports.AddressType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass AddressType extends types_1.PrimitiveType {\n  constructor() {\n    super(\"Address\");\n  }\n\n}\n\nexports.AddressType = AddressType;\n/**\r\n * An address fed to or fetched from a Smart Contract contract, as an immutable abstraction.\r\n */\n\nclass AddressValue extends types_1.PrimitiveValue {\n  constructor(value) {\n    super(new AddressType());\n    this.value = value;\n  }\n  /**\r\n   * Returns whether two objects have the same value.\r\n   *\r\n   * @param other another AddressValue\r\n   */\n\n\n  equals(other) {\n    return this.value.equals(other.value);\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\n\nexports.AddressValue = AddressValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/address.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,WAAb,SAAiC,OAAA,CAAA,aAAjC,CAA8C;EAC1C,WAAA,GAAA;IACI,MAAM,SAAN;EACH;;AAHyC;;AAA9C,OAAA,CAAA,WAAA,GAAA,WAAA;AAMA;;AAEG;;AACH,MAAa,YAAb,SAAkC,OAAA,CAAA,cAAlC,CAAgD;EAG5C,WAAA,CAAY,KAAZ,EAA0B;IACtB,MAAM,IAAI,WAAJ,EAAN;IACA,KAAK,KAAL,GAAa,KAAb;EACH;EAED;;;;AAIG;;;EACH,MAAM,CAAC,KAAD,EAAoB;IACtB,OAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,CAAC,KAAxB,CAAP;EACH;;EAED,OAAO,GAAA;IACH,OAAO,KAAK,KAAZ;EACH;;AAnB2C;;AAAhD,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AddressValue = exports.AddressType = void 0;\r\nconst types_1 = require(\"./types\");\r\nclass AddressType extends types_1.PrimitiveType {\r\n    constructor() {\r\n        super(\"Address\");\r\n    }\r\n}\r\nexports.AddressType = AddressType;\r\n/**\r\n * An address fed to or fetched from a Smart Contract contract, as an immutable abstraction.\r\n */\r\nclass AddressValue extends types_1.PrimitiveValue {\r\n    constructor(value) {\r\n        super(new AddressType());\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Returns whether two objects have the same value.\r\n     *\r\n     * @param other another AddressValue\r\n     */\r\n    equals(other) {\r\n        return this.value.equals(other.value);\r\n    }\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n}\r\nexports.AddressValue = AddressValue;\r\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}