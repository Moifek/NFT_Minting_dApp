{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar _a;\n\nimport semver from \"semver\";\n/**\r\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\r\n *\r\n ** Model\r\n * Ledger Nano S : 0x10\r\n * Ledger Blue : 0x00\r\n * Ledger Nano X : 0x40\r\n *\r\n ** Interface support bitfield\r\n * Generic HID : 0x01\r\n * Keyboard HID : 0x02\r\n * U2F : 0x04\r\n * CCID : 0x08\r\n * WebUSB : 0x10\r\n */\n\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nexport var DeviceModelId;\n\n(function (DeviceModelId) {\n  DeviceModelId[\"blue\"] = \"blue\";\n  DeviceModelId[\"nanoS\"] = \"nanoS\";\n  DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n  DeviceModelId[\"nanoX\"] = \"nanoX\";\n  DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\n})(DeviceModelId || (DeviceModelId = {}));\n\nvar devices = (_a = {}, _a[DeviceModelId.blue] = {\n  id: DeviceModelId.blue,\n  productName: \"Ledger Blue\",\n  productIdMM: 0x00,\n  legacyUsbProductId: 0x0000,\n  usbOnly: true,\n  memorySize: 480 * 1024,\n  masks: [0x31000000, 0x31010000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  }\n}, _a[DeviceModelId.nanoS] = {\n  id: DeviceModelId.nanoS,\n  productName: \"Ledger Nano S\",\n  productIdMM: 0x10,\n  legacyUsbProductId: 0x0001,\n  usbOnly: true,\n  memorySize: 320 * 1024,\n  masks: [0x31100000],\n  getBlockSize: function (firmwareVersion) {\n    var _a;\n\n    return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n  }\n}, _a[DeviceModelId.nanoSP] = {\n  id: DeviceModelId.nanoSP,\n  productName: \"Ledger Nano S Plus\",\n  productIdMM: 0x50,\n  legacyUsbProductId: 0x0005,\n  usbOnly: true,\n  memorySize: 1536 * 1024,\n  masks: [0x33100000],\n  getBlockSize: function (_firmwareVersion) {\n    return 32;\n  }\n}, _a[DeviceModelId.nanoX] = {\n  id: DeviceModelId.nanoX,\n  productName: \"Ledger Nano X\",\n  productIdMM: 0x40,\n  legacyUsbProductId: 0x0004,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33000000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n    writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\n  }]\n}, _a[DeviceModelId.nanoFTS] = {\n  id: DeviceModelId.nanoFTS,\n  productName: \"Ledger Nano FTS\",\n  productIdMM: 0x60,\n  legacyUsbProductId: 0x0006,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33200000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n    writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\n  }]\n}, _a);\nvar productMap = {\n  Blue: DeviceModelId.blue,\n  \"Nano S\": DeviceModelId.nanoS,\n  \"Nano S Plus\": DeviceModelId.nanoSP,\n  \"Nano X\": DeviceModelId.nanoX,\n  \"Nano FTS\": DeviceModelId.nanoFTS\n};\nvar devicesList = Object.values(devices);\n/**\r\n *\r\n */\n\nexport var ledgerUSBVendorId = 0x2c97;\n/**\r\n *\r\n */\n\nexport var getDeviceModel = function (id) {\n  var info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n/**\r\n * Given a `targetId`, return the deviceModel associated to it,\r\n * based on the first two bytes.\r\n */\n\nexport var identifyTargetId = function (targetId) {\n  var deviceModel = devicesList.find(function (_a) {\n    var masks = _a.masks;\n    return masks.find(function (mask) {\n      return (targetId & 0xffff0000) === mask;\n    });\n  });\n  return deviceModel;\n};\n/**\r\n *\r\n */\n\nexport var identifyUSBProductId = function (usbProductId) {\n  var legacy = devicesList.find(function (d) {\n    return d.legacyUsbProductId === usbProductId;\n  });\n  if (legacy) return legacy;\n  var mm = usbProductId >> 8;\n  var deviceModel = devicesList.find(function (d) {\n    return d.productIdMM === mm;\n  });\n  return deviceModel;\n};\nexport var identifyProductName = function (productName) {\n  var deviceModel = devicesList.find(function (d) {\n    return d.id === productMap[productName];\n  });\n  return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\n\nfor (var id in devices) {\n  var deviceModel = devices[id];\n  var bluetoothSpec = deviceModel.bluetoothSpec;\n\n  if (bluetoothSpec) {\n    for (var i = 0; i < bluetoothSpec.length; i++) {\n      var spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({\n        deviceModel: deviceModel\n      }, spec);\n    }\n  }\n}\n/**\r\n *\r\n */\n\n\nexport var getBluetoothServiceUuids = function () {\n  return bluetoothServices;\n};\n/**\r\n *\r\n */\n\nexport var getInfosForServiceUuid = function (uuid) {\n  return serviceUuidToInfos[uuid.toLowerCase()];\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar _a;\r\nimport semver from \"semver\";\r\n/**\r\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\r\n *\r\n ** Model\r\n * Ledger Nano S : 0x10\r\n * Ledger Blue : 0x00\r\n * Ledger Nano X : 0x40\r\n *\r\n ** Interface support bitfield\r\n * Generic HID : 0x01\r\n * Keyboard HID : 0x02\r\n * U2F : 0x04\r\n * CCID : 0x08\r\n * WebUSB : 0x10\r\n */\r\nexport var IIGenericHID = 0x01;\r\nexport var IIKeyboardHID = 0x02;\r\nexport var IIU2F = 0x04;\r\nexport var IICCID = 0x08;\r\nexport var IIWebUSB = 0x10;\r\nexport var DeviceModelId;\r\n(function (DeviceModelId) {\r\n    DeviceModelId[\"blue\"] = \"blue\";\r\n    DeviceModelId[\"nanoS\"] = \"nanoS\";\r\n    DeviceModelId[\"nanoSP\"] = \"nanoSP\";\r\n    DeviceModelId[\"nanoX\"] = \"nanoX\";\r\n    DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\r\n})(DeviceModelId || (DeviceModelId = {}));\r\nvar devices = (_a = {},\r\n    _a[DeviceModelId.blue] = {\r\n        id: DeviceModelId.blue,\r\n        productName: \"Ledger Blue\",\r\n        productIdMM: 0x00,\r\n        legacyUsbProductId: 0x0000,\r\n        usbOnly: true,\r\n        memorySize: 480 * 1024,\r\n        masks: [0x31000000, 0x31010000],\r\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; }\r\n    },\r\n    _a[DeviceModelId.nanoS] = {\r\n        id: DeviceModelId.nanoS,\r\n        productName: \"Ledger Nano S\",\r\n        productIdMM: 0x10,\r\n        legacyUsbProductId: 0x0001,\r\n        usbOnly: true,\r\n        memorySize: 320 * 1024,\r\n        masks: [0x31100000],\r\n        getBlockSize: function (firmwareVersion) {\r\n            var _a;\r\n            return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\")\r\n                ? 4 * 1024\r\n                : 2 * 1024;\r\n        }\r\n    },\r\n    _a[DeviceModelId.nanoSP] = {\r\n        id: DeviceModelId.nanoSP,\r\n        productName: \"Ledger Nano S Plus\",\r\n        productIdMM: 0x50,\r\n        legacyUsbProductId: 0x0005,\r\n        usbOnly: true,\r\n        memorySize: 1536 * 1024,\r\n        masks: [0x33100000],\r\n        getBlockSize: function (_firmwareVersion) { return 32; }\r\n    },\r\n    _a[DeviceModelId.nanoX] = {\r\n        id: DeviceModelId.nanoX,\r\n        productName: \"Ledger Nano X\",\r\n        productIdMM: 0x40,\r\n        legacyUsbProductId: 0x0004,\r\n        usbOnly: false,\r\n        memorySize: 2 * 1024 * 1024,\r\n        masks: [0x33000000],\r\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; },\r\n        bluetoothSpec: [\r\n            {\r\n                serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\r\n                notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\r\n                writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\r\n                writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\r\n            },\r\n        ]\r\n    },\r\n    _a[DeviceModelId.nanoFTS] = {\r\n        id: DeviceModelId.nanoFTS,\r\n        productName: \"Ledger Nano FTS\",\r\n        productIdMM: 0x60,\r\n        legacyUsbProductId: 0x0006,\r\n        usbOnly: false,\r\n        memorySize: 2 * 1024 * 1024,\r\n        masks: [0x33200000],\r\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; },\r\n        bluetoothSpec: [\r\n            {\r\n                serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\r\n                notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\r\n                writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\r\n                writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\r\n            },\r\n        ]\r\n    },\r\n    _a);\r\nvar productMap = {\r\n    Blue: DeviceModelId.blue,\r\n    \"Nano S\": DeviceModelId.nanoS,\r\n    \"Nano S Plus\": DeviceModelId.nanoSP,\r\n    \"Nano X\": DeviceModelId.nanoX,\r\n    \"Nano FTS\": DeviceModelId.nanoFTS\r\n};\r\nvar devicesList = Object.values(devices);\r\n/**\r\n *\r\n */\r\nexport var ledgerUSBVendorId = 0x2c97;\r\n/**\r\n *\r\n */\r\nexport var getDeviceModel = function (id) {\r\n    var info = devices[id];\r\n    if (!info)\r\n        throw new Error(\"device '\" + id + \"' does not exist\");\r\n    return info;\r\n};\r\n/**\r\n * Given a `targetId`, return the deviceModel associated to it,\r\n * based on the first two bytes.\r\n */\r\nexport var identifyTargetId = function (targetId) {\r\n    var deviceModel = devicesList.find(function (_a) {\r\n        var masks = _a.masks;\r\n        return masks.find(function (mask) { return (targetId & 0xffff0000) === mask; });\r\n    });\r\n    return deviceModel;\r\n};\r\n/**\r\n *\r\n */\r\nexport var identifyUSBProductId = function (usbProductId) {\r\n    var legacy = devicesList.find(function (d) { return d.legacyUsbProductId === usbProductId; });\r\n    if (legacy)\r\n        return legacy;\r\n    var mm = usbProductId >> 8;\r\n    var deviceModel = devicesList.find(function (d) { return d.productIdMM === mm; });\r\n    return deviceModel;\r\n};\r\nexport var identifyProductName = function (productName) {\r\n    var deviceModel = devicesList.find(function (d) { return d.id === productMap[productName]; });\r\n    return deviceModel;\r\n};\r\nvar bluetoothServices = [];\r\nvar serviceUuidToInfos = {};\r\nfor (var id in devices) {\r\n    var deviceModel = devices[id];\r\n    var bluetoothSpec = deviceModel.bluetoothSpec;\r\n    if (bluetoothSpec) {\r\n        for (var i = 0; i < bluetoothSpec.length; i++) {\r\n            var spec = bluetoothSpec[i];\r\n            bluetoothServices.push(spec.serviceUuid);\r\n            serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({ deviceModel: deviceModel }, spec);\r\n        }\r\n    }\r\n}\r\n/**\r\n *\r\n */\r\nexport var getBluetoothServiceUuids = function () { return bluetoothServices; };\r\n/**\r\n *\r\n */\r\nexport var getInfosForServiceUuid = function (uuid) { return serviceUuidToInfos[uuid.toLowerCase()]; };\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}