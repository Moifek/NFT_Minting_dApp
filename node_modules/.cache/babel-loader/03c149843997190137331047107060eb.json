{"ast":null,"code":"import { SmartContract, Account, parseUserKey, UserSigner, GasLimit, Address, ContractFunction, Balance, U32Value } from \"@elrondnetwork/erdjs\"; //import { Provider } from \"react\";\n\nimport data from \"./wallet.json\";\nlet LoggedUseraddress = \"\";\nexport const getMintTransaction = (contractAddress, baseGasLimit, tokensAmount) => {\n  const tokens = tokensAmount || 1;\n  const tokenSellingPrice = \"500000000000000000\";\n  const contract = new SmartContract({\n    address: new Address(contractAddress)\n  });\n  return contract.call({\n    func: new ContractFunction(\"getNftPrice\"),\n    gasLimit: new GasLimit(baseGasLimit + baseGasLimit / 1.4 * (tokensAmount - 1)),\n    args: [new U32Value(tokens)],\n    value: Balance.fromString(tokenSellingPrice).times(tokens)\n  });\n};\nexport const commonTxOperations = async (tx, account, signer, provider) => {\n  tx.setNonce(account.nonce);\n  account.incrementNonce();\n  signer.sign(tx);\n  await tx.send(provider);\n  await tx.awaitExecuted(provider);\n  const txHash = tx.getHash();\n  console.log(`Transaction: /transactions/${txHash}`);\n};\nexport const GetAddress = async LoggedUserAddress => {\n  LoggedUseraddress = LoggedUserAddress;\n};\n_c = GetAddress;\nexport const prepareUserAccount = async walletPemKey => {\n  const userKey = parseUserKey(walletPemKey);\n  const address = userKey.generatePublicKey().toAddress();\n  return new Account(address);\n};\nexport const publicEndpointSetup = async provider => {\n  let keyFileObject = JSON.parse(JSON.stringify(data)); // Provider type based on initial configuration\n\n  let LoggedUserAddress = new Address(LoggedUseraddress);\n  let LoggedUserAccount = new Account(LoggedUserAddress);\n  let syncc = await LoggedUserAccount.sync(provider);\n  console.log(syncc);\n  const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n  return {\n    signer,\n    LoggedUserAccount,\n    provider\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAddress\");","map":{"version":3,"sources":["/home/adam/NFT_Minting_dApp/src/pages/Home/utils.ts"],"names":["SmartContract","Account","parseUserKey","UserSigner","GasLimit","Address","ContractFunction","Balance","U32Value","data","LoggedUseraddress","getMintTransaction","contractAddress","baseGasLimit","tokensAmount","tokens","tokenSellingPrice","contract","address","call","func","gasLimit","args","value","fromString","times","commonTxOperations","tx","account","signer","provider","setNonce","nonce","incrementNonce","sign","send","awaitExecuted","txHash","getHash","console","log","GetAddress","LoggedUserAddress","prepareUserAccount","walletPemKey","userKey","generatePublicKey","toAddress","publicEndpointSetup","keyFileObject","JSON","parse","stringify","LoggedUserAccount","syncc","sync","fromWallet"],"mappings":"AAAA,SAEEA,aAFF,EAGEC,OAHF,EAIEC,YAJF,EAKEC,UALF,EAMEC,QANF,EAOEC,OAPF,EAQEC,gBARF,EASEC,OATF,EAUEC,QAVF,QAaO,sBAbP,C,CAcA;;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,IAAIC,iBAAiB,GAAG,EAAxB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,eADgC,EAEhCC,YAFgC,EAGhCC,YAHgC,KAI7B;AACH,QAAMC,MAAM,GAAGD,YAAY,IAAI,CAA/B;AACA,QAAME,iBAAiB,GAAG,oBAA1B;AACA,QAAMC,QAAQ,GAAG,IAAIjB,aAAJ,CAAkB;AACjCkB,IAAAA,OAAO,EAAE,IAAIb,OAAJ,CAAYO,eAAZ;AADwB,GAAlB,CAAjB;AAGA,SAAOK,QAAQ,CAACE,IAAT,CAAc;AACnBC,IAAAA,IAAI,EAAE,IAAId,gBAAJ,CAAqB,aAArB,CADa;AAEnBe,IAAAA,QAAQ,EAAE,IAAIjB,QAAJ,CACRS,YAAY,GAAIA,YAAY,GAAG,GAAhB,IAAwBC,YAAY,GAAG,CAAvC,CADP,CAFS;AAKnBQ,IAAAA,IAAI,EAAE,CAAC,IAAId,QAAJ,CAAaO,MAAb,CAAD,CALa;AAMnBQ,IAAAA,KAAK,EAAEhB,OAAO,CAACiB,UAAR,CAAmBR,iBAAnB,EAAsCS,KAAtC,CAA4CV,MAA5C;AANY,GAAd,CAAP;AAQD,CAlBM;AAoBP,OAAO,MAAMW,kBAAkB,GAAG,OAChCC,EADgC,EAEhCC,OAFgC,EAGhCC,MAHgC,EAIhCC,QAJgC,KAK7B;AACHH,EAAAA,EAAE,CAACI,QAAH,CAAYH,OAAO,CAACI,KAApB;AACAJ,EAAAA,OAAO,CAACK,cAAR;AACAJ,EAAAA,MAAM,CAACK,IAAP,CAAYP,EAAZ;AAEA,QAAMA,EAAE,CAACQ,IAAH,CAAQL,QAAR,CAAN;AACA,QAAMH,EAAE,CAACS,aAAH,CAAiBN,QAAjB,CAAN;AACA,QAAMO,MAAM,GAAGV,EAAE,CAACW,OAAH,EAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BH,MAAO,EAAjD;AACD,CAfM;AAiBP,OAAO,MAAMI,UAAU,GAAG,MAAOC,iBAAP,IAAqC;AAC7DhC,EAAAA,iBAAiB,GAAGgC,iBAApB;AACD,CAFM;KAAMD,U;AAGb,OAAO,MAAME,kBAAkB,GAAG,MAAOC,YAAP,IAAgC;AAChE,QAAMC,OAAO,GAAG3C,YAAY,CAAC0C,YAAD,CAA5B;AACA,QAAM1B,OAAO,GAAG2B,OAAO,CAACC,iBAAR,GAA4BC,SAA5B,EAAhB;AACA,SAAO,IAAI9C,OAAJ,CAAYiB,OAAZ,CAAP;AACD,CAJM;AAMP,OAAO,MAAM8B,mBAAmB,GAAG,MAAOlB,QAAP,IAAmC;AACpE,MAAImB,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe3C,IAAf,CAAX,CAApB,CADoE,CAEpE;;AACA,MAAIiC,iBAAiB,GAAG,IAAIrC,OAAJ,CAAYK,iBAAZ,CAAxB;AACA,MAAI2C,iBAAiB,GAAG,IAAIpD,OAAJ,CAAYyC,iBAAZ,CAAxB;AACA,MAAIY,KAAK,GAAG,MAAMD,iBAAiB,CAACE,IAAlB,CAAuBzB,QAAvB,CAAlB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACA,QAAMzB,MAAM,GAAG1B,UAAU,CAACqD,UAAX,CAAsBP,aAAtB,EAAqC,iBAArC,CAAf;AACA,SAAO;AACLpB,IAAAA,MADK;AAELwB,IAAAA,iBAFK;AAGLvB,IAAAA;AAHK,GAAP;AAKD,CAbM","sourcesContent":["import {\n  ProxyProvider,\n  SmartContract,\n  Account,\n  parseUserKey,\n  UserSigner,\n  GasLimit,\n  Address,\n  ContractFunction,\n  Balance,\n  U32Value,\n  Transaction,\n  ISigner,\n} from \"@elrondnetwork/erdjs\";\n//import { Provider } from \"react\";\nimport data from \"./wallet.json\";\n\nlet LoggedUseraddress = \"\";\n\nexport const getMintTransaction = (\n  contractAddress: string,\n  baseGasLimit: number,\n  tokensAmount: number\n) => {\n  const tokens = tokensAmount || 1;\n  const tokenSellingPrice = \"500000000000000000\";\n  const contract = new SmartContract({\n    address: new Address(contractAddress),\n  });\n  return contract.call({\n    func: new ContractFunction(\"getNftPrice\"),\n    gasLimit: new GasLimit(\n      baseGasLimit + (baseGasLimit / 1.4) * (tokensAmount - 1)\n    ),\n    args: [new U32Value(tokens)],\n    value: Balance.fromString(tokenSellingPrice).times(tokens),\n  });\n};\n\nexport const commonTxOperations = async (\n  tx: Transaction,\n  account: Account,\n  signer: ISigner,\n  provider: ProxyProvider\n) => {\n  tx.setNonce(account.nonce);\n  account.incrementNonce();\n  signer.sign(tx);\n\n  await tx.send(provider);\n  await tx.awaitExecuted(provider);\n  const txHash = tx.getHash();\n\n  console.log(`Transaction: /transactions/${txHash}`);\n};\n\nexport const GetAddress = async (LoggedUserAddress: string) => {\n  LoggedUseraddress = LoggedUserAddress;\n};\nexport const prepareUserAccount = async (walletPemKey: string) => {\n  const userKey = parseUserKey(walletPemKey);\n  const address = userKey.generatePublicKey().toAddress();\n  return new Account(address);\n};\n\nexport const publicEndpointSetup = async (provider: ProxyProvider) => {\n  let keyFileObject = JSON.parse(JSON.stringify(data));\n  // Provider type based on initial configuration\n  let LoggedUserAddress = new Address(LoggedUseraddress);\n  let LoggedUserAccount = new Account(LoggedUserAddress);\n  let syncc = await LoggedUserAccount.sync(provider);\n  console.log(syncc);\n  const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n  return {\n    signer,\n    LoggedUserAccount,\n    provider,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}