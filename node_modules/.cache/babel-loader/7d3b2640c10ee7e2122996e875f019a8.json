{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EsdtHelpers = void 0;\n\nconst scArgumentsParser_1 = require(\"./scArgumentsParser\");\n\nconst errors_1 = require(\"./errors\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst constants_1 = require(\"./constants\");\n/**\r\n * This class exposes static methods that are useful for parsing ESDT transfer transactions\r\n */\n\n\nclass EsdtHelpers {\n  /**\r\n   * This function will return the token identifier and the amount from a given data field for an ESDT transfer, or\r\n   * an exception if something went wrong\r\n   * @param dataField this field represents the data filed to extract esdt transfer data from\r\n   * @throws ErrInvalidEsdtTransferDataField this function throws an ErrInvalidEsdtTransferDataField if the provided data field isn't meant to be an ESDT transfer\r\n   * @return {tokenIdentifier, amount} this function returns a pair of token identifier and amount to transfer\r\n   */\n  static extractFieldsFromEsdtTransferDataField(dataField) {\n    if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\n      throw new errors_1.ErrInvalidEsdtTransferDataField();\n    }\n\n    let {\n      args\n    } = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField);\n\n    if (args.length != 2) {\n      throw new errors_1.ErrInvalidEsdtTransferDataField();\n    }\n\n    let tokenIdentifier = args[0];\n    let amount = new bignumber_js_1.default(args[1], 16).toString(10);\n    return {\n      tokenIdentifier: tokenIdentifier,\n      amount: amount\n    };\n  }\n  /**\r\n   * This function checks if the data field represents a valid ESDT transfer call\r\n   * @param dataField this field represents the string to be checked if it would trigger an ESDT transfer call\r\n   * @return true if the provided data field is meant to be an ESDT transfer\r\n   */\n\n\n  static isEsdtTransferTransaction(dataField) {\n    if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\n      return false;\n    }\n\n    let args;\n\n    try {\n      args = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField).args;\n    } catch (e) {\n      return false;\n    }\n\n    return args.length === 2;\n  }\n  /**\r\n   * getTxFieldsForEsdtTransfer returns the needed value, gasLimit and data field (in string format) for sending an amount of ESDT token\r\n   * @param tokenIdentifier this field represents the identifier of the token to transfer\r\n   * @param amount this field represents the denominated amount of the token to send\r\n   * @return {value, gasLimit, data} this function returns the value, the gas limit and the data field to use\r\n   */\n\n\n  static getTxFieldsForEsdtTransfer(tokenIdentifier, amount) {\n    const encodedAmount = new bignumber_js_1.default(amount, 10).toString(16);\n    const txDataField = [constants_1.ESDT_TRANSFER_FUNCTION_NAME, tokenIdentifier, encodedAmount].join(\"@\");\n    return {\n      value: constants_1.ESDT_TRANSFER_VALUE,\n      gasLimit: constants_1.ESDT_TRANSFER_GAS_LIMIT,\n      data: txDataField\n    };\n  }\n\n}\n\nexports.EsdtHelpers = EsdtHelpers;","map":{"version":3,"sources":["../src/esdtHelpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,WAAb,CAAwB;EAEpB;;;;;;AAMG;EACiD,OAAtC,sCAAsC,CAAC,SAAD,EAAkB;IAClE,IAAI,CAAC,SAAS,CAAC,UAAV,CAAqB,WAAA,CAAA,2BAAA,GAA8B,GAAnD,CAAL,EAA8D;MAC1D,MAAM,IAAI,QAAA,CAAA,+BAAJ,EAAN;IACH;;IAED,IAAI;MAAC;IAAD,IAAS,mBAAA,CAAA,iBAAA,CAAkB,+BAAlB,CAAkD,SAAlD,CAAb;;IAEA,IAAI,IAAI,CAAC,MAAL,IAAe,CAAnB,EAAsB;MAClB,MAAM,IAAI,QAAA,CAAA,+BAAJ,EAAN;IACH;;IAED,IAAI,eAAe,GAAG,IAAI,CAAC,CAAD,CAA1B;IACA,IAAI,MAAM,GAAG,IAAI,cAAA,CAAA,OAAJ,CAAc,IAAI,CAAC,CAAD,CAAlB,EAAuB,EAAvB,EAA2B,QAA3B,CAAoC,EAApC,CAAb;IAEA,OAAO;MACH,eAAe,EAAE,eADd;MAEH,MAAM,EAAE;IAFL,CAAP;EAIH;EAED;;;;AAIG;;;EACoC,OAAzB,yBAAyB,CAAC,SAAD,EAAkB;IACrD,IAAI,CAAC,SAAS,CAAC,UAAV,CAAqB,WAAA,CAAA,2BAAA,GAA8B,GAAnD,CAAL,EAA8D;MAC1D,OAAO,KAAP;IACH;;IAED,IAAI,IAAJ;;IACA,IAAI;MACA,IAAI,GAAG,mBAAA,CAAA,iBAAA,CAAkB,+BAAlB,CAAkD,SAAlD,EAA6D,IAApE;IACH,CAFD,CAEE,OAAO,CAAP,EAAU;MACR,OAAO,KAAP;IACH;;IAED,OAAO,IAAI,CAAC,MAAL,KAAgB,CAAvB;EACH;EAED;;;;;AAKG;;;EACqC,OAA1B,0BAA0B,CAAC,eAAD,EAA0B,MAA1B,EAAwC;IAC5E,MAAM,aAAa,GAAG,IAAI,cAAA,CAAA,OAAJ,CAAc,MAAd,EAAsB,EAAtB,EAA0B,QAA1B,CAAmC,EAAnC,CAAtB;IACA,MAAM,WAAW,GAAG,CAAC,WAAA,CAAA,2BAAD,EAA8B,eAA9B,EAA+C,aAA/C,EAA8D,IAA9D,CAAmE,GAAnE,CAApB;IAEA,OAAO;MACH,KAAK,EAAE,WAAA,CAAA,mBADJ;MAEH,QAAQ,EAAE,WAAA,CAAA,uBAFP;MAGH,IAAI,EAAE;IAHH,CAAP;EAKH;;AAhEmB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EsdtHelpers = void 0;\r\nconst scArgumentsParser_1 = require(\"./scArgumentsParser\");\r\nconst errors_1 = require(\"./errors\");\r\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\r\nconst constants_1 = require(\"./constants\");\r\n/**\r\n * This class exposes static methods that are useful for parsing ESDT transfer transactions\r\n */\r\nclass EsdtHelpers {\r\n    /**\r\n     * This function will return the token identifier and the amount from a given data field for an ESDT transfer, or\r\n     * an exception if something went wrong\r\n     * @param dataField this field represents the data filed to extract esdt transfer data from\r\n     * @throws ErrInvalidEsdtTransferDataField this function throws an ErrInvalidEsdtTransferDataField if the provided data field isn't meant to be an ESDT transfer\r\n     * @return {tokenIdentifier, amount} this function returns a pair of token identifier and amount to transfer\r\n     */\r\n    static extractFieldsFromEsdtTransferDataField(dataField) {\r\n        if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\r\n            throw new errors_1.ErrInvalidEsdtTransferDataField();\r\n        }\r\n        let { args } = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField);\r\n        if (args.length != 2) {\r\n            throw new errors_1.ErrInvalidEsdtTransferDataField();\r\n        }\r\n        let tokenIdentifier = args[0];\r\n        let amount = new bignumber_js_1.default(args[1], 16).toString(10);\r\n        return {\r\n            tokenIdentifier: tokenIdentifier,\r\n            amount: amount\r\n        };\r\n    }\r\n    /**\r\n     * This function checks if the data field represents a valid ESDT transfer call\r\n     * @param dataField this field represents the string to be checked if it would trigger an ESDT transfer call\r\n     * @return true if the provided data field is meant to be an ESDT transfer\r\n     */\r\n    static isEsdtTransferTransaction(dataField) {\r\n        if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\r\n            return false;\r\n        }\r\n        let args;\r\n        try {\r\n            args = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField).args;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n        return args.length === 2;\r\n    }\r\n    /**\r\n     * getTxFieldsForEsdtTransfer returns the needed value, gasLimit and data field (in string format) for sending an amount of ESDT token\r\n     * @param tokenIdentifier this field represents the identifier of the token to transfer\r\n     * @param amount this field represents the denominated amount of the token to send\r\n     * @return {value, gasLimit, data} this function returns the value, the gas limit and the data field to use\r\n     */\r\n    static getTxFieldsForEsdtTransfer(tokenIdentifier, amount) {\r\n        const encodedAmount = new bignumber_js_1.default(amount, 10).toString(16);\r\n        const txDataField = [constants_1.ESDT_TRANSFER_FUNCTION_NAME, tokenIdentifier, encodedAmount].join(\"@\");\r\n        return {\r\n            value: constants_1.ESDT_TRANSFER_VALUE,\r\n            gasLimit: constants_1.ESDT_TRANSFER_GAS_LIMIT,\r\n            data: txDataField\r\n        };\r\n    }\r\n}\r\nexports.EsdtHelpers = EsdtHelpers;\r\n//# sourceMappingURL=esdtHelpers.js.map"]},"metadata":{},"sourceType":"script"}