{"ast":null,"code":"import axios from 'axios';\nimport { ProxyNetworkProvider } from \"@elrondnetwork/erdjs-network-providers\";\nimport { Address, AbiRegistry, SmartContractAbi, SmartContract } from '@elrondnetwork/erdjs';\nimport { promises } from 'fs';\n\nasync function abi() {\n  let networkProvider = new ProxyNetworkProvider(\"https://devnet-gateway.elrond.com\");\n  let networkConfig = await networkProvider.getNetworkConfig();\n  console.log(networkConfig.MinGasPrice);\n  console.log(networkConfig.ChainID);\n  let jsonContent = await promises.readFile('elven-nft-minter.abi.json', {\n    encoding: 'utf8'\n  });\n  let json = JSON.parse(jsonContent);\n  let abi;\n  let abiRegistry = AbiRegistry.load(json).then(result => abi = new SmartContractAbi(result, ['test']));\n  let contract = new SmartContract({\n    address: new Address('erd1...'),\n    abi: abi\n  });\n  console.log(contract);\n}\n\nabi();\n\nconst fetchTransactions = url => async function getTransactions(_ref) {\n  let {\n    apiAddress,\n    address,\n    contractAddress,\n    timeout\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await axios.get(`${apiAddress}${url}`, {\n      params: {\n        sender: address,\n        receiver: contractAddress,\n        condition: 'must',\n        size: 25\n      },\n      timeout\n    });\n    return {\n      data: data,\n      success: data !== undefined\n    };\n  } catch (err) {\n    return {\n      success: false\n    };\n  }\n};\n\nexport const getTransactions = fetchTransactions('/transactions');\nexport const getTransactionsCount = fetchTransactions('/transactions/count');","map":{"version":3,"sources":["/home/adam/NFT_Minting_dApp/src/apiRequests/index.tsx"],"names":["axios","ProxyNetworkProvider","Address","AbiRegistry","SmartContractAbi","SmartContract","promises","abi","networkProvider","networkConfig","getNetworkConfig","console","log","MinGasPrice","ChainID","jsonContent","readFile","encoding","json","JSON","parse","abiRegistry","load","then","result","contract","address","fetchTransactions","url","getTransactions","apiAddress","contractAddress","timeout","data","get","params","sender","receiver","condition","size","success","undefined","err","getTransactionsCount"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,wCAArC;AACA,SASEC,OATF,EAYEC,WAZF,EAaEC,gBAbF,EAcEC,aAdF,QAeO,sBAfP;AAgBA,SAASC,QAAT,QAAyB,IAAzB;;AAUA,eAAeC,GAAf,GACA;AACA,MAAIC,eAAe,GAAG,IAAIP,oBAAJ,CAAyB,mCAAzB,CAAtB;AAEA,MAAIQ,aAAa,GAAG,MAAMD,eAAe,CAACE,gBAAhB,EAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAa,CAACI,WAA1B;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAa,CAACK,OAA1B;AAEA,MAAIC,WAAW,GAAG,MAAMT,QAAQ,CAACU,QAAT,CAAkB,2BAAlB,EAA+C;AACrEC,IAAAA,QAAQ,EAAE;AAD2D,GAA/C,CAAxB;AAGA,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAX;AACA,MAAIR,GAAJ;AACA,MAAIc,WAAW,GAAGlB,WAAW,CAACmB,IAAZ,CAAiBJ,IAAjB,EAAuBK,IAAvB,CAA6BC,MAAD,IAAYjB,GAAG,GAAG,IAAIH,gBAAJ,CAAqBoB,MAArB,EAA6B,CAAC,MAAD,CAA7B,CAA9C,CAAlB;AACA,MAAIC,QAAQ,GAAG,IAAIpB,aAAJ,CAAkB;AAAEqB,IAAAA,OAAO,EAAE,IAAIxB,OAAJ,CAAY,SAAZ,CAAX;AAAmCK,IAAAA,GAAG,EAAEA;AAAxC,GAAlB,CAAf;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYa,QAAZ;AACC;;AAEDlB,GAAG;;AAGH,MAAMoB,iBAAiB,GAAIC,GAAD,IACxB,eAAeC,eAAf,OAK8B;AAAA,MALC;AAC7BC,IAAAA,UAD6B;AAE7BJ,IAAAA,OAF6B;AAG7BK,IAAAA,eAH6B;AAI7BC,IAAAA;AAJ6B,GAKD;;AAC5B,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMjC,KAAK,CAACkC,GAAN,CAAW,GAAEJ,UAAW,GAAEF,GAAI,EAA9B,EAAiC;AACtDO,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEV,OADF;AAENW,QAAAA,QAAQ,EAAEN,eAFJ;AAGNO,QAAAA,SAAS,EAAE,MAHL;AAINC,QAAAA,IAAI,EAAE;AAJA,OAD8C;AAOtDP,MAAAA;AAPsD,KAAjC,CAAvB;AAUA,WAAO;AACLC,MAAAA,IAAI,EAAEA,IADD;AAELO,MAAAA,OAAO,EAAEP,IAAI,KAAKQ;AAFb,KAAP;AAID,GAfD,CAeE,OAAOC,GAAP,EAAY;AACZ,WAAO;AACLF,MAAAA,OAAO,EAAE;AADJ,KAAP;AAGD;AACF,CA3BH;;AA8BA,OAAO,MAAMX,eAAe,GAAGF,iBAAiB,CAAC,eAAD,CAAzC;AACP,OAAO,MAAMgB,oBAAoB,GAAGhB,iBAAiB,CAAC,qBAAD,CAA9C","sourcesContent":["import axios from 'axios';\nimport { ProxyNetworkProvider } from \"@elrondnetwork/erdjs-network-providers\";\nimport {\n  Transaction,\n  Nonce,\n  Balance,\n  GasPrice,\n  GasLimit,\n  TransactionPayload,\n  ChainID,\n  TransactionVersion,\n  Address,\n  NetworkConfig,\n  GasPriceModifier,\n  AbiRegistry,\n  SmartContractAbi,\n  SmartContract\n} from '@elrondnetwork/erdjs';\nimport { promises } from 'fs';\ninterface GetLatestTransactionsType {\n  apiAddress: string;\n  address: string;\n  contractAddress: string;\n  timeout: number;\n  page?: number;\n  url?: string;\n}\n\nasync function abi()\n{\nlet networkProvider = new ProxyNetworkProvider(\"https://devnet-gateway.elrond.com\");\n\nlet networkConfig = await networkProvider.getNetworkConfig();\nconsole.log(networkConfig.MinGasPrice);\nconsole.log(networkConfig.ChainID);\n\nlet jsonContent = await promises.readFile('elven-nft-minter.abi.json', {\n  encoding: 'utf8',\n});\nlet json = JSON.parse(jsonContent);\nlet abi;\nlet abiRegistry = AbiRegistry.load(json).then((result) => abi = new SmartContractAbi(result, ['test']));\nlet contract = new SmartContract({ address: new Address('erd1...'), abi: abi });\nconsole.log(contract);\n}\n\nabi();\n\n\nconst fetchTransactions = (url: string) =>\n  async function getTransactions({\n    apiAddress,\n    address,\n    contractAddress,\n    timeout\n  }: GetLatestTransactionsType) {\n    try {\n      const { data } = await axios.get(`${apiAddress}${url}`, {\n        params: {\n          sender: address,\n          receiver: contractAddress,\n          condition: 'must',\n          size: 25\n        },\n        timeout\n      });\n\n      return {\n        data: data,\n        success: data !== undefined\n      };\n    } catch (err) {\n      return {\n        success: false\n      };\n    }\n  };\n\n\nexport const getTransactions = fetchTransactions('/transactions');\nexport const getTransactionsCount = fetchTransactions('/transactions/count');\n"]},"metadata":{},"sourceType":"module"}