{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionValueBinaryCodec = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst typesystem_1 = require(\"../typesystem\");\n/**\r\n * Encodes and decodes \"OptionValue\" objects\r\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\r\n */\n\n\nclass OptionValueBinaryCodec {\n  constructor(binaryCodec) {\n    this.binaryCodec = binaryCodec;\n  }\n\n  decodeNested(buffer, type) {\n    if (buffer[0] == 0x00) {\n      return [typesystem_1.OptionValue.newMissingType(type), 1];\n    }\n\n    if (buffer[0] != 0x01) {\n      throw new errors.ErrCodec(\"invalid buffer for optional value\");\n    }\n\n    let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer.slice(1), type);\n    return [typesystem_1.OptionValue.newProvided(decoded), decodedLength + 1];\n  }\n\n  decodeTopLevel(buffer, type) {\n    if (buffer.length == 0) {\n      return new typesystem_1.OptionValue(type);\n    }\n\n    if (buffer[0] != 0x01) {\n      throw new errors.ErrCodec(\"invalid buffer for optional value\");\n    }\n\n    let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer.slice(1), type);\n    return new typesystem_1.OptionValue(type, decoded);\n  }\n\n  encodeNested(optionValue) {\n    if (optionValue.isSet()) {\n      return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\n    }\n\n    return Buffer.from([0]);\n  }\n\n  encodeTopLevel(optionValue) {\n    if (optionValue.isSet()) {\n      return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\n    }\n\n    return Buffer.from([]);\n  }\n\n}\n\nexports.OptionValueBinaryCodec = OptionValueBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/option.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAGA;;;AAGG;;;AACH,MAAa,sBAAb,CAAmC;EAG/B,WAAA,CAAY,WAAZ,EAAoC;IAChC,KAAK,WAAL,GAAmB,WAAnB;EACH;;EAED,YAAY,CAAC,MAAD,EAAiB,IAAjB,EAA2B;IACnC,IAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,EAAuB;MACnB,OAAO,CAAC,YAAA,CAAA,WAAA,CAAY,cAAZ,CAA2B,IAA3B,CAAD,EAAmC,CAAnC,CAAP;IACH;;IAED,IAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,EAAuB;MACnB,MAAM,IAAI,MAAM,CAAC,QAAX,CAAoB,mCAApB,CAAN;IACH;;IAED,IAAI,CAAC,OAAD,EAAU,aAAV,IAA2B,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAAM,CAAC,KAAP,CAAa,CAAb,CAA9B,EAA+C,IAA/C,CAA/B;IACA,OAAO,CAAC,YAAA,CAAA,WAAA,CAAY,WAAZ,CAAwB,OAAxB,CAAD,EAAmC,aAAa,GAAG,CAAnD,CAAP;EACH;;EAED,cAAc,CAAC,MAAD,EAAiB,IAAjB,EAA2B;IACrC,IAAI,MAAM,CAAC,MAAP,IAAiB,CAArB,EAAwB;MACpB,OAAO,IAAI,YAAA,CAAA,WAAJ,CAAgB,IAAhB,CAAP;IACH;;IAED,IAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,EAAuB;MACnB,MAAM,IAAI,MAAM,CAAC,QAAX,CAAoB,mCAApB,CAAN;IACH;;IAED,IAAI,CAAC,OAAD,EAAU,aAAV,IAA2B,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAAM,CAAC,KAAP,CAAa,CAAb,CAA9B,EAA+C,IAA/C,CAA/B;IACA,OAAO,IAAI,YAAA,CAAA,WAAJ,CAAgB,IAAhB,EAAsB,OAAtB,CAAP;EACH;;EAED,YAAY,CAAC,WAAD,EAAyB;IACjC,IAAI,WAAW,CAAC,KAAZ,EAAJ,EAAyB;MACrB,OAAO,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,CAAZ,CAAD,EAAmB,KAAK,WAAL,CAAiB,YAAjB,CAA8B,WAAW,CAAC,aAAZ,EAA9B,CAAnB,CAAd,CAAP;IACH;;IAED,OAAO,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,CAAZ,CAAP;EACH;;EAED,cAAc,CAAC,WAAD,EAAyB;IACnC,IAAI,WAAW,CAAC,KAAZ,EAAJ,EAAyB;MACrB,OAAO,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,CAAZ,CAAD,EAAmB,KAAK,WAAL,CAAiB,YAAjB,CAA8B,WAAW,CAAC,aAAZ,EAA9B,CAAnB,CAAd,CAAP;IACH;;IAED,OAAO,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAP;EACH;;AA/C8B;;AAAnC,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OptionValueBinaryCodec = void 0;\r\nconst errors = __importStar(require(\"../../errors\"));\r\nconst typesystem_1 = require(\"../typesystem\");\r\n/**\r\n * Encodes and decodes \"OptionValue\" objects\r\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\r\n */\r\nclass OptionValueBinaryCodec {\r\n    constructor(binaryCodec) {\r\n        this.binaryCodec = binaryCodec;\r\n    }\r\n    decodeNested(buffer, type) {\r\n        if (buffer[0] == 0x00) {\r\n            return [typesystem_1.OptionValue.newMissingType(type), 1];\r\n        }\r\n        if (buffer[0] != 0x01) {\r\n            throw new errors.ErrCodec(\"invalid buffer for optional value\");\r\n        }\r\n        let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer.slice(1), type);\r\n        return [typesystem_1.OptionValue.newProvided(decoded), decodedLength + 1];\r\n    }\r\n    decodeTopLevel(buffer, type) {\r\n        if (buffer.length == 0) {\r\n            return new typesystem_1.OptionValue(type);\r\n        }\r\n        if (buffer[0] != 0x01) {\r\n            throw new errors.ErrCodec(\"invalid buffer for optional value\");\r\n        }\r\n        let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer.slice(1), type);\r\n        return new typesystem_1.OptionValue(type, decoded);\r\n    }\r\n    encodeNested(optionValue) {\r\n        if (optionValue.isSet()) {\r\n            return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\r\n        }\r\n        return Buffer.from([0]);\r\n    }\r\n    encodeTopLevel(optionValue) {\r\n        if (optionValue.isSet()) {\r\n            return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\r\n        }\r\n        return Buffer.from([]);\r\n    }\r\n}\r\nexports.OptionValueBinaryCodec = OptionValueBinaryCodec;\r\n//# sourceMappingURL=option.js.map"]},"metadata":{},"sourceType":"script"}