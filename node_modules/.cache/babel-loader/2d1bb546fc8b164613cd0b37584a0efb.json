{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringValue = exports.StringType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass StringType extends types_1.PrimitiveType {\n  constructor() {\n    super(\"utf-8 string\");\n  }\n\n}\n\nexports.StringType = StringType;\n\nclass StringValue extends types_1.PrimitiveValue {\n  constructor(value) {\n    super(new StringType());\n    this.value = value;\n  }\n  /**\r\n   * Creates a StringValue from a utf-8 string.\r\n   */\n\n\n  static fromUTF8(value) {\n    return new StringValue(value);\n  }\n  /**\r\n   * Creates a StringValue from a hex-encoded string.\r\n   */\n\n\n  static fromHex(value) {\n    let decodedValue = Buffer.from(value, \"hex\").toString();\n    return new StringValue(decodedValue);\n  }\n\n  getLength() {\n    return this.value.length;\n  }\n  /**\r\n   * Returns whether two objects have the same value.\r\n   */\n\n\n  equals(other) {\n    return this.value === other.value;\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\n\nexports.StringValue = StringValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/string.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,UAAb,SAAgC,OAAA,CAAA,aAAhC,CAA6C;EACzC,WAAA,GAAA;IACI,MAAM,cAAN;EACH;;AAHwC;;AAA7C,OAAA,CAAA,UAAA,GAAA,UAAA;;AAMA,MAAa,WAAb,SAAiC,OAAA,CAAA,cAAjC,CAA+C;EAG3C,WAAA,CAAY,KAAZ,EAAyB;IACrB,MAAM,IAAI,UAAJ,EAAN;IACA,KAAK,KAAL,GAAa,KAAb;EACH;EAED;;AAEG;;;EACY,OAAR,QAAQ,CAAC,KAAD,EAAc;IACzB,OAAO,IAAI,WAAJ,CAAgB,KAAhB,CAAP;EACH;EAED;;AAEG;;;EACW,OAAP,OAAO,CAAC,KAAD,EAAc;IACxB,IAAI,YAAY,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,KAAnB,EAA0B,QAA1B,EAAnB;IACA,OAAO,IAAI,WAAJ,CAAgB,YAAhB,CAAP;EACH;;EAED,SAAS,GAAA;IACL,OAAO,KAAK,KAAL,CAAW,MAAlB;EACH;EAED;;AAEG;;;EACH,MAAM,CAAC,KAAD,EAAmB;IACrB,OAAO,KAAK,KAAL,KAAe,KAAK,CAAC,KAA5B;EACH;;EAED,OAAO,GAAA;IACH,OAAO,KAAK,KAAZ;EACH;;AApC0C;;AAA/C,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StringValue = exports.StringType = void 0;\r\nconst types_1 = require(\"./types\");\r\nclass StringType extends types_1.PrimitiveType {\r\n    constructor() {\r\n        super(\"utf-8 string\");\r\n    }\r\n}\r\nexports.StringType = StringType;\r\nclass StringValue extends types_1.PrimitiveValue {\r\n    constructor(value) {\r\n        super(new StringType());\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Creates a StringValue from a utf-8 string.\r\n     */\r\n    static fromUTF8(value) {\r\n        return new StringValue(value);\r\n    }\r\n    /**\r\n     * Creates a StringValue from a hex-encoded string.\r\n     */\r\n    static fromHex(value) {\r\n        let decodedValue = Buffer.from(value, \"hex\").toString();\r\n        return new StringValue(decodedValue);\r\n    }\r\n    getLength() {\r\n        return this.value.length;\r\n    }\r\n    /**\r\n     * Returns whether two objects have the same value.\r\n     */\r\n    equals(other) {\r\n        return this.value === other.value;\r\n    }\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n}\r\nexports.StringValue = StringValue;\r\n//# sourceMappingURL=string.js.map"]},"metadata":{},"sourceType":"script"}