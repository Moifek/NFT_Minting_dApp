{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BytesValue = exports.BytesType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass BytesType extends types_1.PrimitiveType {\n  constructor() {\n    super(\"bytes\");\n  }\n\n}\n\nexports.BytesType = BytesType;\n\nclass BytesValue extends types_1.PrimitiveValue {\n  constructor(value) {\n    super(new BytesType());\n    this.value = value;\n  }\n  /**\r\n   * Creates a BytesValue from a utf-8 string.\r\n   */\n\n\n  static fromUTF8(value) {\n    let buffer = Buffer.from(value, \"utf-8\");\n    return new BytesValue(buffer);\n  }\n  /**\r\n   * Creates a BytesValue from a hex-encoded string.\r\n   */\n\n\n  static fromHex(value) {\n    let buffer = Buffer.from(value, \"hex\");\n    return new BytesValue(buffer);\n  }\n\n  getLength() {\n    return this.value.length;\n  }\n  /**\r\n   * Returns whether two objects have the same value.\r\n   */\n\n\n  equals(other) {\n    if (this.getLength() != other.getLength()) {\n      return false;\n    }\n\n    return this.value.equals(other.value);\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\n\nexports.BytesValue = BytesValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/bytes.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,SAAb,SAA+B,OAAA,CAAA,aAA/B,CAA4C;EACxC,WAAA,GAAA;IACI,MAAM,OAAN;EACH;;AAHuC;;AAA5C,OAAA,CAAA,SAAA,GAAA,SAAA;;AAMA,MAAa,UAAb,SAAgC,OAAA,CAAA,cAAhC,CAA8C;EAG1C,WAAA,CAAY,KAAZ,EAAyB;IACrB,MAAM,IAAI,SAAJ,EAAN;IACA,KAAK,KAAL,GAAa,KAAb;EACH;EAED;;AAEG;;;EACY,OAAR,QAAQ,CAAC,KAAD,EAAc;IACzB,IAAI,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAAb;IACA,OAAO,IAAI,UAAJ,CAAe,MAAf,CAAP;EACH;EAED;;AAEG;;;EACW,OAAP,OAAO,CAAC,KAAD,EAAc;IACxB,IAAI,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,KAAnB,CAAb;IACA,OAAO,IAAI,UAAJ,CAAe,MAAf,CAAP;EACH;;EAED,SAAS,GAAA;IACL,OAAO,KAAK,KAAL,CAAW,MAAlB;EACH;EAED;;AAEG;;;EACH,MAAM,CAAC,KAAD,EAAkB;IACpB,IAAI,KAAK,SAAL,MAAoB,KAAK,CAAC,SAAN,EAAxB,EAA2C;MACvC,OAAO,KAAP;IACH;;IAED,OAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,CAAC,KAAxB,CAAP;EACH;;EAED,OAAO,GAAA;IACH,OAAO,KAAK,KAAZ;EACH;;AAzCyC;;AAA9C,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BytesValue = exports.BytesType = void 0;\r\nconst types_1 = require(\"./types\");\r\nclass BytesType extends types_1.PrimitiveType {\r\n    constructor() {\r\n        super(\"bytes\");\r\n    }\r\n}\r\nexports.BytesType = BytesType;\r\nclass BytesValue extends types_1.PrimitiveValue {\r\n    constructor(value) {\r\n        super(new BytesType());\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Creates a BytesValue from a utf-8 string.\r\n     */\r\n    static fromUTF8(value) {\r\n        let buffer = Buffer.from(value, \"utf-8\");\r\n        return new BytesValue(buffer);\r\n    }\r\n    /**\r\n     * Creates a BytesValue from a hex-encoded string.\r\n     */\r\n    static fromHex(value) {\r\n        let buffer = Buffer.from(value, \"hex\");\r\n        return new BytesValue(buffer);\r\n    }\r\n    getLength() {\r\n        return this.value.length;\r\n    }\r\n    /**\r\n     * Returns whether two objects have the same value.\r\n     */\r\n    equals(other) {\r\n        if (this.getLength() != other.getLength()) {\r\n            return false;\r\n        }\r\n        return this.value.equals(other.value);\r\n    }\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n}\r\nexports.BytesValue = BytesValue;\r\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}