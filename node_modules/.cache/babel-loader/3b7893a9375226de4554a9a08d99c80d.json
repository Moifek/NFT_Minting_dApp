{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionPayload = void 0;\n\nconst transactionPayloadBuilders_1 = require(\"./smartcontracts/transactionPayloadBuilders\");\n/**\r\n * The \"data\" field of a {@link Transaction}, as an immutable object.\r\n */\n\n\nclass TransactionPayload {\n  /**\r\n   * Creates a TransactionPayload from a utf-8 string or from a buffer.\r\n   */\n  constructor(data) {\n    this.data = Buffer.from(data || []);\n  }\n  /**\r\n   * Creates a TransactionPayload from a base-64 encoded string.\r\n   */\n\n\n  static fromEncoded(encoded) {\n    if (!encoded) {\n      return new TransactionPayload(\"\");\n    }\n\n    let decoded = Buffer.from(encoded, \"base64\").toString();\n    return new TransactionPayload(decoded);\n  }\n  /**\r\n   * Returns whether the \"data\" is void.\r\n   */\n\n\n  isEmpty() {\n    return this.data.length == 0;\n  }\n  /**\r\n   * Returns the base-64 representation of the data.\r\n   */\n\n\n  encoded() {\n    return this.data.toString(\"base64\");\n  }\n  /**\r\n   * Returns the data as a buffer.\r\n   */\n\n\n  valueOf() {\n    return this.data;\n  }\n\n  toString() {\n    return this.data.toString();\n  }\n\n  getEncodedArguments() {\n    return this.toString().split(\"@\");\n  }\n\n  getRawArguments() {\n    return this.getEncodedArguments().map(argument => Buffer.from(argument, \"hex\"));\n  }\n  /**\r\n   * Returns the length of the data.\r\n   */\n\n\n  length() {\n    return Buffer.from(this.data).length;\n  }\n  /**\r\n   * Returns a new builder, to be used for contract deploy transactions.\r\n   */\n\n\n  static contractDeploy() {\n    return new transactionPayloadBuilders_1.ContractDeployPayloadBuilder();\n  }\n  /**\r\n   * Returns a new builder, to be used for contract upgrade transactions.\r\n   */\n\n\n  static contractUpgrade() {\n    return new transactionPayloadBuilders_1.ContractUpgradePayloadBuilder();\n  }\n  /**\r\n   * Returns a new builder, to be used for contract call transactions.\r\n   */\n\n\n  static contractCall() {\n    return new transactionPayloadBuilders_1.ContractCallPayloadBuilder();\n  }\n\n}\n\nexports.TransactionPayload = TransactionPayload;","map":{"version":3,"sources":["../src/transactionPayload.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,4BAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,kBAAb,CAA+B;EAG3B;;AAEG;EACH,WAAA,CAAY,IAAZ,EAAkC;IAC9B,KAAK,IAAL,GAAY,MAAM,CAAC,IAAP,CAAY,IAAI,IAAI,EAApB,CAAZ;EACH;EAED;;AAEG;;;EACe,OAAX,WAAW,CAAC,OAAD,EAAiB;IAC/B,IAAI,CAAC,OAAL,EAAc;MACV,OAAO,IAAI,kBAAJ,CAAuB,EAAvB,CAAP;IACH;;IAED,IAAI,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,QAArB,EAA+B,QAA/B,EAAd;IACA,OAAO,IAAI,kBAAJ,CAAuB,OAAvB,CAAP;EACH;EAED;;AAEG;;;EACH,OAAO,GAAA;IACH,OAAO,KAAK,IAAL,CAAU,MAAV,IAAoB,CAA3B;EACH;EAED;;AAEG;;;EACH,OAAO,GAAA;IACH,OAAO,KAAK,IAAL,CAAU,QAAV,CAAmB,QAAnB,CAAP;EACH;EAED;;AAEG;;;EACH,OAAO,GAAA;IACH,OAAO,KAAK,IAAZ;EACH;;EAED,QAAQ,GAAA;IACJ,OAAO,KAAK,IAAL,CAAU,QAAV,EAAP;EACH;;EAED,mBAAmB,GAAA;IACf,OAAO,KAAK,QAAL,GAAgB,KAAhB,CAAsB,GAAtB,CAAP;EACH;;EAED,eAAe,GAAA;IACX,OAAO,KAAK,mBAAL,GAA2B,GAA3B,CAA+B,QAAQ,IAAI,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,KAAtB,CAA3C,CAAP;EACH;EAED;;AAEG;;;EACH,MAAM,GAAA;IACF,OAAO,MAAM,CAAC,IAAP,CAAY,KAAK,IAAjB,EAAuB,MAA9B;EACH;EAED;;AAEG;;;EACkB,OAAd,cAAc,GAAA;IACjB,OAAO,IAAI,4BAAA,CAAA,4BAAJ,EAAP;EACH;EAED;;AAEG;;;EACmB,OAAf,eAAe,GAAA;IAClB,OAAO,IAAI,4BAAA,CAAA,6BAAJ,EAAP;EACH;EAED;;AAEG;;;EACgB,OAAZ,YAAY,GAAA;IACf,OAAO,IAAI,4BAAA,CAAA,0BAAJ,EAAP;EACH;;AAjF0B;;AAA/B,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TransactionPayload = void 0;\r\nconst transactionPayloadBuilders_1 = require(\"./smartcontracts/transactionPayloadBuilders\");\r\n/**\r\n * The \"data\" field of a {@link Transaction}, as an immutable object.\r\n */\r\nclass TransactionPayload {\r\n    /**\r\n     * Creates a TransactionPayload from a utf-8 string or from a buffer.\r\n     */\r\n    constructor(data) {\r\n        this.data = Buffer.from(data || []);\r\n    }\r\n    /**\r\n     * Creates a TransactionPayload from a base-64 encoded string.\r\n     */\r\n    static fromEncoded(encoded) {\r\n        if (!encoded) {\r\n            return new TransactionPayload(\"\");\r\n        }\r\n        let decoded = Buffer.from(encoded, \"base64\").toString();\r\n        return new TransactionPayload(decoded);\r\n    }\r\n    /**\r\n     * Returns whether the \"data\" is void.\r\n     */\r\n    isEmpty() {\r\n        return this.data.length == 0;\r\n    }\r\n    /**\r\n     * Returns the base-64 representation of the data.\r\n     */\r\n    encoded() {\r\n        return this.data.toString(\"base64\");\r\n    }\r\n    /**\r\n     * Returns the data as a buffer.\r\n     */\r\n    valueOf() {\r\n        return this.data;\r\n    }\r\n    toString() {\r\n        return this.data.toString();\r\n    }\r\n    getEncodedArguments() {\r\n        return this.toString().split(\"@\");\r\n    }\r\n    getRawArguments() {\r\n        return this.getEncodedArguments().map(argument => Buffer.from(argument, \"hex\"));\r\n    }\r\n    /**\r\n     * Returns the length of the data.\r\n     */\r\n    length() {\r\n        return Buffer.from(this.data).length;\r\n    }\r\n    /**\r\n     * Returns a new builder, to be used for contract deploy transactions.\r\n     */\r\n    static contractDeploy() {\r\n        return new transactionPayloadBuilders_1.ContractDeployPayloadBuilder();\r\n    }\r\n    /**\r\n     * Returns a new builder, to be used for contract upgrade transactions.\r\n     */\r\n    static contractUpgrade() {\r\n        return new transactionPayloadBuilders_1.ContractUpgradePayloadBuilder();\r\n    }\r\n    /**\r\n     * Returns a new builder, to be used for contract call transactions.\r\n     */\r\n    static contractCall() {\r\n        return new transactionPayloadBuilders_1.ContractCallPayloadBuilder();\r\n    }\r\n}\r\nexports.TransactionPayload = TransactionPayload;\r\n//# sourceMappingURL=transactionPayload.js.map"]},"metadata":{},"sourceType":"script"}