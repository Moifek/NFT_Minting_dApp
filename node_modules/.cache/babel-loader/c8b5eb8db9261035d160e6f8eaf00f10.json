{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenTransferProperties = exports.TransactionMetadataTransfer = exports.TransactionMetadata = exports.TransactionToDecode = exports.TransactionDecoder = void 0;\n\nconst bech32_1 = require(\"bech32\");\n\nclass TransactionDecoder {\n  getTransactionMetadata(transaction) {\n    const metadata = this.getNormalTransactionMetadata(transaction);\n    const esdtMetadata = this.getEsdtTransactionMetadata(metadata);\n\n    if (esdtMetadata) {\n      return esdtMetadata;\n    }\n\n    const nftMetadata = this.getNftTransferMetadata(metadata);\n\n    if (nftMetadata) {\n      return nftMetadata;\n    }\n\n    const multiMetadata = this.getMultiTransferMetadata(metadata);\n\n    if (multiMetadata) {\n      return multiMetadata;\n    }\n\n    return metadata;\n  }\n\n  getNormalTransactionMetadata(transaction) {\n    const metadata = new TransactionMetadata();\n    metadata.sender = transaction.sender;\n    metadata.receiver = transaction.receiver;\n    metadata.value = BigInt(transaction.value);\n\n    if (transaction.data) {\n      const decodedData = this.base64Decode(transaction.data);\n      const dataComponents = decodedData.split('@');\n      const args = dataComponents.slice(1);\n\n      if (args.every(x => this.isSmartContractArgument(x))) {\n        metadata.functionName = dataComponents[0];\n        metadata.functionArgs = args;\n      }\n\n      if (metadata.functionName === 'relayedTx' && metadata.functionArgs.length === 1) {\n        try {\n          const relayedTransaction = JSON.parse(this.hexToString(metadata.functionArgs[0]));\n          relayedTransaction.value = relayedTransaction.value.toString();\n          relayedTransaction.sender = this.bech32Encode(this.base64ToHex(relayedTransaction.sender));\n          relayedTransaction.receiver = this.bech32Encode(this.base64ToHex(relayedTransaction.receiver));\n          return this.getNormalTransactionMetadata(relayedTransaction);\n        } catch (error) {// nothing special\n        }\n      }\n\n      if (metadata.functionName === 'relayedTxV2' && metadata.functionArgs.length === 4) {\n        try {\n          const relayedTransaction = new TransactionToDecode();\n          relayedTransaction.sender = transaction.receiver;\n          relayedTransaction.receiver = this.bech32Encode(metadata.functionArgs[0]);\n          relayedTransaction.data = this.base64Encode(this.hexToString(metadata.functionArgs[2]));\n          relayedTransaction.value = '0';\n          return this.getNormalTransactionMetadata(relayedTransaction);\n        } catch (error) {// nothing special\n        }\n      }\n    }\n\n    try {\n      if (transaction.type === \"SmartContractResult\") {\n        if (metadata.functionName === 'MultiESDTNFTTransfer' && metadata.functionArgs.length > 0 && this.bech32Encode(metadata.functionArgs[0]) === metadata.receiver) {\n          metadata.receiver = metadata.sender;\n        }\n\n        if (metadata.functionName === 'ESDTNFTTransfer' && metadata.functionArgs.length > 3 && this.bech32Encode(metadata.functionArgs[3]) === metadata.receiver) {\n          metadata.receiver = metadata.sender;\n        }\n      }\n    } catch (error) {// nothing special\n    }\n\n    return metadata;\n  }\n\n  getMultiTransferMetadata(metadata) {\n    if (metadata.sender !== metadata.receiver) {\n      return undefined;\n    }\n\n    if (metadata.functionName !== 'MultiESDTNFTTransfer') {\n      return undefined;\n    }\n\n    const args = metadata.functionArgs;\n\n    if (args.length < 3) {\n      return undefined;\n    }\n\n    if (!this.isAddressValid(args[0])) {\n      return undefined;\n    }\n\n    const receiver = this.bech32Encode(args[0]);\n    const transferCount = this.hexToNumber(args[1]);\n    const result = new TransactionMetadata();\n\n    if (!result.transfers) {\n      result.transfers = [];\n    }\n\n    let index = 2;\n\n    for (let i = 0; i < transferCount; i++) {\n      const identifier = this.hexToString(args[index++]);\n      const nonce = args[index++];\n      const value = this.hexToBigInt(args[index++]);\n\n      if (nonce) {\n        result.transfers.push({\n          value,\n          properties: {\n            collection: identifier,\n            identifier: `${identifier}-${nonce}`\n          }\n        });\n      } else {\n        result.transfers.push({\n          value,\n          properties: {\n            token: identifier\n          }\n        });\n      }\n    }\n\n    result.sender = metadata.sender;\n    result.receiver = receiver;\n\n    if (args.length > index) {\n      result.functionName = this.hexToString(args[index++]);\n      result.functionArgs = args.slice(index++);\n    }\n\n    return result;\n  }\n\n  getNftTransferMetadata(metadata) {\n    if (metadata.sender !== metadata.receiver) {\n      return undefined;\n    }\n\n    if (metadata.functionName !== 'ESDTNFTTransfer') {\n      return undefined;\n    }\n\n    const args = metadata.functionArgs;\n\n    if (args.length < 4) {\n      return undefined;\n    }\n\n    if (!this.isAddressValid(args[3])) {\n      return undefined;\n    }\n\n    const collectionIdentifier = this.hexToString(args[0]);\n    const nonce = args[1];\n    const value = this.hexToBigInt(args[2]);\n    const receiver = this.bech32Encode(args[3]);\n    const result = new TransactionMetadata();\n    result.sender = metadata.sender;\n    result.receiver = receiver;\n    result.value = value;\n\n    if (args.length > 4) {\n      result.functionName = this.hexToString(args[4]);\n      result.functionArgs = args.slice(5);\n    }\n\n    result.transfers = [{\n      value,\n      properties: {\n        collection: collectionIdentifier,\n        identifier: `${collectionIdentifier}-${nonce}`\n      }\n    }];\n    return result;\n  }\n\n  base64Encode(str) {\n    return Buffer.from(str).toString('base64');\n  }\n\n  base64Decode(str) {\n    return Buffer.from(str, 'base64').toString('binary');\n  }\n\n  hexToNumber(hex) {\n    return parseInt(hex, 16);\n  }\n\n  getEsdtTransactionMetadata(metadata) {\n    if (metadata.functionName !== 'ESDTTransfer') {\n      return undefined;\n    }\n\n    const args = metadata.functionArgs;\n\n    if (args.length < 2) {\n      return undefined;\n    }\n\n    const tokenIdentifier = this.hexToString(args[0]);\n    const value = this.hexToBigInt(args[1]);\n    const result = new TransactionMetadata();\n    result.sender = metadata.sender;\n    result.receiver = metadata.receiver;\n\n    if (args.length > 2) {\n      result.functionName = this.hexToString(args[2]);\n      result.functionArgs = args.slice(3);\n    }\n\n    result.transfers = [{\n      value,\n      properties: {\n        identifier: tokenIdentifier\n      }\n    }];\n    result.value = metadata.value;\n    return result;\n  }\n\n  bech32Encode(address) {\n    const pubKey = Buffer.from(address, \"hex\");\n    let words = bech32_1.bech32.toWords(pubKey);\n    return bech32_1.bech32.encode('erd', words);\n  }\n\n  isAddressValid(address) {\n    return Buffer.from(address, \"hex\").length == 32;\n  }\n\n  isSmartContractArgument(arg) {\n    if (!this.isHex(arg)) {\n      return false;\n    }\n\n    if (arg.length % 2 !== 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isHex(value) {\n    return new RegExp(/[^a-f0-9]/gi).test(value) === false;\n  }\n\n  base64ToHex(str) {\n    return Buffer.from(str, 'base64').toString('hex');\n  }\n\n  hexToString(hex) {\n    return Buffer.from(hex, 'hex').toString('ascii');\n  }\n\n  hexToBigInt(hex) {\n    if (!hex) {\n      return BigInt(0);\n    }\n\n    return BigInt('0x' + hex);\n  }\n\n}\n\nexports.TransactionDecoder = TransactionDecoder;\n\nclass TransactionToDecode {\n  constructor() {\n    this.sender = '';\n    this.receiver = '';\n    this.data = '';\n    this.value = '0';\n    this.type = '';\n  }\n\n}\n\nexports.TransactionToDecode = TransactionToDecode;\n\nclass TransactionMetadata {\n  constructor() {\n    this.sender = '';\n    this.receiver = '';\n    this.value = BigInt(0);\n    this.functionArgs = [];\n  }\n\n}\n\nexports.TransactionMetadata = TransactionMetadata;\n\nclass TransactionMetadataTransfer {\n  constructor() {\n    this.value = BigInt(0);\n  }\n\n}\n\nexports.TransactionMetadataTransfer = TransactionMetadataTransfer;\n\nclass TokenTransferProperties {}\n\nexports.TokenTransferProperties = TokenTransferProperties;","map":{"version":3,"sources":["/home/adam/NFT_Minting_dApp/node_modules/@elrondnetwork/transaction-decoder/lib/transaction.decoder.js"],"names":["Object","defineProperty","exports","value","TokenTransferProperties","TransactionMetadataTransfer","TransactionMetadata","TransactionToDecode","TransactionDecoder","bech32_1","require","getTransactionMetadata","transaction","metadata","getNormalTransactionMetadata","esdtMetadata","getEsdtTransactionMetadata","nftMetadata","getNftTransferMetadata","multiMetadata","getMultiTransferMetadata","sender","receiver","BigInt","data","decodedData","base64Decode","dataComponents","split","args","slice","every","x","isSmartContractArgument","functionName","functionArgs","length","relayedTransaction","JSON","parse","hexToString","toString","bech32Encode","base64ToHex","error","base64Encode","type","undefined","isAddressValid","transferCount","hexToNumber","result","transfers","index","i","identifier","nonce","hexToBigInt","push","properties","collection","token","collectionIdentifier","str","Buffer","from","hex","parseInt","tokenIdentifier","address","pubKey","words","bech32","toWords","encode","arg","isHex","RegExp","test","constructor"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenTransferProperties = exports.TransactionMetadataTransfer = exports.TransactionMetadata = exports.TransactionToDecode = exports.TransactionDecoder = void 0;\nconst bech32_1 = require(\"bech32\");\nclass TransactionDecoder {\n    getTransactionMetadata(transaction) {\n        const metadata = this.getNormalTransactionMetadata(transaction);\n        const esdtMetadata = this.getEsdtTransactionMetadata(metadata);\n        if (esdtMetadata) {\n            return esdtMetadata;\n        }\n        const nftMetadata = this.getNftTransferMetadata(metadata);\n        if (nftMetadata) {\n            return nftMetadata;\n        }\n        const multiMetadata = this.getMultiTransferMetadata(metadata);\n        if (multiMetadata) {\n            return multiMetadata;\n        }\n        return metadata;\n    }\n    getNormalTransactionMetadata(transaction) {\n        const metadata = new TransactionMetadata();\n        metadata.sender = transaction.sender;\n        metadata.receiver = transaction.receiver;\n        metadata.value = BigInt(transaction.value);\n        if (transaction.data) {\n            const decodedData = this.base64Decode(transaction.data);\n            const dataComponents = decodedData.split('@');\n            const args = dataComponents.slice(1);\n            if (args.every((x) => this.isSmartContractArgument(x))) {\n                metadata.functionName = dataComponents[0];\n                metadata.functionArgs = args;\n            }\n            if (metadata.functionName === 'relayedTx' && metadata.functionArgs.length === 1) {\n                try {\n                    const relayedTransaction = JSON.parse(this.hexToString(metadata.functionArgs[0]));\n                    relayedTransaction.value = relayedTransaction.value.toString();\n                    relayedTransaction.sender = this.bech32Encode(this.base64ToHex(relayedTransaction.sender));\n                    relayedTransaction.receiver = this.bech32Encode(this.base64ToHex(relayedTransaction.receiver));\n                    return this.getNormalTransactionMetadata(relayedTransaction);\n                }\n                catch (error) {\n                    // nothing special\n                }\n            }\n            if (metadata.functionName === 'relayedTxV2' && metadata.functionArgs.length === 4) {\n                try {\n                    const relayedTransaction = new TransactionToDecode();\n                    relayedTransaction.sender = transaction.receiver;\n                    relayedTransaction.receiver = this.bech32Encode(metadata.functionArgs[0]);\n                    relayedTransaction.data = this.base64Encode(this.hexToString(metadata.functionArgs[2]));\n                    relayedTransaction.value = '0';\n                    return this.getNormalTransactionMetadata(relayedTransaction);\n                }\n                catch (error) {\n                    // nothing special\n                }\n            }\n        }\n        try {\n            if (transaction.type === \"SmartContractResult\") {\n                if (metadata.functionName === 'MultiESDTNFTTransfer' &&\n                    metadata.functionArgs.length > 0 &&\n                    this.bech32Encode(metadata.functionArgs[0]) === metadata.receiver) {\n                    metadata.receiver = metadata.sender;\n                }\n                if (metadata.functionName === 'ESDTNFTTransfer' &&\n                    metadata.functionArgs.length > 3 &&\n                    this.bech32Encode(metadata.functionArgs[3]) === metadata.receiver) {\n                    metadata.receiver = metadata.sender;\n                }\n            }\n        }\n        catch (error) {\n            // nothing special\n        }\n        return metadata;\n    }\n    getMultiTransferMetadata(metadata) {\n        if (metadata.sender !== metadata.receiver) {\n            return undefined;\n        }\n        if (metadata.functionName !== 'MultiESDTNFTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (args.length < 3) {\n            return undefined;\n        }\n        if (!this.isAddressValid(args[0])) {\n            return undefined;\n        }\n        const receiver = this.bech32Encode(args[0]);\n        const transferCount = this.hexToNumber(args[1]);\n        const result = new TransactionMetadata();\n        if (!result.transfers) {\n            result.transfers = [];\n        }\n        let index = 2;\n        for (let i = 0; i < transferCount; i++) {\n            const identifier = this.hexToString(args[index++]);\n            const nonce = args[index++];\n            const value = this.hexToBigInt(args[index++]);\n            if (nonce) {\n                result.transfers.push({\n                    value,\n                    properties: {\n                        collection: identifier,\n                        identifier: `${identifier}-${nonce}`,\n                    },\n                });\n            }\n            else {\n                result.transfers.push({\n                    value,\n                    properties: {\n                        token: identifier\n                    },\n                });\n            }\n        }\n        result.sender = metadata.sender;\n        result.receiver = receiver;\n        if (args.length > index) {\n            result.functionName = this.hexToString(args[index++]);\n            result.functionArgs = args.slice(index++);\n        }\n        return result;\n    }\n    getNftTransferMetadata(metadata) {\n        if (metadata.sender !== metadata.receiver) {\n            return undefined;\n        }\n        if (metadata.functionName !== 'ESDTNFTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (args.length < 4) {\n            return undefined;\n        }\n        if (!this.isAddressValid(args[3])) {\n            return undefined;\n        }\n        const collectionIdentifier = this.hexToString(args[0]);\n        const nonce = args[1];\n        const value = this.hexToBigInt(args[2]);\n        const receiver = this.bech32Encode(args[3]);\n        const result = new TransactionMetadata();\n        result.sender = metadata.sender;\n        result.receiver = receiver;\n        result.value = value;\n        if (args.length > 4) {\n            result.functionName = this.hexToString(args[4]);\n            result.functionArgs = args.slice(5);\n        }\n        result.transfers = [{\n                value,\n                properties: {\n                    collection: collectionIdentifier,\n                    identifier: `${collectionIdentifier}-${nonce}`\n                },\n            }];\n        return result;\n    }\n    base64Encode(str) {\n        return Buffer.from(str).toString('base64');\n    }\n    base64Decode(str) {\n        return Buffer.from(str, 'base64').toString('binary');\n    }\n    hexToNumber(hex) {\n        return parseInt(hex, 16);\n    }\n    getEsdtTransactionMetadata(metadata) {\n        if (metadata.functionName !== 'ESDTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (args.length < 2) {\n            return undefined;\n        }\n        const tokenIdentifier = this.hexToString(args[0]);\n        const value = this.hexToBigInt(args[1]);\n        const result = new TransactionMetadata();\n        result.sender = metadata.sender;\n        result.receiver = metadata.receiver;\n        if (args.length > 2) {\n            result.functionName = this.hexToString(args[2]);\n            result.functionArgs = args.slice(3);\n        }\n        result.transfers = [{\n                value,\n                properties: {\n                    identifier: tokenIdentifier\n                },\n            }];\n        result.value = metadata.value;\n        return result;\n    }\n    bech32Encode(address) {\n        const pubKey = Buffer.from(address, \"hex\");\n        let words = bech32_1.bech32.toWords(pubKey);\n        return bech32_1.bech32.encode('erd', words);\n    }\n    isAddressValid(address) {\n        return Buffer.from(address, \"hex\").length == 32;\n    }\n    isSmartContractArgument(arg) {\n        if (!this.isHex(arg)) {\n            return false;\n        }\n        if (arg.length % 2 !== 0) {\n            return false;\n        }\n        return true;\n    }\n    isHex(value) {\n        return new RegExp(/[^a-f0-9]/gi).test(value) === false;\n    }\n    base64ToHex(str) {\n        return Buffer.from(str, 'base64').toString('hex');\n    }\n    hexToString(hex) {\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n    hexToBigInt(hex) {\n        if (!hex) {\n            return BigInt(0);\n        }\n        return BigInt('0x' + hex);\n    }\n}\nexports.TransactionDecoder = TransactionDecoder;\nclass TransactionToDecode {\n    constructor() {\n        this.sender = '';\n        this.receiver = '';\n        this.data = '';\n        this.value = '0';\n        this.type = '';\n    }\n}\nexports.TransactionToDecode = TransactionToDecode;\nclass TransactionMetadata {\n    constructor() {\n        this.sender = '';\n        this.receiver = '';\n        this.value = BigInt(0);\n        this.functionArgs = [];\n    }\n}\nexports.TransactionMetadata = TransactionMetadata;\nclass TransactionMetadataTransfer {\n    constructor() {\n        this.value = BigInt(0);\n    }\n}\nexports.TransactionMetadataTransfer = TransactionMetadataTransfer;\nclass TokenTransferProperties {\n}\nexports.TokenTransferProperties = TokenTransferProperties;\n"]},"metadata":{},"sourceType":"script"}