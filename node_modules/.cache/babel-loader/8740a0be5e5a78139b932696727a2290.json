{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NullSigner = void 0;\n\nconst signature_1 = require(\"./signature\");\n/**\r\n * Null-object pattern: a null Signer, which does nothing.\r\n *\r\n * Useful for contract interaction flows with query-only purposes.\r\n */\n\n\nclass NullSigner {\n  /**\r\n   * Creates a NullSigner.\r\n   */\n  constructor(address) {\n    this.address = address;\n  }\n\n  getAddress() {\n    return this.address;\n  }\n  /**\r\n   * Applies a mock signature.\r\n   */\n\n\n  sign(signable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      signable.applySignature(new signature_1.Signature(\"0\".repeat(128)), this.address);\n    });\n  }\n\n}\n\nexports.NullSigner = NullSigner;","map":{"version":3,"sources":["../src/nullSigner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;AAIG;;;AACH,MAAa,UAAb,CAAuB;EAGnB;;AAEG;EACH,WAAA,CAAY,OAAZ,EAA4B;IACxB,KAAK,OAAL,GAAe,OAAf;EACH;;EAED,UAAU,GAAA;IACN,OAAO,KAAK,OAAZ;EACH;EAED;;AAEG;;;EACG,IAAI,CAAC,QAAD,EAAoB;;MAC1B,QAAQ,CAAC,cAAT,CAAwB,IAAI,WAAA,CAAA,SAAJ,CAAc,IAAI,MAAJ,CAAW,GAAX,CAAd,CAAxB,EAAwD,KAAK,OAA7D;IACH,C;EAAA;;AAnBkB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NullSigner = void 0;\r\nconst signature_1 = require(\"./signature\");\r\n/**\r\n * Null-object pattern: a null Signer, which does nothing.\r\n *\r\n * Useful for contract interaction flows with query-only purposes.\r\n */\r\nclass NullSigner {\r\n    /**\r\n     * Creates a NullSigner.\r\n     */\r\n    constructor(address) {\r\n        this.address = address;\r\n    }\r\n    getAddress() {\r\n        return this.address;\r\n    }\r\n    /**\r\n     * Applies a mock signature.\r\n     */\r\n    sign(signable) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            signable.applySignature(new signature_1.Signature(\"0\".repeat(128)), this.address);\r\n        });\r\n    }\r\n}\r\nexports.NullSigner = NullSigner;\r\n//# sourceMappingURL=nullSigner.js.map"]},"metadata":{},"sourceType":"script"}