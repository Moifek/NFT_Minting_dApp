{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrContractQuery = exports.ErrNetworkProvider = exports.ErrUnexpectedCondition = exports.Err = void 0;\n/**\n * The base class for exceptions (errors).\n */\n\nclass Err extends Error {\n  constructor(message, inner) {\n    super(message);\n    this.inner = undefined;\n    this.inner = inner;\n  }\n\n}\n\nexports.Err = Err;\n/**\n * Signals an unexpected condition.\n */\n\nclass ErrUnexpectedCondition extends Err {\n  constructor(message) {\n    super(`Unexpected condition: [${message}]`);\n  }\n\n}\n\nexports.ErrUnexpectedCondition = ErrUnexpectedCondition;\n/**\n * Signals an error that happened during a request against the Network.\n */\n\nclass ErrNetworkProvider extends Err {\n  constructor(url, error, inner) {\n    let message = `Request error on url [${url}]: [${error}]`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrNetworkProvider = ErrNetworkProvider;\n/**\n * Signals a generic error in the context of querying Smart Contracts.\n */\n\nclass ErrContractQuery extends Err {\n  constructor(originalError) {\n    super(originalError.message.replace(\"executeQuery:\", \"\"));\n  }\n\n}\n\nexports.ErrContractQuery = ErrContractQuery;","map":{"version":3,"mappings":";;;;;;AAAA;;;;AAGA,MAAaA,GAAb,SAAyBC,KAAzB,CAA8B;AAG1BC,cAAmBC,OAAnB,EAAoCC,KAApC,EAAiD;AAC7C,UAAMD,OAAN;AAHJ,iBAA2BE,SAA3B;AAII,SAAKD,KAAL,GAAaA,KAAb;AACH;;AANyB;;AAA9BE;AASA;;;;AAGA,MAAaC,sBAAb,SAA4CP,GAA5C,CAA+C;AAC3CE,cAAmBC,OAAnB,EAAkC;AAC9B,UAAM,0BAA0BA,OAAO,GAAvC;AACH;;AAH0C;;AAA/CG;AAMA;;;;AAGA,MAAaE,kBAAb,SAAwCR,GAAxC,CAA2C;AACvCE,cAAmBO,GAAnB,EAAgCC,KAAhC,EAA+CN,KAA/C,EAA4D;AACxD,QAAID,OAAO,GAAG,yBAAyBM,GAAG,OAAOC,KAAK,GAAtD;AACA,UAAMP,OAAN,EAAeC,KAAf;AACH;;AAJsC;;AAA3CE;AAQA;;;;AAGA,MAAaK,gBAAb,SAAsCX,GAAtC,CAAyC;AACrCE,cAAmBU,aAAnB,EAAuC;AACnC,UAAMA,aAAa,CAACT,OAAd,CAAsBU,OAAtB,CAA8B,eAA9B,EAA+C,EAA/C,CAAN;AACH;;AAHoC;;AAAzCP","names":["Err","Error","constructor","message","inner","undefined","exports","ErrUnexpectedCondition","ErrNetworkProvider","url","error","ErrContractQuery","originalError","replace"],"sourceRoot":"","sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}