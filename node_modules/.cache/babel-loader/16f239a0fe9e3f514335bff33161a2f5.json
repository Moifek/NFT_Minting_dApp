{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldsBinaryCodec = void 0;\n\nconst typesystem_1 = require(\"../typesystem\");\n\nclass FieldsBinaryCodec {\n  constructor(binaryCodec) {\n    this.binaryCodec = binaryCodec;\n  }\n\n  decodeNested(buffer, fieldDefinitions) {\n    let fields = [];\n    let totalLength = 0;\n\n    for (const fieldDefinition of fieldDefinitions) {\n      let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, fieldDefinition.type);\n      buffer = buffer.slice(decodedLength);\n      totalLength += decodedLength;\n      let field = new typesystem_1.Field(decoded, fieldDefinition.name);\n      fields.push(field);\n    }\n\n    return [fields, totalLength];\n  }\n\n  encodeNested(fields) {\n    let buffers = [];\n\n    for (const field of fields) {\n      let fieldBuffer = this.binaryCodec.encodeNested(field.value);\n      buffers.push(fieldBuffer);\n    }\n\n    return Buffer.concat(buffers);\n  }\n\n}\n\nexports.FieldsBinaryCodec = FieldsBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/fields.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAGA,MAAa,iBAAb,CAA8B;EAG1B,WAAA,CAAY,WAAZ,EAAoC;IAChC,KAAK,WAAL,GAAmB,WAAnB;EACH;;EAED,YAAY,CAAC,MAAD,EAAiB,gBAAjB,EAAoD;IAC5D,IAAI,MAAM,GAAY,EAAtB;IACA,IAAI,WAAW,GAAG,CAAlB;;IAEA,KAAK,MAAM,eAAX,IAA8B,gBAA9B,EAAgD;MAC5C,IAAI,CAAC,OAAD,EAAU,aAAV,IAA2B,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,EAAsC,eAAe,CAAC,IAAtD,CAA/B;MACA,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,aAAb,CAAT;MACA,WAAW,IAAI,aAAf;MAEA,IAAI,KAAK,GAAG,IAAI,YAAA,CAAA,KAAJ,CAAU,OAAV,EAAmB,eAAe,CAAC,IAAnC,CAAZ;MACA,MAAM,CAAC,IAAP,CAAY,KAAZ;IACH;;IAED,OAAO,CAAC,MAAD,EAAS,WAAT,CAAP;EACH;;EAED,YAAY,CAAC,MAAD,EAA6B;IACrC,IAAI,OAAO,GAAa,EAAxB;;IAEA,KAAK,MAAM,KAAX,IAAoB,MAApB,EAA4B;MACxB,IAAI,WAAW,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,KAAK,CAAC,KAApC,CAAlB;MACA,OAAO,CAAC,IAAR,CAAa,WAAb;IACH;;IAED,OAAO,MAAM,CAAC,MAAP,CAAc,OAAd,CAAP;EACH;;AAhCyB;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FieldsBinaryCodec = void 0;\r\nconst typesystem_1 = require(\"../typesystem\");\r\nclass FieldsBinaryCodec {\r\n    constructor(binaryCodec) {\r\n        this.binaryCodec = binaryCodec;\r\n    }\r\n    decodeNested(buffer, fieldDefinitions) {\r\n        let fields = [];\r\n        let totalLength = 0;\r\n        for (const fieldDefinition of fieldDefinitions) {\r\n            let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, fieldDefinition.type);\r\n            buffer = buffer.slice(decodedLength);\r\n            totalLength += decodedLength;\r\n            let field = new typesystem_1.Field(decoded, fieldDefinition.name);\r\n            fields.push(field);\r\n        }\r\n        return [fields, totalLength];\r\n    }\r\n    encodeNested(fields) {\r\n        let buffers = [];\r\n        for (const field of fields) {\r\n            let fieldBuffer = this.binaryCodec.encodeNested(field.value);\r\n            buffers.push(fieldBuffer);\r\n        }\r\n        return Buffer.concat(buffers);\r\n    }\r\n}\r\nexports.FieldsBinaryCodec = FieldsBinaryCodec;\r\n//# sourceMappingURL=fields.js.map"]},"metadata":{},"sourceType":"script"}