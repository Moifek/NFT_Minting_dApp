{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zeroPadStringIfOddLength = exports.isPaddedHex = exports.numberToPaddedHex = exports.Nonce = exports.Address = void 0;\n\nconst bech32 = __importStar(require(\"bech32\"));\n/**\r\n * The human-readable-part of the bech32 addresses.\r\n */\n\n\nconst HRP = \"erd\";\n\nclass Address {\n  constructor(value) {\n    this.value = value;\n  }\n\n  static fromPubkey(pubkey) {\n    let words = bech32.toWords(pubkey);\n    let address = bech32.encode(HRP, words);\n    return new Address(address);\n  }\n\n  bech32() {\n    return this.value;\n  }\n\n}\n\nexports.Address = Address;\n\nclass Nonce {\n  constructor(value) {\n    this.value = value;\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n  hex() {\n    return numberToPaddedHex(this.value);\n  }\n\n}\n\nexports.Nonce = Nonce;\n\nfunction numberToPaddedHex(value) {\n  let hex = value.toString(16);\n  return zeroPadStringIfOddLength(hex);\n}\n\nexports.numberToPaddedHex = numberToPaddedHex;\n\nfunction isPaddedHex(input) {\n  input = input || \"\";\n  let decodedThenEncoded = Buffer.from(input, \"hex\").toString(\"hex\");\n  return input.toUpperCase() == decodedThenEncoded.toUpperCase();\n}\n\nexports.isPaddedHex = isPaddedHex;\n\nfunction zeroPadStringIfOddLength(input) {\n  input = input || \"\";\n\n  if (input.length % 2 == 1) {\n    return \"0\" + input;\n  }\n\n  return input;\n}\n\nexports.zeroPadStringIfOddLength = zeroPadStringIfOddLength;","map":{"version":3,"sources":["../src/primitives.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;AAGA;;AAEG;;;AACH,MAAM,GAAG,GAAG,KAAZ;;AAEA,MAAa,OAAb,CAAoB;EAGhB,WAAA,CAAY,KAAZ,EAAyB;IACrB,KAAK,KAAL,GAAa,KAAb;EACH;;EAEgB,OAAV,UAAU,CAAC,MAAD,EAAe;IAC5B,IAAI,KAAK,GAAG,MAAM,CAAC,OAAP,CAAe,MAAf,CAAZ;IACA,IAAI,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,KAAnB,CAAd;IACA,OAAO,IAAI,OAAJ,CAAY,OAAZ,CAAP;EACH;;EAED,MAAM,GAAA;IACF,OAAO,KAAK,KAAZ;EACH;;AAfe;;AAApB,OAAA,CAAA,OAAA,GAAA,OAAA;;AAkBA,MAAa,KAAb,CAAkB;EAGd,WAAA,CAAY,KAAZ,EAAyB;IACrB,KAAK,KAAL,GAAa,KAAb;EACH;;EAED,OAAO,GAAA;IACH,OAAO,KAAK,KAAZ;EACH;;EAED,GAAG,GAAA;IACC,OAAO,iBAAiB,CAAC,KAAK,KAAN,CAAxB;EACH;;AAba;;AAAlB,OAAA,CAAA,KAAA,GAAA,KAAA;;AAgBA,SAAgB,iBAAhB,CAAkC,KAAlC,EAA+C;EAC3C,IAAI,GAAG,GAAG,KAAK,CAAC,QAAN,CAAe,EAAf,CAAV;EACA,OAAO,wBAAwB,CAAC,GAAD,CAA/B;AACH;;AAHD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAKA,SAAgB,WAAhB,CAA4B,KAA5B,EAAyC;EACrC,KAAK,GAAG,KAAK,IAAI,EAAjB;EACA,IAAI,kBAAkB,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,KAAnB,EAA0B,QAA1B,CAAmC,KAAnC,CAAzB;EACA,OAAO,KAAK,CAAC,WAAN,MAAuB,kBAAkB,CAAC,WAAnB,EAA9B;AACH;;AAJD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAMA,SAAgB,wBAAhB,CAAyC,KAAzC,EAAsD;EAClD,KAAK,GAAG,KAAK,IAAI,EAAjB;;EAEA,IAAI,KAAK,CAAC,MAAN,GAAe,CAAf,IAAoB,CAAxB,EAA2B;IACvB,OAAO,MAAM,KAAb;EACH;;EAED,OAAO,KAAP;AACH;;AARD,OAAA,CAAA,wBAAA,GAAA,wBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.zeroPadStringIfOddLength = exports.isPaddedHex = exports.numberToPaddedHex = exports.Nonce = exports.Address = void 0;\r\nconst bech32 = __importStar(require(\"bech32\"));\r\n/**\r\n * The human-readable-part of the bech32 addresses.\r\n */\r\nconst HRP = \"erd\";\r\nclass Address {\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n    static fromPubkey(pubkey) {\r\n        let words = bech32.toWords(pubkey);\r\n        let address = bech32.encode(HRP, words);\r\n        return new Address(address);\r\n    }\r\n    bech32() {\r\n        return this.value;\r\n    }\r\n}\r\nexports.Address = Address;\r\nclass Nonce {\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n    hex() {\r\n        return numberToPaddedHex(this.value);\r\n    }\r\n}\r\nexports.Nonce = Nonce;\r\nfunction numberToPaddedHex(value) {\r\n    let hex = value.toString(16);\r\n    return zeroPadStringIfOddLength(hex);\r\n}\r\nexports.numberToPaddedHex = numberToPaddedHex;\r\nfunction isPaddedHex(input) {\r\n    input = input || \"\";\r\n    let decodedThenEncoded = Buffer.from(input, \"hex\").toString(\"hex\");\r\n    return input.toUpperCase() == decodedThenEncoded.toUpperCase();\r\n}\r\nexports.isPaddedHex = isPaddedHex;\r\nfunction zeroPadStringIfOddLength(input) {\r\n    input = input || \"\";\r\n    if (input.length % 2 == 1) {\r\n        return \"0\" + input;\r\n    }\r\n    return input;\r\n}\r\nexports.zeroPadStringIfOddLength = zeroPadStringIfOddLength;\r\n//# sourceMappingURL=primitives.js.map"]},"metadata":{},"sourceType":"script"}