{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SmartContract = void 0;\n\nconst balance_1 = require(\"../balance\");\n\nconst address_1 = require(\"../address\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst transactionPayload_1 = require(\"../transactionPayload\");\n\nconst code_1 = require(\"./code\");\n\nconst codeMetadata_1 = require(\"./codeMetadata\");\n\nconst transactionPayloadBuilders_1 = require(\"./transactionPayloadBuilders\");\n\nconst function_1 = require(\"./function\");\n\nconst query_1 = require(\"./query\");\n\nconst utils_1 = require(\"../utils\");\n\nconst utils_2 = require(\"./codec/utils\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst interaction_1 = require(\"./interaction\");\n\nconst createKeccakHash = require(\"keccak\");\n/**\r\n * An abstraction for deploying and interacting with Smart Contracts.\r\n */\n\n\nclass SmartContract {\n  /**\r\n   * Create a SmartContract object by providing its address on the Network.\r\n   */\n  constructor(_ref) {\n    let {\n      address,\n      abi\n    } = _ref;\n    this.owner = new address_1.Address();\n    this.address = new address_1.Address();\n    this.code = code_1.Code.nothing();\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.trackOfTransactions = [];\n    /**\r\n     * This object contains a function for each endpoint defined by the contract.\r\n     * (a bit similar to web3js's \"contract.methods\").\r\n     */\n\n    this.methods = {};\n    this.address = address || new address_1.Address();\n    this.abi = abi;\n    this.methods = {};\n\n    if (abi) {\n      this.setupMethods();\n    }\n  }\n\n  setupMethods() {\n    let contract = this;\n    let abi = this.getAbi();\n\n    for (const definition of abi.getAllEndpoints()) {\n      let functionName = definition.name; // For each endpoint defined by the ABI, we attach a function to the \"methods\" object,\n      // a function that receives typed values as arguments\n      // and returns a prepared contract interaction.\n\n      this.methods[functionName] = function (args) {\n        let func = new function_1.ContractFunction(functionName);\n        let interaction = new interaction_1.Interaction(contract, func, func, args || []);\n        return interaction;\n      };\n    }\n  }\n  /**\r\n   * Sets the address, as on Network.\r\n   */\n\n\n  setAddress(address) {\n    this.address = address;\n  }\n  /**\r\n   * Gets the address, as on Network.\r\n   */\n\n\n  getAddress() {\n    return this.address;\n  }\n  /**\r\n   * Gets the owner address.\r\n   *\r\n   * Note that this function doesn't query the Network, but uses the information acquired when signing a deployment transaction.\r\n   * Therefore, currently, this function is useful only in the context of deploying Smart Contracts.\r\n   */\n\n\n  getOwner() {\n    this.owner.assertNotEmpty();\n    return this.owner;\n  }\n  /**\r\n   * Gets the {@link Code} of the Smart Contract. Does not query the Network.\r\n   */\n\n\n  getCode() {\n    return this.code;\n  }\n  /**\r\n   * Gets the {@link CodeMetadata} of the Smart Contract. Does not query the Network.\r\n   */\n\n\n  getCodeMetadata() {\n    return this.codeMetadata;\n  }\n\n  setAbi(abi) {\n    this.abi = abi;\n  }\n\n  getAbi() {\n    utils_1.guardValueIsSet(\"abi\", this.abi);\n    return this.abi;\n  }\n  /**\r\n   * Creates a {@link Transaction} for deploying the Smart Contract to the Network.\r\n   */\n\n\n  deploy(_ref2) {\n    let {\n      code,\n      codeMetadata,\n      initArguments,\n      value,\n      gasLimit\n    } = _ref2;\n    codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n    initArguments = initArguments || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractDeploy().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: address_1.Address.Zero(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    this.code = code;\n    this.codeMetadata = codeMetadata;\n    transaction.onSigned.on(this.onDeploySigned.bind(this));\n    return transaction;\n  }\n\n  onDeploySigned(_ref3) {\n    let {\n      transaction,\n      signedBy\n    } = _ref3;\n    this.owner = signedBy;\n    let nonce = transaction.getNonce();\n    let address = SmartContract.computeAddress(this.owner, nonce);\n    this.setAddress(address);\n    this.trackOfTransactions.push(transaction);\n  }\n  /**\r\n   * Creates a {@link Transaction} for upgrading the Smart Contract on the Network.\r\n   */\n\n\n  upgrade(_ref4) {\n    let {\n      code,\n      codeMetadata,\n      initArguments,\n      value,\n      gasLimit\n    } = _ref4;\n    codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n    initArguments = initArguments || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractUpgrade().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: this.getAddress(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    this.code = code;\n    this.codeMetadata = codeMetadata;\n    transaction.onSigned.on(this.onUpgradeSigned.bind(this));\n    return transaction;\n  }\n\n  onUpgradeSigned(_ref5) {\n    let {\n      transaction\n    } = _ref5;\n    this.trackOfTransactions.push(transaction);\n  }\n  /**\r\n   * Creates a {@link Transaction} for calling (a function of) the Smart Contract.\r\n   */\n\n\n  call(_ref6) {\n    let {\n      func,\n      args,\n      value,\n      gasLimit,\n      receiver\n    } = _ref6;\n    args = args || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractCall().setFunction(func).setArgs(args).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: receiver ? receiver : this.getAddress(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    transaction.onSigned.on(this.onCallSigned.bind(this));\n    return transaction;\n  }\n\n  onCallSigned(_ref7) {\n    let {\n      transaction\n    } = _ref7;\n    this.trackOfTransactions.push(transaction);\n  }\n\n  runQuery(provider, _ref8) {\n    let {\n      func,\n      args,\n      value,\n      caller\n    } = _ref8;\n    return __awaiter(this, void 0, void 0, function* () {\n      let query = new query_1.Query({\n        address: this.address,\n        func: func,\n        args: args,\n        value: value,\n        caller: caller\n      });\n      let response = yield provider.queryContract(query);\n      return response;\n    });\n  }\n  /**\r\n   * Computes the address of a Smart Contract.\r\n   * The address is computed deterministically, from the address of the owner and the nonce of the deployment transaction.\r\n   *\r\n   * @param owner The owner of the Smart Contract\r\n   * @param nonce The owner nonce used for the deployment transaction\r\n   */\n\n\n  static computeAddress(owner, nonce) {\n    let initialPadding = Buffer.alloc(8, 0);\n    let ownerPubkey = owner.pubkey();\n    let shardSelector = ownerPubkey.slice(30);\n    let ownerNonceBytes = Buffer.alloc(8);\n    const bigNonce = new bignumber_js_1.default(nonce.valueOf().toString(10));\n    const bigNonceBuffer = utils_2.bigIntToBuffer(bigNonce);\n    ownerNonceBytes.write(bigNonceBuffer.reverse().toString('hex'), 'hex');\n    let bytesToHash = Buffer.concat([ownerPubkey, ownerNonceBytes]);\n    let hash = createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    let vmTypeBytes = Buffer.from(transactionPayloadBuilders_1.ArwenVirtualMachine, \"hex\");\n    let addressBytes = Buffer.concat([initialPadding, vmTypeBytes, hash.slice(10, 30), shardSelector]);\n    let address = new address_1.Address(addressBytes);\n    return address;\n  }\n\n}\n\nexports.SmartContract = SmartContract;","map":{"version":3,"sources":["../../src/smartcontracts/smartContract.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SmartContract = void 0;\r\nconst balance_1 = require(\"../balance\");\r\nconst address_1 = require(\"../address\");\r\nconst transaction_1 = require(\"../transaction\");\r\nconst transactionPayload_1 = require(\"../transactionPayload\");\r\nconst code_1 = require(\"./code\");\r\nconst codeMetadata_1 = require(\"./codeMetadata\");\r\nconst transactionPayloadBuilders_1 = require(\"./transactionPayloadBuilders\");\r\nconst function_1 = require(\"./function\");\r\nconst query_1 = require(\"./query\");\r\nconst utils_1 = require(\"../utils\");\r\nconst utils_2 = require(\"./codec/utils\");\r\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\r\nconst interaction_1 = require(\"./interaction\");\r\nconst createKeccakHash = require(\"keccak\");\r\n/**\r\n * An abstraction for deploying and interacting with Smart Contracts.\r\n */\r\nclass SmartContract {\r\n    /**\r\n     * Create a SmartContract object by providing its address on the Network.\r\n     */\r\n    constructor({ address, abi }) {\r\n        this.owner = new address_1.Address();\r\n        this.address = new address_1.Address();\r\n        this.code = code_1.Code.nothing();\r\n        this.codeMetadata = new codeMetadata_1.CodeMetadata();\r\n        this.trackOfTransactions = [];\r\n        /**\r\n         * This object contains a function for each endpoint defined by the contract.\r\n         * (a bit similar to web3js's \"contract.methods\").\r\n         */\r\n        this.methods = {};\r\n        this.address = address || new address_1.Address();\r\n        this.abi = abi;\r\n        this.methods = {};\r\n        if (abi) {\r\n            this.setupMethods();\r\n        }\r\n    }\r\n    setupMethods() {\r\n        let contract = this;\r\n        let abi = this.getAbi();\r\n        for (const definition of abi.getAllEndpoints()) {\r\n            let functionName = definition.name;\r\n            // For each endpoint defined by the ABI, we attach a function to the \"methods\" object,\r\n            // a function that receives typed values as arguments\r\n            // and returns a prepared contract interaction.\r\n            this.methods[functionName] = function (args) {\r\n                let func = new function_1.ContractFunction(functionName);\r\n                let interaction = new interaction_1.Interaction(contract, func, func, args || []);\r\n                return interaction;\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Sets the address, as on Network.\r\n     */\r\n    setAddress(address) {\r\n        this.address = address;\r\n    }\r\n    /**\r\n     * Gets the address, as on Network.\r\n     */\r\n    getAddress() {\r\n        return this.address;\r\n    }\r\n    /**\r\n     * Gets the owner address.\r\n     *\r\n     * Note that this function doesn't query the Network, but uses the information acquired when signing a deployment transaction.\r\n     * Therefore, currently, this function is useful only in the context of deploying Smart Contracts.\r\n     */\r\n    getOwner() {\r\n        this.owner.assertNotEmpty();\r\n        return this.owner;\r\n    }\r\n    /**\r\n     * Gets the {@link Code} of the Smart Contract. Does not query the Network.\r\n     */\r\n    getCode() {\r\n        return this.code;\r\n    }\r\n    /**\r\n     * Gets the {@link CodeMetadata} of the Smart Contract. Does not query the Network.\r\n     */\r\n    getCodeMetadata() {\r\n        return this.codeMetadata;\r\n    }\r\n    setAbi(abi) {\r\n        this.abi = abi;\r\n    }\r\n    getAbi() {\r\n        utils_1.guardValueIsSet(\"abi\", this.abi);\r\n        return this.abi;\r\n    }\r\n    /**\r\n     * Creates a {@link Transaction} for deploying the Smart Contract to the Network.\r\n     */\r\n    deploy({ code, codeMetadata, initArguments, value, gasLimit }) {\r\n        codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\r\n        initArguments = initArguments || [];\r\n        value = value || balance_1.Balance.Zero();\r\n        let payload = transactionPayload_1.TransactionPayload.contractDeploy()\r\n            .setCode(code)\r\n            .setCodeMetadata(codeMetadata)\r\n            .setInitArgs(initArguments)\r\n            .build();\r\n        let transaction = new transaction_1.Transaction({\r\n            receiver: address_1.Address.Zero(),\r\n            value: value,\r\n            gasLimit: gasLimit,\r\n            data: payload\r\n        });\r\n        this.code = code;\r\n        this.codeMetadata = codeMetadata;\r\n        transaction.onSigned.on(this.onDeploySigned.bind(this));\r\n        return transaction;\r\n    }\r\n    onDeploySigned({ transaction, signedBy }) {\r\n        this.owner = signedBy;\r\n        let nonce = transaction.getNonce();\r\n        let address = SmartContract.computeAddress(this.owner, nonce);\r\n        this.setAddress(address);\r\n        this.trackOfTransactions.push(transaction);\r\n    }\r\n    /**\r\n     * Creates a {@link Transaction} for upgrading the Smart Contract on the Network.\r\n     */\r\n    upgrade({ code, codeMetadata, initArguments, value, gasLimit }) {\r\n        codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\r\n        initArguments = initArguments || [];\r\n        value = value || balance_1.Balance.Zero();\r\n        let payload = transactionPayload_1.TransactionPayload.contractUpgrade()\r\n            .setCode(code)\r\n            .setCodeMetadata(codeMetadata)\r\n            .setInitArgs(initArguments)\r\n            .build();\r\n        let transaction = new transaction_1.Transaction({\r\n            receiver: this.getAddress(),\r\n            value: value,\r\n            gasLimit: gasLimit,\r\n            data: payload\r\n        });\r\n        this.code = code;\r\n        this.codeMetadata = codeMetadata;\r\n        transaction.onSigned.on(this.onUpgradeSigned.bind(this));\r\n        return transaction;\r\n    }\r\n    onUpgradeSigned({ transaction }) {\r\n        this.trackOfTransactions.push(transaction);\r\n    }\r\n    /**\r\n     * Creates a {@link Transaction} for calling (a function of) the Smart Contract.\r\n     */\r\n    call({ func, args, value, gasLimit, receiver }) {\r\n        args = args || [];\r\n        value = value || balance_1.Balance.Zero();\r\n        let payload = transactionPayload_1.TransactionPayload.contractCall()\r\n            .setFunction(func)\r\n            .setArgs(args)\r\n            .build();\r\n        let transaction = new transaction_1.Transaction({\r\n            receiver: receiver ? receiver : this.getAddress(),\r\n            value: value,\r\n            gasLimit: gasLimit,\r\n            data: payload\r\n        });\r\n        transaction.onSigned.on(this.onCallSigned.bind(this));\r\n        return transaction;\r\n    }\r\n    onCallSigned({ transaction }) {\r\n        this.trackOfTransactions.push(transaction);\r\n    }\r\n    runQuery(provider, { func, args, value, caller }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let query = new query_1.Query({\r\n                address: this.address,\r\n                func: func,\r\n                args: args,\r\n                value: value,\r\n                caller: caller\r\n            });\r\n            let response = yield provider.queryContract(query);\r\n            return response;\r\n        });\r\n    }\r\n    /**\r\n     * Computes the address of a Smart Contract.\r\n     * The address is computed deterministically, from the address of the owner and the nonce of the deployment transaction.\r\n     *\r\n     * @param owner The owner of the Smart Contract\r\n     * @param nonce The owner nonce used for the deployment transaction\r\n     */\r\n    static computeAddress(owner, nonce) {\r\n        let initialPadding = Buffer.alloc(8, 0);\r\n        let ownerPubkey = owner.pubkey();\r\n        let shardSelector = ownerPubkey.slice(30);\r\n        let ownerNonceBytes = Buffer.alloc(8);\r\n        const bigNonce = new bignumber_js_1.default(nonce.valueOf().toString(10));\r\n        const bigNonceBuffer = utils_2.bigIntToBuffer(bigNonce);\r\n        ownerNonceBytes.write(bigNonceBuffer.reverse().toString('hex'), 'hex');\r\n        let bytesToHash = Buffer.concat([ownerPubkey, ownerNonceBytes]);\r\n        let hash = createKeccakHash(\"keccak256\").update(bytesToHash).digest();\r\n        let vmTypeBytes = Buffer.from(transactionPayloadBuilders_1.ArwenVirtualMachine, \"hex\");\r\n        let addressBytes = Buffer.concat([\r\n            initialPadding,\r\n            vmTypeBytes,\r\n            hash.slice(10, 30),\r\n            shardSelector\r\n        ]);\r\n        let address = new address_1.Address(addressBytes);\r\n        return address;\r\n    }\r\n}\r\nexports.SmartContract = SmartContract;\r\n//# sourceMappingURL=smartContract.js.map"]},"metadata":{},"sourceType":"script"}