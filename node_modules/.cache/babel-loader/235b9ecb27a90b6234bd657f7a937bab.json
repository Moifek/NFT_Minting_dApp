{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Egld = exports.createBalanceBuilder = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst _1 = require(\".\");\n\nconst errors_1 = require(\"./errors\");\n\nconst token_1 = require(\"./token\");\n\nclass BalanceBuilderImpl {\n  constructor(token) {\n    this.token = token;\n    this.nonce_ = null;\n\n    if (token.isFungible()) {\n      this.setNonce(0);\n    }\n  }\n\n  value(value) {\n    value = applyDenomination(value, this.token.decimals);\n    return new _1.Balance(this.token, this.getNonce(), value);\n  }\n\n  raw(value) {\n    return new _1.Balance(this.token, this.getNonce(), value);\n  }\n\n  nonce(nonce) {\n    let builder = createBalanceBuilder(this.token);\n    builder.setNonce(nonce);\n    return builder;\n  }\n\n  setNonce(nonce) {\n    this.nonce_ = new bignumber_js_1.default(nonce);\n  }\n\n  one() {\n    return this.value(1);\n  }\n\n  hasNonce() {\n    return this.token.isFungible() || this.nonce_ != null;\n  }\n\n  getNonce() {\n    if (this.nonce_ == null) {\n      throw new _1.ErrInvariantFailed(\"Nonce was not provided\");\n    }\n\n    return new bignumber_js_1.default(this.nonce_);\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  getTokenIdentifier() {\n    return this.getToken().getTokenIdentifier();\n  }\n\n}\n\nfunction createBalanceBuilder(token) {\n  let impl = new BalanceBuilderImpl(token);\n  let denominated = impl.value.bind(impl);\n  let others = {\n    value: impl.value.bind(impl),\n    raw: impl.raw.bind(impl),\n    nonce: impl.nonce.bind(impl),\n    setNonce: impl.setNonce.bind(impl),\n    one: impl.one.bind(impl),\n    hasNonce: impl.hasNonce.bind(impl),\n    getNonce: impl.getNonce.bind(impl),\n    getToken: impl.getToken.bind(impl),\n    getTokenIdentifier: impl.getTokenIdentifier.bind(impl)\n  };\n  return Object.assign(denominated, others);\n}\n\nexports.createBalanceBuilder = createBalanceBuilder;\n/**\r\n * Builder for an EGLD value.\r\n */\n\nexports.Egld = createBalanceBuilder(new token_1.Token({\n  identifier: \"EGLD\",\n  name: \"eGold\",\n  decimals: 18,\n  type: token_1.TokenType.Fungible\n}));\n\nfunction applyDenomination(value, decimals) {\n  if (decimals < 0) {\n    throw new errors_1.ErrInvalidArgument(\"The number of decimals must be positive\");\n  }\n\n  return new bignumber_js_1.default(value).shiftedBy(decimals).decimalPlaces(0);\n}","map":{"version":3,"sources":["../src/balanceBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,MAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AA2DA,MAAM,kBAAN,CAAwB;EAGpB,WAAA,CAAY,KAAZ,EAAwB;IACpB,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,MAAL,GAAc,IAAd;;IACA,IAAI,KAAK,CAAC,UAAN,EAAJ,EAAwB;MACpB,KAAK,QAAL,CAAc,CAAd;IACH;EACJ;;EAED,KAAK,CAAC,KAAD,EAAuB;IACxB,KAAK,GAAG,iBAAiB,CAAC,KAAD,EAAQ,KAAK,KAAL,CAAW,QAAnB,CAAzB;IACA,OAAO,IAAI,EAAA,CAAA,OAAJ,CAAY,KAAK,KAAjB,EAAwB,KAAK,QAAL,EAAxB,EAAyC,KAAzC,CAAP;EACH;;EAED,GAAG,CAAC,KAAD,EAAuB;IACtB,OAAO,IAAI,EAAA,CAAA,OAAJ,CAAY,KAAK,KAAjB,EAAwB,KAAK,QAAL,EAAxB,EAAyC,KAAzC,CAAP;EACH;;EAED,KAAK,CAAC,KAAD,EAAuB;IACxB,IAAI,OAAO,GAAG,oBAAoB,CAAC,KAAK,KAAN,CAAlC;IACA,OAAO,CAAC,QAAR,CAAiB,KAAjB;IACA,OAAO,OAAP;EACH;;EAED,QAAQ,CAAC,KAAD,EAAuB;IAC3B,KAAK,MAAL,GAAc,IAAI,cAAA,CAAA,OAAJ,CAAc,KAAd,CAAd;EACH;;EAED,GAAG,GAAA;IACC,OAAO,KAAK,KAAL,CAAW,CAAX,CAAP;EACH;;EAED,QAAQ,GAAA;IACJ,OAAO,KAAK,KAAL,CAAW,UAAX,MAA2B,KAAK,MAAL,IAAe,IAAjD;EACH;;EAED,QAAQ,GAAA;IACJ,IAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;MACrB,MAAM,IAAI,EAAA,CAAA,kBAAJ,CAAuB,wBAAvB,CAAN;IACH;;IACD,OAAO,IAAI,cAAA,CAAA,OAAJ,CAAc,KAAK,MAAnB,CAAP;EACH;;EAED,QAAQ,GAAA;IACJ,OAAO,KAAK,KAAZ;EACH;;EAED,kBAAkB,GAAA;IACd,OAAO,KAAK,QAAL,GAAgB,kBAAhB,EAAP;EACH;;AAnDmB;;AAsDxB,SAAgB,oBAAhB,CAAqC,KAArC,EAAiD;EAC7C,IAAI,IAAI,GAAG,IAAI,kBAAJ,CAAuB,KAAvB,CAAX;EACA,IAAI,WAAW,GAAmB,IAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAAlC;EACA,IAAI,MAAM,GAAG;IACT,KAAK,EAAE,IAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,IAAhB,CADE;IAET,GAAG,EAAE,IAAI,CAAC,GAAL,CAAS,IAAT,CAAc,IAAd,CAFI;IAGT,KAAK,EAAE,IAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAHE;IAIT,QAAQ,EAAE,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAJD;IAKT,GAAG,EAAE,IAAI,CAAC,GAAL,CAAS,IAAT,CAAc,IAAd,CALI;IAMT,QAAQ,EAAE,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAND;IAOT,QAAQ,EAAE,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAPD;IAQT,QAAQ,EAAE,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,IAAnB,CARD;IAST,kBAAkB,EAAE,IAAI,CAAC,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B;EATX,CAAb;EAWA,OAAO,MAAM,CAAC,MAAP,CAAc,WAAd,EAA2B,MAA3B,CAAP;AACH;;AAfD,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAiBA;;AAEG;;AACU,OAAA,CAAA,IAAA,GAAO,oBAAoB,CAAC,IAAI,OAAA,CAAA,KAAJ,CAAU;EAAE,UAAU,EAAE,MAAd;EAAsB,IAAI,EAAE,OAA5B;EAAqC,QAAQ,EAAE,EAA/C;EAAmD,IAAI,EAAE,OAAA,CAAA,SAAA,CAAU;AAAnE,CAAV,CAAD,CAA3B;;AAEb,SAAS,iBAAT,CAA2B,KAA3B,EAAmD,QAAnD,EAAmE;EAC/D,IAAI,QAAQ,GAAG,CAAf,EAAkB;IACd,MAAM,IAAI,QAAA,CAAA,kBAAJ,CAAuB,yCAAvB,CAAN;EACH;;EACD,OAAO,IAAI,cAAA,CAAA,OAAJ,CAAc,KAAd,EAAqB,SAArB,CAA+B,QAA/B,EAAyC,aAAzC,CAAuD,CAAvD,CAAP;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Egld = exports.createBalanceBuilder = void 0;\r\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\r\nconst _1 = require(\".\");\r\nconst errors_1 = require(\"./errors\");\r\nconst token_1 = require(\"./token\");\r\nclass BalanceBuilderImpl {\r\n    constructor(token) {\r\n        this.token = token;\r\n        this.nonce_ = null;\r\n        if (token.isFungible()) {\r\n            this.setNonce(0);\r\n        }\r\n    }\r\n    value(value) {\r\n        value = applyDenomination(value, this.token.decimals);\r\n        return new _1.Balance(this.token, this.getNonce(), value);\r\n    }\r\n    raw(value) {\r\n        return new _1.Balance(this.token, this.getNonce(), value);\r\n    }\r\n    nonce(nonce) {\r\n        let builder = createBalanceBuilder(this.token);\r\n        builder.setNonce(nonce);\r\n        return builder;\r\n    }\r\n    setNonce(nonce) {\r\n        this.nonce_ = new bignumber_js_1.default(nonce);\r\n    }\r\n    one() {\r\n        return this.value(1);\r\n    }\r\n    hasNonce() {\r\n        return this.token.isFungible() || this.nonce_ != null;\r\n    }\r\n    getNonce() {\r\n        if (this.nonce_ == null) {\r\n            throw new _1.ErrInvariantFailed(\"Nonce was not provided\");\r\n        }\r\n        return new bignumber_js_1.default(this.nonce_);\r\n    }\r\n    getToken() {\r\n        return this.token;\r\n    }\r\n    getTokenIdentifier() {\r\n        return this.getToken().getTokenIdentifier();\r\n    }\r\n}\r\nfunction createBalanceBuilder(token) {\r\n    let impl = new BalanceBuilderImpl(token);\r\n    let denominated = impl.value.bind(impl);\r\n    let others = {\r\n        value: impl.value.bind(impl),\r\n        raw: impl.raw.bind(impl),\r\n        nonce: impl.nonce.bind(impl),\r\n        setNonce: impl.setNonce.bind(impl),\r\n        one: impl.one.bind(impl),\r\n        hasNonce: impl.hasNonce.bind(impl),\r\n        getNonce: impl.getNonce.bind(impl),\r\n        getToken: impl.getToken.bind(impl),\r\n        getTokenIdentifier: impl.getTokenIdentifier.bind(impl)\r\n    };\r\n    return Object.assign(denominated, others);\r\n}\r\nexports.createBalanceBuilder = createBalanceBuilder;\r\n/**\r\n * Builder for an EGLD value.\r\n */\r\nexports.Egld = createBalanceBuilder(new token_1.Token({ identifier: \"EGLD\", name: \"eGold\", decimals: 18, type: token_1.TokenType.Fungible }));\r\nfunction applyDenomination(value, decimals) {\r\n    if (decimals < 0) {\r\n        throw new errors_1.ErrInvalidArgument(\"The number of decimals must be positive\");\r\n    }\r\n    return new bignumber_js_1.default(value).shiftedBy(decimals).decimalPlaces(0);\r\n}\r\n//# sourceMappingURL=balanceBuilder.js.map"]},"metadata":{},"sourceType":"script"}