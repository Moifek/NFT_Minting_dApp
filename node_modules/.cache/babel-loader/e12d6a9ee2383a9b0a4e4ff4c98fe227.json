{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { transactionServices, useGetAccountInfo, useGetNetworkConfig, refreshAccount } from \"@elrondnetwork/dapp-core\";\nimport axios from \"axios\";\nimport { ProxyNetworkProvider } from \"@elrondnetwork/erdjs-network-providers\";\nimport { Address, NetworkConfig, AbiRegistry, SmartContractAbi, SmartContract, ContractFunction, ProxyProvider } from \"@elrondnetwork/erdjs\"; //import { promises } from \"fs\";\n//import * as fs from \"fs\";\n\nimport { getTransactions } from \"apiRequests\";\nimport { contractAddress } from \"config\";\nimport \"./Homeindex.css\"; //import { stringify } from \"querystring\";\n\nimport data from \"./test.json\";\nimport { getMintTransaction, publicEndpointSetup, GetAddress } from \"./utils\";\nexport const Home = () => {\n  _s();\n\n  const [count, setCount] = useState(0);\n  const {\n    address\n  } = useGetAccountInfo();\n  /**************************************************Block Jdid **************************/\n\n  const {\n    success,\n    fail,\n    hasActiveTransactions\n  } = transactionServices.useGetActiveTransactionsStatus();\n  const {\n    network: {\n      apiAddress\n    }\n  } = useGetNetworkConfig(); //console.log(\"******************\", apiAddress); //https://devnet-api.elrond.com\n\n  const [state, setState] = React.useState({\n    transactions: [],\n    transactionsFetched: undefined\n  });\n  const account = useGetAccountInfo();\n  console.log(\"***ACCOUNT ADRESS***:\", account.address); //erd14vwdlxxn93nxpph830f00y5g6qal3nndp7mtjg00verhtykp9nnqrmethw\n\n  const fetchData = () => {\n    if (success || fail || !hasActiveTransactions) {\n      getTransactions({\n        apiAddress,\n        address: account.address,\n        timeout: 3000,\n        contractAddress\n      }).then(_ref => {\n        let {\n          data,\n          success: transactionsFetched\n        } = _ref;\n        refreshAccount();\n        setState({\n          transactions: data,\n          transactionsFetched\n        });\n      });\n    }\n  };\n\n  React.useEffect(fetchData, [success, fail, hasActiveTransactions]);\n\n  const add = function () {\n    let factor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    if (factor < 0) {\n      if (count > 0) setCount(count + factor);\n    } else {\n      setCount(count + factor);\n    }\n  };\n\n  const syncProviderConfig = async provider => {\n    return NetworkConfig.getDefault().sync(provider); //return UserSigner.fromWallet() get user wallet signer\n  };\n\n  function createSmartContractInstance(abi, SCaddress) {\n    const contract = new SmartContract({\n      address: SCaddress ? new Address(SCaddress) : undefined,\n      abi: abi && new SmartContractAbi(abi, abi.interfaces.map(iface => iface.name))\n    });\n    return contract;\n  }\n\n  const abi = async () => {\n    let networkProvider = new ProxyNetworkProvider(\"https://devnet-gateway.elrond.com\");\n    let networkConfig = await networkProvider.getNetworkConfig();\n    let provider = new ProxyProvider(\"https://devnet-gateway.elrond.com\");\n    await GetAddress(address);\n    await syncProviderConfig(provider);\n    let jsonContent = JSON.parse(JSON.stringify(data)); //let abi = new SmartContractAbi(abiRegistry, [\"MyContract\"]);\n\n    let registry = new AbiRegistry().extend(jsonContent);\n    let abiRegistry = registry.remapToKnownTypes();\n    console.log(abiRegistry);\n    let contract = createSmartContractInstance(abiRegistry, \"erd1qqqqqqqqqqqqqpgqdx22q4lg64w20fsscll2w5z5lc08whac5uhslwwwp7\");\n    console.log(contract);\n    console.log(contract.getAbi().getEndpoint(\"getNftPrice\"));\n    let response = await contract.runQuery(provider, {\n      func: new ContractFunction(\"getNftPrice\"),\n      args: [],\n      caller: new Address(\"erd16ht3gyfw6xfcm9s89swczscas85y882am3atdar487mz3dzy5uhszny4gn\")\n    });\n    let mintx = getMintTransaction(\"erd1qqqqqqqqqqqqqpgqdx22q4lg64w20fsscll2w5z5lc08whac5uhslwwwp7\", 14000000, 2);\n    const {\n      signer,\n      LoggedUserAccount\n    } = await publicEndpointSetup(provider);\n    console.log(LoggedUserAccount.nonce);\n    mintx.setNonce(LoggedUserAccount.getNonceThenIncrement());\n    console.log(mintx.getNonce());\n    console.log(LoggedUserAccount.nonce);\n    signer.sign(mintx); // await commonTxOperations(mintx, LoggedUserAccount, signer, provider);\n\n    console.log(LoggedUserAccount);\n    await mintx.send(provider);\n    await mintx.awaitExecuted(provider);\n    const txHash = mintx.getHash();\n    console.log(txHash);\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*', console.log(`Transaction: /transactions/${txHash}`);\n    let explorer = `https://devnet-explorer.elrond.com/${txHash}`;\n    let res = await axios.get(explorer);\n    console.log(res.statusText);\n    return res.statusText;\n  };\n\n  console.log(abi());\n  return abi();\n};\n\n_s(Home, \"qqY7xQdROoUFM7OEiBWwTPtpWqY=\", false, function () {\n  return [useGetAccountInfo, transactionServices.useGetActiveTransactionsStatus, useGetNetworkConfig, useGetAccountInfo];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/adam/NFT_Minting_dApp/src/pages/Home/index.tsx"],"names":["React","useState","transactionServices","useGetAccountInfo","useGetNetworkConfig","refreshAccount","axios","ProxyNetworkProvider","Address","NetworkConfig","AbiRegistry","SmartContractAbi","SmartContract","ContractFunction","ProxyProvider","getTransactions","contractAddress","data","getMintTransaction","publicEndpointSetup","GetAddress","Home","count","setCount","address","success","fail","hasActiveTransactions","useGetActiveTransactionsStatus","network","apiAddress","state","setState","transactions","transactionsFetched","undefined","account","console","log","fetchData","timeout","then","useEffect","add","factor","syncProviderConfig","provider","getDefault","sync","createSmartContractInstance","abi","SCaddress","contract","interfaces","map","iface","name","networkProvider","networkConfig","getNetworkConfig","jsonContent","JSON","parse","stringify","registry","extend","abiRegistry","remapToKnownTypes","getAbi","getEndpoint","response","runQuery","func","args","caller","mintx","signer","LoggedUserAccount","nonce","setNonce","getNonceThenIncrement","getNonce","sign","send","awaitExecuted","txHash","getHash","defaults","headers","post","explorer","res","get","statusText"],"mappings":"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","sourcesContent":["import React, { FC, useState } from \"react\";\nimport {\n  transactionServices,\n  useGetAccountInfo,\n  useGetNetworkConfig,\n  refreshAccount,\n} from \"@elrondnetwork/dapp-core\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { dAppName } from \"config\";\nimport { routeNames } from \"routes\";\nimport { ProxyNetworkProvider } from \"@elrondnetwork/erdjs-network-providers\";\nimport {\n  Address,\n  NetworkConfig,\n  AbiRegistry,\n  SmartContractAbi,\n  SmartContract,\n  ContractFunction,\n  IProvider,\n  ProxyProvider,\n  Nonce,\n  QueryResponse,\n} from \"@elrondnetwork/erdjs\";\n//import { promises } from \"fs\";\n//import * as fs from \"fs\";\nimport { TransactionOnNetwork } from \"@elrondnetwork/erdjs/out/transactionOnNetwork\";\nimport { getTransactions } from \"apiRequests\";\nimport { contractAddress } from \"config\";\nimport logo from \"./logo.png\";\nimport gif1 from \"./gif1.gif\";\nimport { StateType } from \"./types\";\nimport \"./Homeindex.css\";\n//import { stringify } from \"querystring\";\nimport data from \"./test.json\";\nimport {\n  commonTxOperations,\n  getMintTransaction,\n  publicEndpointSetup,\n  GetAddress,\n} from \"./utils\";\nimport { sign } from \"crypto\";\nimport { config } from \"process\";\n//import { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n  title: string;\n  initialCount: number;\n  SCaddress: Address;\n}\n\nexport const Home: FC<Props> = () => {\n  const [count, setCount] = useState(0);\n  const { address } = useGetAccountInfo();\n\n  /**************************************************Block Jdid **************************/\n  const { success, fail, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const {\n    network: { apiAddress },\n  } = useGetNetworkConfig();\n  //console.log(\"******************\", apiAddress); //https://devnet-api.elrond.com\n\n  const [state, setState] = React.useState<StateType>({\n    transactions: [],\n    transactionsFetched: undefined,\n  });\n  const account = useGetAccountInfo();\n  console.log(\"***ACCOUNT ADRESS***:\", account.address); //erd14vwdlxxn93nxpph830f00y5g6qal3nndp7mtjg00verhtykp9nnqrmethw\n\n  const fetchData = () => {\n    if (success || fail || !hasActiveTransactions) {\n      getTransactions({\n        apiAddress,\n        address: account.address,\n        timeout: 3000,\n        contractAddress,\n      }).then(({ data, success: transactionsFetched }) => {\n        refreshAccount();\n        setState({\n          transactions: data,\n          transactionsFetched,\n        });\n      });\n    }\n  };\n  React.useEffect(fetchData, [success, fail, hasActiveTransactions]);\n\n  const add = (factor = 1) => {\n    if (factor < 0) {\n      if (count > 0) setCount(count + factor);\n    } else {\n      setCount(count + factor);\n    }\n  };\n\n  const syncProviderConfig = async (provider: IProvider) => {\n    return NetworkConfig.getDefault().sync(provider);\n    //return UserSigner.fromWallet() get user wallet signer\n  };\n\n  function createSmartContractInstance(abi?: AbiRegistry, SCaddress?: string) {\n    const contract = new SmartContract({\n      address: SCaddress ? new Address(SCaddress) : undefined,\n      abi:\n        abi &&\n        new SmartContractAbi(\n          abi,\n          abi.interfaces.map((iface) => iface.name)\n        ),\n    });\n\n    return contract;\n  }\n\n  const abi = async () => {\n    let networkProvider = new ProxyNetworkProvider(\n      \"https://devnet-gateway.elrond.com\"\n    );\n    let networkConfig = await networkProvider.getNetworkConfig();\n    let provider = new ProxyProvider(\"https://devnet-gateway.elrond.com\");\n    await GetAddress(address);\n    await syncProviderConfig(provider);\n    let jsonContent = JSON.parse(JSON.stringify(data));\n    //let abi = new SmartContractAbi(abiRegistry, [\"MyContract\"]);\n    let registry = new AbiRegistry().extend(jsonContent);\n    let abiRegistry = registry.remapToKnownTypes();\n    console.log(abiRegistry);\n\n    let contract = createSmartContractInstance(\n      abiRegistry,\n      \"erd1qqqqqqqqqqqqqpgqdx22q4lg64w20fsscll2w5z5lc08whac5uhslwwwp7\"\n    );\n    console.log(contract);\n    console.log(contract.getAbi().getEndpoint(\"getNftPrice\"));\n    let response = await contract.runQuery(provider, {\n      func: new ContractFunction(\"getNftPrice\"),\n      args: [],\n      caller: new Address(\n        \"erd16ht3gyfw6xfcm9s89swczscas85y882am3atdar487mz3dzy5uhszny4gn\"\n      ),\n    });\n    let mintx = getMintTransaction(\n      \"erd1qqqqqqqqqqqqqpgqdx22q4lg64w20fsscll2w5z5lc08whac5uhslwwwp7\",\n      14000000,\n      2\n    );\n    const { signer, LoggedUserAccount } = await publicEndpointSetup(provider);\n    console.log(LoggedUserAccount.nonce);\n    mintx.setNonce(LoggedUserAccount.getNonceThenIncrement());\n    console.log(mintx.getNonce());\n    console.log(LoggedUserAccount.nonce);\n    signer.sign(mintx);\n    // await commonTxOperations(mintx, LoggedUserAccount, signer, provider);\n    console.log(LoggedUserAccount);\n    await mintx.send(provider);\n    await mintx.awaitExecuted(provider);\n    const txHash = mintx.getHash();\n    console.log(txHash);\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*',\n    console.log(`Transaction: /transactions/${txHash}`);\n    let explorer = `https://devnet-explorer.elrond.com/${txHash}`;\n    let res = await axios.get(explorer);\n    console.log(res.statusText);\n    return res.statusText;\n  };\n\n  console.log(abi());\n\n  return (abi());\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}