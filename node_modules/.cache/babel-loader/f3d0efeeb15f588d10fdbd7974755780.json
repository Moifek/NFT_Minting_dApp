{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Balance = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst errors_1 = require(\"./errors\");\n\nconst balanceBuilder_1 = require(\"./balanceBuilder\");\n/**\r\n * The number of decimals handled when working with EGLD or ESDT values.\r\n */\n\n\nconst DEFAULT_BIGNUMBER_DECIMAL_PLACES = 18;\nbignumber_js_1.BigNumber.set({\n  DECIMAL_PLACES: DEFAULT_BIGNUMBER_DECIMAL_PLACES,\n  ROUNDING_MODE: 1\n});\n/**\r\n * Balance, as an immutable object.\r\n */\n\nclass Balance {\n  /**\r\n   * Creates a Balance object.\r\n   */\n  constructor(token, nonce, value) {\n    this.nonce = new bignumber_js_1.BigNumber(0);\n    this.value = new bignumber_js_1.BigNumber(0);\n    this.token = token;\n    this.nonce = new bignumber_js_1.BigNumber(nonce);\n    this.value = new bignumber_js_1.BigNumber(value);\n  }\n  /**\r\n   * Creates a balance object from an EGLD value (denomination will be applied).\r\n   */\n\n\n  static egld(value) {\n    return balanceBuilder_1.Egld(value);\n  }\n  /**\r\n   * Creates a balance object from a string (with denomination included).\r\n   */\n\n\n  static fromString(value) {\n    return balanceBuilder_1.Egld.raw(value || \"0\");\n  }\n  /**\r\n   * Creates a zero-valued EGLD balance object.\r\n   */\n\n\n  static Zero() {\n    return balanceBuilder_1.Egld(0);\n  }\n\n  isZero() {\n    return this.value.isZero();\n  }\n\n  isEgld() {\n    return this.token.isEgld();\n  }\n\n  isSet() {\n    return !this.isZero();\n  }\n  /**\r\n   * Returns the string representation of the value (as EGLD currency).\r\n   */\n\n\n  toCurrencyString() {\n    return `${this.toDenominated()} ${this.token.getTokenIdentifier()}`;\n  }\n\n  toDenominated() {\n    return this.value.shiftedBy(-this.token.decimals).toFixed(this.token.decimals);\n  }\n  /**\r\n   * Returns the string representation of the value (its big-integer form).\r\n   */\n\n\n  toString() {\n    return this.value.toFixed();\n  }\n  /**\r\n   * Converts the balance to a pretty, plain JavaScript object.\r\n   */\n\n\n  toJSON() {\n    return {\n      asString: this.toString(),\n      asCurrencyString: this.toCurrencyString()\n    };\n  }\n\n  getNonce() {\n    return this.nonce;\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n  plus(other) {\n    this.checkSameToken(other);\n    return new Balance(this.token, this.nonce, this.value.plus(other.value));\n  }\n\n  minus(other) {\n    this.checkSameToken(other);\n    return new Balance(this.token, this.nonce, this.value.minus(other.value));\n  }\n\n  times(n) {\n    return new Balance(this.token, this.nonce, this.value.times(n));\n  }\n\n  div(n) {\n    return new Balance(this.token, this.nonce, this.value.div(n));\n  }\n\n  isEqualTo(other) {\n    this.checkSameToken(other);\n    return this.value.isEqualTo(other.value);\n  }\n\n  checkSameToken(other) {\n    if (this.token != other.token) {\n      throw new errors_1.ErrInvalidArgument(\"Different token types\");\n    }\n\n    if (!this.nonce.isEqualTo(other.nonce)) {\n      throw new errors_1.ErrInvalidArgument(\"Different nonces\");\n    }\n  }\n\n}\n\nexports.Balance = Balance;","map":{"version":3,"sources":["../src/balance.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Balance = void 0;\r\nconst bignumber_js_1 = require(\"bignumber.js\");\r\nconst errors_1 = require(\"./errors\");\r\nconst balanceBuilder_1 = require(\"./balanceBuilder\");\r\n/**\r\n * The number of decimals handled when working with EGLD or ESDT values.\r\n */\r\nconst DEFAULT_BIGNUMBER_DECIMAL_PLACES = 18;\r\nbignumber_js_1.BigNumber.set({ DECIMAL_PLACES: DEFAULT_BIGNUMBER_DECIMAL_PLACES, ROUNDING_MODE: 1 });\r\n/**\r\n * Balance, as an immutable object.\r\n */\r\nclass Balance {\r\n    /**\r\n     * Creates a Balance object.\r\n     */\r\n    constructor(token, nonce, value) {\r\n        this.nonce = new bignumber_js_1.BigNumber(0);\r\n        this.value = new bignumber_js_1.BigNumber(0);\r\n        this.token = token;\r\n        this.nonce = new bignumber_js_1.BigNumber(nonce);\r\n        this.value = new bignumber_js_1.BigNumber(value);\r\n    }\r\n    /**\r\n     * Creates a balance object from an EGLD value (denomination will be applied).\r\n     */\r\n    static egld(value) {\r\n        return balanceBuilder_1.Egld(value);\r\n    }\r\n    /**\r\n     * Creates a balance object from a string (with denomination included).\r\n     */\r\n    static fromString(value) {\r\n        return balanceBuilder_1.Egld.raw(value || \"0\");\r\n    }\r\n    /**\r\n     * Creates a zero-valued EGLD balance object.\r\n     */\r\n    static Zero() {\r\n        return balanceBuilder_1.Egld(0);\r\n    }\r\n    isZero() {\r\n        return this.value.isZero();\r\n    }\r\n    isEgld() {\r\n        return this.token.isEgld();\r\n    }\r\n    isSet() {\r\n        return !this.isZero();\r\n    }\r\n    /**\r\n     * Returns the string representation of the value (as EGLD currency).\r\n     */\r\n    toCurrencyString() {\r\n        return `${this.toDenominated()} ${this.token.getTokenIdentifier()}`;\r\n    }\r\n    toDenominated() {\r\n        return this.value.shiftedBy(-this.token.decimals).toFixed(this.token.decimals);\r\n    }\r\n    /**\r\n     * Returns the string representation of the value (its big-integer form).\r\n     */\r\n    toString() {\r\n        return this.value.toFixed();\r\n    }\r\n    /**\r\n     * Converts the balance to a pretty, plain JavaScript object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            asString: this.toString(),\r\n            asCurrencyString: this.toCurrencyString()\r\n        };\r\n    }\r\n    getNonce() {\r\n        return this.nonce;\r\n    }\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n    plus(other) {\r\n        this.checkSameToken(other);\r\n        return new Balance(this.token, this.nonce, this.value.plus(other.value));\r\n    }\r\n    minus(other) {\r\n        this.checkSameToken(other);\r\n        return new Balance(this.token, this.nonce, this.value.minus(other.value));\r\n    }\r\n    times(n) {\r\n        return new Balance(this.token, this.nonce, this.value.times(n));\r\n    }\r\n    div(n) {\r\n        return new Balance(this.token, this.nonce, this.value.div(n));\r\n    }\r\n    isEqualTo(other) {\r\n        this.checkSameToken(other);\r\n        return this.value.isEqualTo(other.value);\r\n    }\r\n    checkSameToken(other) {\r\n        if (this.token != other.token) {\r\n            throw new errors_1.ErrInvalidArgument(\"Different token types\");\r\n        }\r\n        if (!this.nonce.isEqualTo(other.nonce)) {\r\n            throw new errors_1.ErrInvalidArgument(\"Different nonces\");\r\n        }\r\n    }\r\n}\r\nexports.Balance = Balance;\r\n//# sourceMappingURL=balance.js.map"]},"metadata":{},"sourceType":"script"}