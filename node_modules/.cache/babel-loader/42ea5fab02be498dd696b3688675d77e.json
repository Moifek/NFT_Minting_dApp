{"ast":null,"code":"// Copyright 2014 Google Inc. All rights reserved\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n/**\r\n * @fileoverview The U2F api.\r\n */\n'use strict';\n/** Namespace for the U2F api.\r\n * @type {Object}\r\n */\n\nvar u2f = u2f || {};\nmodule.exports = u2f; // Adaptation for u2f-api package\n\n/**\r\n * The U2F extension id\r\n * @type {string}\r\n * @const\r\n */\n\nu2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';\n/**\r\n * Message types for messsages to/from the extension\r\n * @const\r\n * @enum {string}\r\n */\n\nu2f.MessageTypes = {\n  'U2F_REGISTER_REQUEST': 'u2f_register_request',\n  'U2F_SIGN_REQUEST': 'u2f_sign_request',\n  'U2F_REGISTER_RESPONSE': 'u2f_register_response',\n  'U2F_SIGN_RESPONSE': 'u2f_sign_response'\n};\n/**\r\n * Response status codes\r\n * @const\r\n * @enum {number}\r\n */\n\nu2f.ErrorCodes = {\n  'OK': 0,\n  'OTHER_ERROR': 1,\n  'BAD_REQUEST': 2,\n  'CONFIGURATION_UNSUPPORTED': 3,\n  'DEVICE_INELIGIBLE': 4,\n  'TIMEOUT': 5\n};\n/**\r\n * A message type for registration requests\r\n * @typedef {{\r\n *   type: u2f.MessageTypes,\r\n *   signRequests: Array.<u2f.SignRequest>,\r\n *   registerRequests: ?Array.<u2f.RegisterRequest>,\r\n *   timeoutSeconds: ?number,\r\n *   requestId: ?number\r\n * }}\r\n */\n\nu2f.Request;\n/**\r\n * A message for registration responses\r\n * @typedef {{\r\n *   type: u2f.MessageTypes,\r\n *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),\r\n *   requestId: ?number\r\n * }}\r\n */\n\nu2f.Response;\n/**\r\n * An error object for responses\r\n * @typedef {{\r\n *   errorCode: u2f.ErrorCodes,\r\n *   errorMessage: ?string\r\n * }}\r\n */\n\nu2f.Error;\n/**\r\n * Data object for a single sign request.\r\n * @typedef {{\r\n *   version: string,\r\n *   challenge: string,\r\n *   keyHandle: string,\r\n *   appId: string\r\n * }}\r\n */\n\nu2f.SignRequest;\n/**\r\n * Data object for a sign response.\r\n * @typedef {{\r\n *   keyHandle: string,\r\n *   signatureData: string,\r\n *   clientData: string\r\n * }}\r\n */\n\nu2f.SignResponse;\n/**\r\n * Data object for a registration request.\r\n * @typedef {{\r\n *   version: string,\r\n *   challenge: string,\r\n *   appId: string\r\n * }}\r\n */\n\nu2f.RegisterRequest;\n/**\r\n * Data object for a registration response.\r\n * @typedef {{\r\n *   registrationData: string,\r\n *   clientData: string\r\n * }}\r\n */\n\nu2f.RegisterResponse; // Low level MessagePort API support\n\n/**\r\n * Call MessagePort disconnect\r\n */\n\nu2f.disconnect = function () {\n  if (u2f.port_ && u2f.port_.port_) {\n    u2f.port_.port_.disconnect();\n    u2f.port_ = null;\n  }\n};\n/**\r\n * Sets up a MessagePort to the U2F extension using the\r\n * available mechanisms.\r\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\r\n */\n\n\nu2f.getMessagePort = function (callback) {\n  if (typeof chrome != 'undefined' && chrome.runtime) {\n    // The actual message here does not matter, but we need to get a reply\n    // for the callback to run. Thus, send an empty signature request\n    // in order to get a failure response.\n    var msg = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: []\n    };\n    chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function () {\n      if (!chrome.runtime.lastError) {\n        // We are on a whitelisted origin and can talk directly\n        // with the extension.\n        u2f.getChromeRuntimePort_(callback);\n      } else {\n        // chrome.runtime was available, but we couldn't message\n        // the extension directly, use iframe\n        u2f.getIframePort_(callback);\n      }\n    });\n  } else {\n    // chrome.runtime was not available at all, which is normal\n    // when this origin doesn't have access to any extensions.\n    u2f.getIframePort_(callback);\n  }\n};\n/**\r\n * Connects directly to the extension via chrome.runtime.connect\r\n * @param {function(u2f.WrappedChromeRuntimePort_)} callback\r\n * @private\r\n */\n\n\nu2f.getChromeRuntimePort_ = function (callback) {\n  var port = chrome.runtime.connect(u2f.EXTENSION_ID, {\n    'includeTlsChannelId': true\n  });\n  setTimeout(function () {\n    callback(null, new u2f.WrappedChromeRuntimePort_(port));\n  }, 0);\n};\n/**\r\n * A wrapper for chrome.runtime.Port that is compatible with MessagePort.\r\n * @param {Port} port\r\n * @constructor\r\n * @private\r\n */\n\n\nu2f.WrappedChromeRuntimePort_ = function (port) {\n  this.port_ = port;\n};\n/**\r\n * Posts a message on the underlying channel.\r\n * @param {Object} message\r\n */\n\n\nu2f.WrappedChromeRuntimePort_.prototype.postMessage = function (message) {\n  this.port_.postMessage(message);\n};\n/**\r\n * Emulates the HTML 5 addEventListener interface. Works only for the\r\n * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.\r\n * @param {string} eventName\r\n * @param {function({data: Object})} handler\r\n */\n\n\nu2f.WrappedChromeRuntimePort_.prototype.addEventListener = function (eventName, handler) {\n  var name = eventName.toLowerCase();\n\n  if (name == 'message' || name == 'onmessage') {\n    this.port_.onMessage.addListener(function (message) {\n      // Emulate a minimal MessageEvent object\n      handler({\n        'data': message\n      });\n    });\n  } else {\n    console.error('WrappedChromeRuntimePort only supports onMessage');\n  }\n};\n/**\r\n * Sets up an embedded trampoline iframe, sourced from the extension.\r\n * @param {function(MessagePort)} callback\r\n * @private\r\n */\n\n\nu2f.getIframePort_ = function (callback) {\n  // Create the iframe\n  var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;\n  var iframe = document.createElement('iframe');\n  iframe.src = iframeOrigin + '/u2f-comms.html';\n  iframe.setAttribute('style', 'display:none');\n  document.body.appendChild(iframe);\n  var hasCalledBack = false;\n  var channel = new MessageChannel();\n\n  var ready = function (message) {\n    if (message.data == 'ready') {\n      channel.port1.removeEventListener('message', ready);\n\n      if (!hasCalledBack) {\n        hasCalledBack = true;\n        callback(null, channel.port1);\n      }\n    } else {\n      console.error('First event on iframe port was not \"ready\"');\n    }\n  };\n\n  channel.port1.addEventListener('message', ready);\n  channel.port1.start();\n  iframe.addEventListener('load', function () {\n    // Deliver the port to the iframe and initialize\n    iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);\n  }); // Give this 200ms to initialize, after that, we treat this method as failed\n\n  setTimeout(function () {\n    if (!hasCalledBack) {\n      hasCalledBack = true;\n      callback(new Error(\"IFrame extension not supported\"));\n    }\n  }, 200);\n}; // High-level JS API\n\n/**\r\n * Default extension response timeout in seconds.\r\n * @const\r\n */\n\n\nu2f.EXTENSION_TIMEOUT_SEC = 30;\n/**\r\n * A singleton instance for a MessagePort to the extension.\r\n * @type {MessagePort|u2f.WrappedChromeRuntimePort_}\r\n * @private\r\n */\n\nu2f.port_ = null;\n/**\r\n * Callbacks waiting for a port\r\n * @type {Array.<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}\r\n * @private\r\n */\n\nu2f.waitingForPort_ = [];\n/**\r\n * A counter for requestIds.\r\n * @type {number}\r\n * @private\r\n */\n\nu2f.reqCounter_ = 0;\n/**\r\n * A map from requestIds to client callbacks\r\n * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))\r\n *                       |function((u2f.Error|u2f.SignResponse)))>}\r\n * @private\r\n */\n\nu2f.callbackMap_ = {};\n/**\r\n * Creates or retrieves the MessagePort singleton to use.\r\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\r\n * @private\r\n */\n\nu2f.getPortSingleton_ = function (callback) {\n  if (u2f.port_) {\n    callback(null, u2f.port_);\n  } else {\n    if (u2f.waitingForPort_.length == 0) {\n      u2f.getMessagePort(function (err, port) {\n        if (!err) {\n          u2f.port_ = port;\n          u2f.port_.addEventListener('message',\n          /** @type {function(Event)} */\n          u2f.responseHandler_);\n        } // Careful, here be async callbacks. Maybe.\n\n\n        while (u2f.waitingForPort_.length) u2f.waitingForPort_.shift()(err, port);\n      });\n    }\n\n    u2f.waitingForPort_.push(callback);\n  }\n};\n/**\r\n * Handles response messages from the extension.\r\n * @param {MessageEvent.<u2f.Response>} message\r\n * @private\r\n */\n\n\nu2f.responseHandler_ = function (message) {\n  var response = message.data;\n  var reqId = response['requestId'];\n\n  if (!reqId || !u2f.callbackMap_[reqId]) {\n    console.error('Unknown or missing requestId in response.');\n    return;\n  }\n\n  var cb = u2f.callbackMap_[reqId];\n  delete u2f.callbackMap_[reqId];\n  cb(null, response['responseData']);\n};\n/**\r\n * Calls the callback with true or false as first and only argument\r\n * @param {Function} callback\r\n */\n\n\nu2f.isSupported = function (callback) {\n  u2f.getPortSingleton_(function (err, port) {\n    callback(!err);\n  });\n};\n/**\r\n * Dispatches an array of sign requests to available U2F tokens.\r\n * @param {Array.<u2f.SignRequest>} signRequests\r\n * @param {function((u2f.Error|u2f.SignResponse))} callback\r\n * @param {number=} opt_timeoutSeconds\r\n */\n\n\nu2f.sign = function (signRequests, callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function (err, port) {\n    if (err) return callback(err);\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: signRequests,\n      timeoutSeconds: typeof opt_timeoutSeconds !== 'undefined' ? opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC,\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n/**\r\n * Dispatches register requests to available U2F tokens. An array of sign\r\n * requests identifies already registered tokens.\r\n * @param {Array.<u2f.RegisterRequest>} registerRequests\r\n * @param {Array.<u2f.SignRequest>} signRequests\r\n * @param {function((u2f.Error|u2f.RegisterResponse))} callback\r\n * @param {number=} opt_timeoutSeconds\r\n */\n\n\nu2f.register = function (registerRequests, signRequests, callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function (err, port) {\n    if (err) return callback(err);\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,\n      signRequests: signRequests,\n      registerRequests: registerRequests,\n      timeoutSeconds: typeof opt_timeoutSeconds !== 'undefined' ? opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC,\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};","map":{"version":3,"names":["u2f","module","exports","EXTENSION_ID","MessageTypes","ErrorCodes","Request","Response","Error","SignRequest","SignResponse","RegisterRequest","RegisterResponse","disconnect","port_","getMessagePort","callback","chrome","runtime","msg","type","U2F_SIGN_REQUEST","signRequests","sendMessage","lastError","getChromeRuntimePort_","getIframePort_","port","connect","setTimeout","WrappedChromeRuntimePort_","prototype","postMessage","message","addEventListener","eventName","handler","name","toLowerCase","onMessage","addListener","console","error","iframeOrigin","iframe","document","createElement","src","setAttribute","body","appendChild","hasCalledBack","channel","MessageChannel","ready","data","port1","removeEventListener","start","contentWindow","port2","EXTENSION_TIMEOUT_SEC","waitingForPort_","reqCounter_","callbackMap_","getPortSingleton_","length","err","responseHandler_","shift","push","response","reqId","cb","isSupported","sign","opt_timeoutSeconds","req","timeoutSeconds","requestId","register","registerRequests","U2F_REGISTER_REQUEST"],"sources":["C:/Users/Mmo-Omen/Documents/GitHub/NFT_Minting_dApp/node_modules/u2f-api/lib/google-u2f-api.js"],"sourcesContent":["// Copyright 2014 Google Inc. All rights reserved\r\n//\r\n// Use of this source code is governed by a BSD-style\r\n// license that can be found in the LICENSE file or at\r\n// https://developers.google.com/open-source/licenses/bsd\r\n\r\n/**\r\n * @fileoverview The U2F api.\r\n */\r\n\r\n'use strict';\r\n\r\n/** Namespace for the U2F api.\r\n * @type {Object}\r\n */\r\nvar u2f = u2f || {};\r\n\r\nmodule.exports = u2f; // Adaptation for u2f-api package\r\n\r\n/**\r\n * The U2F extension id\r\n * @type {string}\r\n * @const\r\n */\r\nu2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';\r\n\r\n/**\r\n * Message types for messsages to/from the extension\r\n * @const\r\n * @enum {string}\r\n */\r\nu2f.MessageTypes = {\r\n  'U2F_REGISTER_REQUEST': 'u2f_register_request',\r\n  'U2F_SIGN_REQUEST': 'u2f_sign_request',\r\n  'U2F_REGISTER_RESPONSE': 'u2f_register_response',\r\n  'U2F_SIGN_RESPONSE': 'u2f_sign_response'\r\n};\r\n\r\n/**\r\n * Response status codes\r\n * @const\r\n * @enum {number}\r\n */\r\nu2f.ErrorCodes = {\r\n  'OK': 0,\r\n  'OTHER_ERROR': 1,\r\n  'BAD_REQUEST': 2,\r\n  'CONFIGURATION_UNSUPPORTED': 3,\r\n  'DEVICE_INELIGIBLE': 4,\r\n  'TIMEOUT': 5\r\n};\r\n\r\n/**\r\n * A message type for registration requests\r\n * @typedef {{\r\n *   type: u2f.MessageTypes,\r\n *   signRequests: Array.<u2f.SignRequest>,\r\n *   registerRequests: ?Array.<u2f.RegisterRequest>,\r\n *   timeoutSeconds: ?number,\r\n *   requestId: ?number\r\n * }}\r\n */\r\nu2f.Request;\r\n\r\n/**\r\n * A message for registration responses\r\n * @typedef {{\r\n *   type: u2f.MessageTypes,\r\n *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),\r\n *   requestId: ?number\r\n * }}\r\n */\r\nu2f.Response;\r\n\r\n/**\r\n * An error object for responses\r\n * @typedef {{\r\n *   errorCode: u2f.ErrorCodes,\r\n *   errorMessage: ?string\r\n * }}\r\n */\r\nu2f.Error;\r\n\r\n/**\r\n * Data object for a single sign request.\r\n * @typedef {{\r\n *   version: string,\r\n *   challenge: string,\r\n *   keyHandle: string,\r\n *   appId: string\r\n * }}\r\n */\r\nu2f.SignRequest;\r\n\r\n/**\r\n * Data object for a sign response.\r\n * @typedef {{\r\n *   keyHandle: string,\r\n *   signatureData: string,\r\n *   clientData: string\r\n * }}\r\n */\r\nu2f.SignResponse;\r\n\r\n/**\r\n * Data object for a registration request.\r\n * @typedef {{\r\n *   version: string,\r\n *   challenge: string,\r\n *   appId: string\r\n * }}\r\n */\r\nu2f.RegisterRequest;\r\n\r\n/**\r\n * Data object for a registration response.\r\n * @typedef {{\r\n *   registrationData: string,\r\n *   clientData: string\r\n * }}\r\n */\r\nu2f.RegisterResponse;\r\n\r\n\r\n// Low level MessagePort API support\r\n\r\n/**\r\n * Call MessagePort disconnect\r\n */\r\nu2f.disconnect = function() {\r\n  if (u2f.port_ && u2f.port_.port_) {\r\n    u2f.port_.port_.disconnect();\r\n    u2f.port_ = null;\r\n  }\r\n};\r\n\r\n/**\r\n * Sets up a MessagePort to the U2F extension using the\r\n * available mechanisms.\r\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\r\n */\r\nu2f.getMessagePort = function(callback) {\r\n  if (typeof chrome != 'undefined' && chrome.runtime) {\r\n    // The actual message here does not matter, but we need to get a reply\r\n    // for the callback to run. Thus, send an empty signature request\r\n    // in order to get a failure response.\r\n    var msg = {\r\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\r\n      signRequests: []\r\n    };\r\n    chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {\r\n      if (!chrome.runtime.lastError) {\r\n        // We are on a whitelisted origin and can talk directly\r\n        // with the extension.\r\n        u2f.getChromeRuntimePort_(callback);\r\n      } else {\r\n        // chrome.runtime was available, but we couldn't message\r\n        // the extension directly, use iframe\r\n        u2f.getIframePort_(callback);\r\n      }\r\n    });\r\n  } else {\r\n    // chrome.runtime was not available at all, which is normal\r\n    // when this origin doesn't have access to any extensions.\r\n    u2f.getIframePort_(callback);\r\n  }\r\n};\r\n\r\n/**\r\n * Connects directly to the extension via chrome.runtime.connect\r\n * @param {function(u2f.WrappedChromeRuntimePort_)} callback\r\n * @private\r\n */\r\nu2f.getChromeRuntimePort_ = function(callback) {\r\n  var port = chrome.runtime.connect(u2f.EXTENSION_ID,\r\n    {'includeTlsChannelId': true});\r\n  setTimeout(function() {\r\n    callback(null, new u2f.WrappedChromeRuntimePort_(port));\r\n  }, 0);\r\n};\r\n\r\n/**\r\n * A wrapper for chrome.runtime.Port that is compatible with MessagePort.\r\n * @param {Port} port\r\n * @constructor\r\n * @private\r\n */\r\nu2f.WrappedChromeRuntimePort_ = function(port) {\r\n  this.port_ = port;\r\n};\r\n\r\n/**\r\n * Posts a message on the underlying channel.\r\n * @param {Object} message\r\n */\r\nu2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {\r\n  this.port_.postMessage(message);\r\n};\r\n\r\n/**\r\n * Emulates the HTML 5 addEventListener interface. Works only for the\r\n * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.\r\n * @param {string} eventName\r\n * @param {function({data: Object})} handler\r\n */\r\nu2f.WrappedChromeRuntimePort_.prototype.addEventListener =\r\n    function(eventName, handler) {\r\n  var name = eventName.toLowerCase();\r\n  if (name == 'message' || name == 'onmessage') {\r\n    this.port_.onMessage.addListener(function(message) {\r\n      // Emulate a minimal MessageEvent object\r\n      handler({'data': message});\r\n    });\r\n  } else {\r\n    console.error('WrappedChromeRuntimePort only supports onMessage');\r\n  }\r\n};\r\n\r\n/**\r\n * Sets up an embedded trampoline iframe, sourced from the extension.\r\n * @param {function(MessagePort)} callback\r\n * @private\r\n */\r\nu2f.getIframePort_ = function(callback) {\r\n  // Create the iframe\r\n  var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;\r\n  var iframe = document.createElement('iframe');\r\n  iframe.src = iframeOrigin + '/u2f-comms.html';\r\n  iframe.setAttribute('style', 'display:none');\r\n  document.body.appendChild(iframe);\r\n\r\n  var hasCalledBack = false;\r\n\r\n  var channel = new MessageChannel();\r\n  var ready = function(message) {\r\n    if (message.data == 'ready') {\r\n      channel.port1.removeEventListener('message', ready);\r\n      if (!hasCalledBack)\r\n      {\r\n        hasCalledBack = true;\r\n        callback(null, channel.port1);\r\n      }\r\n    } else {\r\n      console.error('First event on iframe port was not \"ready\"');\r\n    }\r\n  };\r\n  channel.port1.addEventListener('message', ready);\r\n  channel.port1.start();\r\n\r\n  iframe.addEventListener('load', function() {\r\n    // Deliver the port to the iframe and initialize\r\n    iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);\r\n  });\r\n\r\n  // Give this 200ms to initialize, after that, we treat this method as failed\r\n  setTimeout(function() {\r\n    if (!hasCalledBack)\r\n    {\r\n      hasCalledBack = true;\r\n      callback(new Error(\"IFrame extension not supported\"));\r\n    }\r\n  }, 200);\r\n};\r\n\r\n\r\n// High-level JS API\r\n\r\n/**\r\n * Default extension response timeout in seconds.\r\n * @const\r\n */\r\nu2f.EXTENSION_TIMEOUT_SEC = 30;\r\n\r\n/**\r\n * A singleton instance for a MessagePort to the extension.\r\n * @type {MessagePort|u2f.WrappedChromeRuntimePort_}\r\n * @private\r\n */\r\nu2f.port_ = null;\r\n\r\n/**\r\n * Callbacks waiting for a port\r\n * @type {Array.<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}\r\n * @private\r\n */\r\nu2f.waitingForPort_ = [];\r\n\r\n/**\r\n * A counter for requestIds.\r\n * @type {number}\r\n * @private\r\n */\r\nu2f.reqCounter_ = 0;\r\n\r\n/**\r\n * A map from requestIds to client callbacks\r\n * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))\r\n *                       |function((u2f.Error|u2f.SignResponse)))>}\r\n * @private\r\n */\r\nu2f.callbackMap_ = {};\r\n\r\n/**\r\n * Creates or retrieves the MessagePort singleton to use.\r\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\r\n * @private\r\n */\r\nu2f.getPortSingleton_ = function(callback) {\r\n  if (u2f.port_) {\r\n    callback(null, u2f.port_);\r\n  } else {\r\n    if (u2f.waitingForPort_.length == 0) {\r\n      u2f.getMessagePort(function(err, port) {\r\n        if (!err) {\r\n          u2f.port_ = port;\r\n          u2f.port_.addEventListener('message',\r\n            /** @type {function(Event)} */ (u2f.responseHandler_));\r\n        }\r\n\r\n        // Careful, here be async callbacks. Maybe.\r\n        while (u2f.waitingForPort_.length)\r\n          u2f.waitingForPort_.shift()(err, port);\r\n      });\r\n    }\r\n    u2f.waitingForPort_.push(callback);\r\n  }\r\n};\r\n\r\n/**\r\n * Handles response messages from the extension.\r\n * @param {MessageEvent.<u2f.Response>} message\r\n * @private\r\n */\r\nu2f.responseHandler_ = function(message) {\r\n  var response = message.data;\r\n  var reqId = response['requestId'];\r\n  if (!reqId || !u2f.callbackMap_[reqId]) {\r\n    console.error('Unknown or missing requestId in response.');\r\n    return;\r\n  }\r\n  var cb = u2f.callbackMap_[reqId];\r\n  delete u2f.callbackMap_[reqId];\r\n  cb(null, response['responseData']);\r\n};\r\n\r\n/**\r\n * Calls the callback with true or false as first and only argument\r\n * @param {Function} callback\r\n */\r\nu2f.isSupported = function(callback) {\r\n  u2f.getPortSingleton_(function(err, port) {\r\n    callback(!err);\r\n  });\r\n}\r\n\r\n/**\r\n * Dispatches an array of sign requests to available U2F tokens.\r\n * @param {Array.<u2f.SignRequest>} signRequests\r\n * @param {function((u2f.Error|u2f.SignResponse))} callback\r\n * @param {number=} opt_timeoutSeconds\r\n */\r\nu2f.sign = function(signRequests, callback, opt_timeoutSeconds) {\r\n  u2f.getPortSingleton_(function(err, port) {\r\n    if (err)\r\n      return callback(err);\r\n\r\n    var reqId = ++u2f.reqCounter_;\r\n    u2f.callbackMap_[reqId] = callback;\r\n    var req = {\r\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\r\n      signRequests: signRequests,\r\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\r\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\r\n      requestId: reqId\r\n    };\r\n    port.postMessage(req);\r\n  });\r\n};\r\n\r\n/**\r\n * Dispatches register requests to available U2F tokens. An array of sign\r\n * requests identifies already registered tokens.\r\n * @param {Array.<u2f.RegisterRequest>} registerRequests\r\n * @param {Array.<u2f.SignRequest>} signRequests\r\n * @param {function((u2f.Error|u2f.RegisterResponse))} callback\r\n * @param {number=} opt_timeoutSeconds\r\n */\r\nu2f.register = function(registerRequests, signRequests,\r\n    callback, opt_timeoutSeconds) {\r\n  u2f.getPortSingleton_(function(err, port) {\r\n    if (err)\r\n      return callback(err);\r\n\r\n    var reqId = ++u2f.reqCounter_;\r\n    u2f.callbackMap_[reqId] = callback;\r\n    var req = {\r\n      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,\r\n      signRequests: signRequests,\r\n      registerRequests: registerRequests,\r\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\r\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\r\n      requestId: reqId\r\n    };\r\n    port.postMessage(req);\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}