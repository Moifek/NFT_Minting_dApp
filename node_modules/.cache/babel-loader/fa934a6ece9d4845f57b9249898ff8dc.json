{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fields = exports.Field = exports.FieldDefinition = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst typeExpressionParser_1 = require(\"./typeExpressionParser\");\n\nclass FieldDefinition {\n  constructor(name, description, type) {\n    this.name = name;\n    this.description = description;\n    this.type = type;\n  }\n\n  static fromJSON(json) {\n    let parsedType = new typeExpressionParser_1.TypeExpressionParser().parse(json.type);\n    return new FieldDefinition(json.name, json.description, parsedType);\n  }\n\n}\n\nexports.FieldDefinition = FieldDefinition;\n\nclass Field {\n  constructor(value) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    this.value = value;\n    this.name = name;\n  }\n\n  checkTyping(expectedDefinition) {\n    const actualType = this.value.getType();\n\n    if (!actualType.equals(expectedDefinition.type)) {\n      throw new errors.ErrTypingSystem(`check type of field \"${expectedDefinition.name}; expected: ${expectedDefinition.type}, actual: ${actualType}\"`);\n    }\n\n    if (this.name != expectedDefinition.name) {\n      throw new errors.ErrTypingSystem(`check name of field \"${expectedDefinition.name}\"`);\n    }\n  }\n\n  equals(other) {\n    return this.name == other.name && this.value.equals(other.value);\n  }\n\n}\n\nexports.Field = Field;\n\nclass Fields {\n  static checkTyping(fields, definitions) {\n    if (fields.length != definitions.length) {\n      throw new errors.ErrTypingSystem(\"fields length vs. field definitions length\");\n    }\n\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i];\n      let definition = definitions[i];\n      field.checkTyping(definition);\n    }\n  }\n\n  static equals(actual, expected) {\n    if (actual.length != expected.length) {\n      return false;\n    }\n\n    for (let i = 0; i < actual.length; i++) {\n      let selfField = actual[i];\n      let otherField = expected[i];\n\n      if (!selfField.equals(otherField)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.Fields = Fields;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/fields.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Fields = exports.Field = exports.FieldDefinition = void 0;\r\nconst errors = __importStar(require(\"../../errors\"));\r\nconst typeExpressionParser_1 = require(\"./typeExpressionParser\");\r\nclass FieldDefinition {\r\n    constructor(name, description, type) {\r\n        this.name = name;\r\n        this.description = description;\r\n        this.type = type;\r\n    }\r\n    static fromJSON(json) {\r\n        let parsedType = new typeExpressionParser_1.TypeExpressionParser().parse(json.type);\r\n        return new FieldDefinition(json.name, json.description, parsedType);\r\n    }\r\n}\r\nexports.FieldDefinition = FieldDefinition;\r\nclass Field {\r\n    constructor(value, name = \"\") {\r\n        this.value = value;\r\n        this.name = name;\r\n    }\r\n    checkTyping(expectedDefinition) {\r\n        const actualType = this.value.getType();\r\n        if (!actualType.equals(expectedDefinition.type)) {\r\n            throw new errors.ErrTypingSystem(`check type of field \"${expectedDefinition.name}; expected: ${expectedDefinition.type}, actual: ${actualType}\"`);\r\n        }\r\n        if (this.name != expectedDefinition.name) {\r\n            throw new errors.ErrTypingSystem(`check name of field \"${expectedDefinition.name}\"`);\r\n        }\r\n    }\r\n    equals(other) {\r\n        return this.name == other.name && this.value.equals(other.value);\r\n    }\r\n}\r\nexports.Field = Field;\r\nclass Fields {\r\n    static checkTyping(fields, definitions) {\r\n        if (fields.length != definitions.length) {\r\n            throw new errors.ErrTypingSystem(\"fields length vs. field definitions length\");\r\n        }\r\n        for (let i = 0; i < fields.length; i++) {\r\n            let field = fields[i];\r\n            let definition = definitions[i];\r\n            field.checkTyping(definition);\r\n        }\r\n    }\r\n    static equals(actual, expected) {\r\n        if (actual.length != expected.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < actual.length; i++) {\r\n            let selfField = actual[i];\r\n            let otherField = expected[i];\r\n            if (!selfField.equals(otherField)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.Fields = Fields;\r\n//# sourceMappingURL=fields.js.map"]},"metadata":{},"sourceType":"script"}