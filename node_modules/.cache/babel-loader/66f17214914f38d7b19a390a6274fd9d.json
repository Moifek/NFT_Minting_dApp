{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayVec = exports.ArrayVecType = void 0;\n\nconst __1 = require(\"../..\");\n\nconst collections_1 = require(\"./collections\");\n\nconst types_1 = require(\"./types\"); // A type for known-length arrays. E.g. \"array20\", \"array32\", \"array64\" etc.\n\n\nclass ArrayVecType extends types_1.Type {\n  constructor(length, typeParameter) {\n    super(\"Array\", [typeParameter]);\n\n    __1.guardTrue(length > 0, \"array length > 0\");\n\n    this.length = length;\n  }\n\n}\n\nexports.ArrayVecType = ArrayVecType;\n\nclass ArrayVec extends types_1.TypedValue {\n  constructor(type, items) {\n    super(type);\n\n    __1.guardLength(items, type.length);\n\n    this.backingCollection = new collections_1.CollectionOfTypedValues(items);\n  }\n\n  getLength() {\n    return this.backingCollection.getLength();\n  }\n\n  getItems() {\n    return this.backingCollection.getItems();\n  }\n\n  valueOf() {\n    return this.backingCollection.valueOf();\n  }\n\n  equals(other) {\n    return this.backingCollection.equals(other.backingCollection);\n  }\n\n}\n\nexports.ArrayVec = ArrayVec;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/genericArray.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,GAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA,C,CAEA;;;AACA,MAAa,YAAb,SAAkC,OAAA,CAAA,IAAlC,CAAsC;EAGlC,WAAA,CAAY,MAAZ,EAA4B,aAA5B,EAA+C;IAC3C,MAAM,OAAN,EAAe,CAAC,aAAD,CAAf;;IAEA,GAAA,CAAA,SAAA,CAAU,MAAM,GAAG,CAAnB,EAAsB,kBAAtB;;IACA,KAAK,MAAL,GAAc,MAAd;EACH;;AARiC;;AAAtC,OAAA,CAAA,YAAA,GAAA,YAAA;;AAWA,MAAa,QAAb,SAA8B,OAAA,CAAA,UAA9B,CAAwC;EAGpC,WAAA,CAAY,IAAZ,EAAgC,KAAhC,EAAmD;IAC/C,MAAM,IAAN;;IACA,GAAA,CAAA,WAAA,CAAY,KAAZ,EAAmB,IAAI,CAAC,MAAxB;;IACA,KAAK,iBAAL,GAAyB,IAAI,aAAA,CAAA,uBAAJ,CAA4B,KAA5B,CAAzB;EACH;;EAED,SAAS,GAAA;IACL,OAAO,KAAK,iBAAL,CAAuB,SAAvB,EAAP;EACH;;EAED,QAAQ,GAAA;IACJ,OAAO,KAAK,iBAAL,CAAuB,QAAvB,EAAP;EACH;;EAED,OAAO,GAAA;IACH,OAAO,KAAK,iBAAL,CAAuB,OAAvB,EAAP;EACH;;EAED,MAAM,CAAC,KAAD,EAAgB;IAClB,OAAO,KAAK,iBAAL,CAAuB,MAAvB,CAA8B,KAAK,CAAC,iBAApC,CAAP;EACH;;AAvBmC;;AAAxC,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ArrayVec = exports.ArrayVecType = void 0;\r\nconst __1 = require(\"../..\");\r\nconst collections_1 = require(\"./collections\");\r\nconst types_1 = require(\"./types\");\r\n// A type for known-length arrays. E.g. \"array20\", \"array32\", \"array64\" etc.\r\nclass ArrayVecType extends types_1.Type {\r\n    constructor(length, typeParameter) {\r\n        super(\"Array\", [typeParameter]);\r\n        __1.guardTrue(length > 0, \"array length > 0\");\r\n        this.length = length;\r\n    }\r\n}\r\nexports.ArrayVecType = ArrayVecType;\r\nclass ArrayVec extends types_1.TypedValue {\r\n    constructor(type, items) {\r\n        super(type);\r\n        __1.guardLength(items, type.length);\r\n        this.backingCollection = new collections_1.CollectionOfTypedValues(items);\r\n    }\r\n    getLength() {\r\n        return this.backingCollection.getLength();\r\n    }\r\n    getItems() {\r\n        return this.backingCollection.getItems();\r\n    }\r\n    valueOf() {\r\n        return this.backingCollection.valueOf();\r\n    }\r\n    equals(other) {\r\n        return this.backingCollection.equals(other.backingCollection);\r\n    }\r\n}\r\nexports.ArrayVec = ArrayVec;\r\n//# sourceMappingURL=genericArray.js.map"]},"metadata":{},"sourceType":"script"}