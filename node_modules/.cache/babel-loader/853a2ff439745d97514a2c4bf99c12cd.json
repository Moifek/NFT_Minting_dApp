{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkStake = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n/**\r\n * An object holding Network stake parameters.\r\n */\n\n\nclass NetworkStake {\n  constructor() {\n    this.TotalValidators = 0;\n    this.ActiveValidators = 0;\n    this.QueueSize = 0;\n    this.TotalStaked = new bignumber_js_1.default(0);\n  }\n  /**\r\n   * Gets the default configuration object (think of the Singleton pattern).\r\n   */\n\n\n  static getDefault() {\n    if (!NetworkStake.default) {\n      NetworkStake.default = new NetworkStake();\n    }\n\n    return NetworkStake.default;\n  }\n  /**\r\n   * Synchronizes a configuration object by querying the Network, through a {@link IProvider}.\r\n   * @param provider The provider to use\r\n   */\n\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let fresh = yield provider.getNetworkStake();\n      Object.assign(this, fresh);\n    });\n  }\n  /**\r\n   * Constructs a configuration object from a HTTP response (as returned by the provider).\r\n   */\n\n\n  static fromHttpResponse(payload) {\n    let networkStake = new NetworkStake();\n    networkStake.TotalValidators = Number(payload[\"totalValidators\"]);\n    networkStake.ActiveValidators = Number(payload[\"activeValidators\"]);\n    networkStake.QueueSize = Number(payload[\"queueSize\"]);\n    networkStake.TotalStaked = new bignumber_js_1.default(payload[\"totalStaked\"]);\n    return networkStake;\n  }\n\n}\n\nexports.NetworkStake = NetworkStake;","map":{"version":3,"sources":["../src/networkStake.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,YAAb,CAAyB;EAqBvB,WAAA,GAAA;IACE,KAAK,eAAL,GAAuB,CAAvB;IACA,KAAK,gBAAL,GAAwB,CAAxB;IACA,KAAK,SAAL,GAAiB,CAAjB;IACA,KAAK,WAAL,GAAmB,IAAI,cAAA,CAAA,OAAJ,CAAc,CAAd,CAAnB;EACD;EAED;;AAEG;;;EACc,OAAV,UAAU,GAAA;IACf,IAAI,CAAC,YAAY,CAAC,OAAlB,EAA2B;MACzB,YAAY,CAAC,OAAb,GAAuB,IAAI,YAAJ,EAAvB;IACD;;IAED,OAAO,YAAY,CAAC,OAApB;EACD;EAED;;;AAGG;;;EACG,IAAI,CAAC,QAAD,EAAuB;;MAC/B,IAAI,KAAK,GAAiB,MAAM,QAAQ,CAAC,eAAT,EAAhC;MACA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,KAApB;IACD,C;EAAA;EAED;;AAEG;;;EACoB,OAAhB,gBAAgB,CAAC,OAAD,EAAa;IAClC,IAAI,YAAY,GAAG,IAAI,YAAJ,EAAnB;IAEA,YAAY,CAAC,eAAb,GAA+B,MAAM,CAAC,OAAO,CAAC,iBAAD,CAAR,CAArC;IACA,YAAY,CAAC,gBAAb,GAAgC,MAAM,CAAC,OAAO,CAAC,kBAAD,CAAR,CAAtC;IACA,YAAY,CAAC,SAAb,GAAyB,MAAM,CAAC,OAAO,CAAC,WAAD,CAAR,CAA/B;IACA,YAAY,CAAC,WAAb,GAA2B,IAAI,cAAA,CAAA,OAAJ,CAAc,OAAO,CAAC,aAAD,CAArB,CAA3B;IAEA,OAAO,YAAP;EACD;;AA5DsB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NetworkStake = void 0;\r\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\r\n/**\r\n * An object holding Network stake parameters.\r\n */\r\nclass NetworkStake {\r\n    constructor() {\r\n        this.TotalValidators = 0;\r\n        this.ActiveValidators = 0;\r\n        this.QueueSize = 0;\r\n        this.TotalStaked = new bignumber_js_1.default(0);\r\n    }\r\n    /**\r\n     * Gets the default configuration object (think of the Singleton pattern).\r\n     */\r\n    static getDefault() {\r\n        if (!NetworkStake.default) {\r\n            NetworkStake.default = new NetworkStake();\r\n        }\r\n        return NetworkStake.default;\r\n    }\r\n    /**\r\n     * Synchronizes a configuration object by querying the Network, through a {@link IProvider}.\r\n     * @param provider The provider to use\r\n     */\r\n    sync(provider) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fresh = yield provider.getNetworkStake();\r\n            Object.assign(this, fresh);\r\n        });\r\n    }\r\n    /**\r\n     * Constructs a configuration object from a HTTP response (as returned by the provider).\r\n     */\r\n    static fromHttpResponse(payload) {\r\n        let networkStake = new NetworkStake();\r\n        networkStake.TotalValidators = Number(payload[\"totalValidators\"]);\r\n        networkStake.ActiveValidators = Number(payload[\"activeValidators\"]);\r\n        networkStake.QueueSize = Number(payload[\"queueSize\"]);\r\n        networkStake.TotalStaked = new bignumber_js_1.default(payload[\"totalStaked\"]);\r\n        return networkStake;\r\n    }\r\n}\r\nexports.NetworkStake = NetworkStake;\r\n//# sourceMappingURL=networkStake.js.map"]},"metadata":{},"sourceType":"script"}