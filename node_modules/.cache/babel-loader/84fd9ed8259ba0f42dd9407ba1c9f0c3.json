{"ast":null,"code":"(generator => {\n  if (typeof window === 'object') {\n    const exports = {};\n\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = generator(exports, false);\n    } else {\n      window.bls = generator(exports, false);\n    }\n  } else {\n    generator(exports, true);\n  }\n})((exports, isNodeJs) => {\n  /* eslint-disable */\n  exports.BN254 = 0;\n  exports.BN381_1 = 1;\n  exports.BLS12_381 = 5;\n  exports.ethMode = false;\n  exports.ETH_MODE_DRAFT_05 = 1;\n  exports.ETH_MODE_DRAFT_06 = 2;\n  exports.ETH_MODE_DRAFT_07 = 3;\n\n  const setup = (exports, curveType) => {\n    const mod = exports.mod;\n    const MCLBN_FP_UNIT_SIZE = 6;\n    const MCLBN_FR_UNIT_SIZE = exports.ethMode ? 4 : 6;\n    const BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0;\n    const MCLBN_COMPILED_TIME_VAR = MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE + BLS_COMPILER_TIME_VAR_ADJ;\n    const BLS_ID_SIZE = MCLBN_FR_UNIT_SIZE * 8;\n    const BLS_SECRETKEY_SIZE = MCLBN_FP_UNIT_SIZE * 8;\n    const BLS_PUBLICKEY_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 1 : 2);\n    const BLS_SIGNATURE_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 2 : 1);\n\n    const _malloc = size => {\n      return mod._blsMalloc(size);\n    };\n\n    const _free = pos => {\n      mod._blsFree(pos);\n    };\n\n    const ptrToAsciiStr = (pos, n) => {\n      let s = '';\n\n      for (let i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i]);\n      }\n\n      return s;\n    };\n\n    const asciiStrToPtr = (pos, s) => {\n      for (let i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i);\n      }\n    };\n\n    exports.toHex = (a, start, n) => {\n      let s = '';\n\n      for (let i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2);\n      }\n\n      return s;\n    }; // Uint8Array to hex string\n\n\n    exports.toHexStr = a => {\n      return exports.toHex(a, 0, a.length);\n    }; // hex string to Uint8Array\n\n\n    exports.fromHexStr = s => {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length);\n      const n = s.length / 2;\n      const a = new Uint8Array(n);\n\n      for (let i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      return a;\n    }; ///////////////////////////\n\n\n    const copyToUint32Array = (a, pos) => {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length)); //    for (let i = 0; i < a.length; i++) {\n      //      a[i] = mod.HEAP32[pos / 4 + i]\n      //    }\n    };\n\n    const copyFromUint32Array = (pos, a) => {\n      mod.HEAP32.set(a, pos / 4); //    for (let i = 0; i < a.length; i++) {\n      //      mod.HEAP32[pos / 4 + i] = a[i]\n      //    }\n    }; //////////////////////////////////\n\n\n    const _wrapGetStr = function (func) {\n      let returnAsStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return function (x) {\n        let ioMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        const maxBufSize = 3096;\n\n        const pos = _malloc(maxBufSize);\n\n        const n = func(pos, maxBufSize, x, ioMode);\n\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x);\n        }\n\n        let s = null;\n\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n);\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n));\n        }\n\n        _free(pos);\n\n        return s;\n      };\n    };\n\n    const _wrapSerialize = func => {\n      return _wrapGetStr(func, false);\n    };\n\n    const _wrapDeserialize = func => {\n      return (x, buf) => {\n        const pos = _malloc(buf.length);\n\n        mod.HEAP8.set(buf, pos);\n        const r = func(x, pos, buf.length);\n\n        _free(pos);\n\n        if (r === 0) throw new Error('err _wrapDeserialize', buf);\n      };\n    };\n    /*\r\n      argNum : n\r\n      func(x0, ..., x_(n-1), buf, ioMode)\r\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\r\n    */\n\n\n    const _wrapInput = function (func, argNum) {\n      let returnValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return function () {\n        const args = [...arguments];\n        const buf = args[argNum];\n        const typeStr = Object.prototype.toString.apply(buf);\n\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(`err bad type:\"${typeStr}\". Use String or Uint8Array.`);\n        }\n\n        const ioMode = args[argNum + 1]; // may undefined\n\n        const pos = _malloc(buf.length);\n\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf);\n        } else {\n          mod.HEAP8.set(buf, pos);\n        }\n\n        const r = func(...args.slice(0, argNum), pos, buf.length, ioMode);\n\n        _free(pos);\n\n        if (returnValue) return r;\n        if (r) throw new Error('err _wrapInput ' + buf);\n      };\n    };\n\n    const callSetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4);\n\n      func(pos, p1, p2); // p1, p2 may be undefined\n\n      copyToUint32Array(a, pos);\n\n      _free(pos);\n    };\n\n    const callGetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4);\n\n      mod.HEAP32.set(a, pos / 4);\n      const s = func(pos, p1, p2);\n\n      _free(pos);\n\n      return s;\n    };\n\n    const callShare = (func, a, size, vec, id) => {\n      const pos = a._allocAndCopy();\n\n      const idPos = id._allocAndCopy();\n\n      const vecPos = _malloc(size * vec.length);\n\n      for (let i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n      }\n\n      func(pos, vecPos, vec.length, idPos);\n\n      _free(vecPos);\n\n      _free(idPos);\n\n      a._saveAndFree(pos);\n    };\n\n    const callRecover = (func, a, size, vec, idVec) => {\n      const n = vec.length;\n      if (n != idVec.length) throw 'recover:bad length';\n\n      const secPos = a._alloc();\n\n      const vecPos = _malloc(size * n);\n\n      const idVecPos = _malloc(BLS_ID_SIZE * n);\n\n      for (let i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_);\n      }\n\n      const r = func(secPos, vecPos, idVecPos, n);\n\n      _free(idVecPos);\n\n      _free(vecPos);\n\n      a._saveAndFree(secPos);\n\n      if (r) throw 'callRecover';\n    }; // change curveType\n\n\n    exports.blsInit = function () {\n      let curveType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.ethMode ? exports.BLS12_381 : exports.BN254;\n\n      const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR);\n\n      if (r) throw 'blsInit err ' + r;\n    };\n\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder);\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder);\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1);\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1);\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr);\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr);\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize);\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize);\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize);\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize);\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize);\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize);\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize);\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize);\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed);\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed);\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed);\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed);\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1);\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1);\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1);\n    exports.blsSign = _wrapInput(mod._blsSign, 2);\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true);\n\n    class Common {\n      constructor(size) {\n        this.a_ = new Uint32Array(size / 4);\n      }\n\n      deserializeHexStr(s) {\n        this.deserialize(exports.fromHexStr(s));\n      }\n\n      serializeToHexStr() {\n        return exports.toHexStr(this.serialize());\n      }\n\n      dump() {\n        let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        console.log(msg + this.serializeToHexStr());\n      }\n\n      clear() {\n        this.a_.fill(0);\n      } // alloc new array\n\n\n      _alloc() {\n        return _malloc(this.a_.length * 4);\n      } // alloc and copy a_ to mod.HEAP32[pos / 4]\n\n\n      _allocAndCopy() {\n        const pos = this._alloc();\n\n        mod.HEAP32.set(this.a_, pos / 4);\n        return pos;\n      } // save pos to a_\n\n\n      _save(pos) {\n        this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length));\n      } // save and free\n\n\n      _saveAndFree(pos) {\n        this._save(pos);\n\n        _free(pos);\n      } // set parameter (p1, p2 may be undefined)\n\n\n      _setter(func, p1, p2) {\n        const pos = this._alloc();\n\n        const r = func(pos, p1, p2);\n\n        this._saveAndFree(pos);\n\n        if (r) throw new Error('_setter err');\n      } // getter (p1, p2 may be undefined)\n\n\n      _getter(func, p1, p2) {\n        const pos = this._allocAndCopy();\n\n        const s = func(pos, p1, p2);\n\n        _free(pos);\n\n        return s;\n      }\n\n      _isEqual(func, rhs) {\n        const xPos = this._allocAndCopy();\n\n        const yPos = rhs._allocAndCopy();\n\n        const r = func(xPos, yPos);\n\n        _free(yPos);\n\n        _free(xPos);\n\n        return r === 1;\n      } // func(y, this) and return y\n\n\n      _op1(func) {\n        const y = new this.constructor();\n\n        const xPos = this._allocAndCopy();\n\n        const yPos = y._alloc();\n\n        func(yPos, xPos);\n\n        y._saveAndFree(yPos);\n\n        _free(xPos);\n\n        return y;\n      } // func(z, this, y) and return z\n\n\n      _op2(func, y) {\n        let Cstr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        const z = Cstr ? new Cstr() : new this.constructor();\n\n        const xPos = this._allocAndCopy();\n\n        const yPos = y._allocAndCopy();\n\n        const zPos = z._alloc();\n\n        func(zPos, xPos, yPos);\n\n        z._saveAndFree(zPos);\n\n        _free(yPos);\n\n        _free(xPos);\n\n        return z;\n      } // func(self, y)\n\n\n      _update(func, y) {\n        const xPos = this._allocAndCopy();\n\n        const yPos = y._allocAndCopy();\n\n        func(xPos, yPos);\n\n        _free(yPos);\n\n        this._saveAndFree(xPos);\n      }\n\n    }\n\n    exports.Id = class extends Common {\n      constructor() {\n        super(BLS_ID_SIZE);\n      }\n\n      setInt(x) {\n        this._setter(mod._blsIdSetInt, x);\n      }\n\n      isEqual(rhs) {\n        return this._isEqual(mod._blsIdIsEqual, rhs);\n      }\n\n      deserialize(s) {\n        this._setter(exports.blsIdDeserialize, s);\n      }\n\n      serialize() {\n        return this._getter(exports.blsIdSerialize);\n      }\n\n      setStr(s) {\n        let base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n        switch (base) {\n          case 10:\n            this._setter(exports.blsIdSetDecStr, s);\n\n            return;\n\n          case 16:\n            this._setter(exports.blsIdSetHexStr, s);\n\n            return;\n\n          default:\n            throw 'BlsId.setStr:bad base:' + base;\n        }\n      }\n\n      getStr() {\n        let base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n        switch (base) {\n          case 10:\n            return this._getter(exports.blsIdGetDecStr);\n\n          case 16:\n            return this._getter(exports.blsIdGetHexStr);\n\n          default:\n            throw 'BlsId.getStr:bad base:' + base;\n        }\n      }\n\n      setLittleEndian(s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s);\n      }\n\n      setLittleEndianMod(s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n      }\n\n      setByCSPRNG() {\n        const a = new Uint8Array(BLS_ID_SIZE);\n        exports.getRandomValues(a);\n        this.setLittleEndian(a);\n      }\n\n    };\n\n    exports.deserializeHexStrToId = s => {\n      const r = new exports.Id();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.SecretKey = class extends Common {\n      constructor() {\n        super(BLS_SECRETKEY_SIZE);\n      }\n\n      setInt(x) {\n        this._setter(mod._blsIdSetInt, x); // same as Id\n\n      }\n\n      isZero() {\n        return this._getter(mod._blsSecretKeyIsZero) === 1;\n      }\n\n      isEqual(rhs) {\n        return this._isEqual(mod._blsSecretKeyIsEqual, rhs);\n      }\n\n      deserialize(s) {\n        this._setter(exports.blsSecretKeyDeserialize, s);\n      }\n\n      serialize() {\n        return this._getter(exports.blsSecretKeySerialize);\n      }\n\n      add(rhs) {\n        this._update(mod._blsSecretKeyAdd, rhs);\n      }\n\n      share(msk, id) {\n        callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id);\n      }\n\n      recover(secVec, idVec) {\n        callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec);\n      }\n\n      setHashOf(s) {\n        this._setter(exports.blsHashToSecretKey, s);\n      }\n\n      setLittleEndian(s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s);\n      }\n\n      setLittleEndianMod(s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n      }\n\n      setByCSPRNG() {\n        const a = new Uint8Array(BLS_SECRETKEY_SIZE);\n        exports.getRandomValues(a);\n        this.setLittleEndian(a);\n      }\n\n      getPublicKey() {\n        const pub = new exports.PublicKey();\n\n        const secPos = this._allocAndCopy();\n\n        const pubPos = pub._alloc();\n\n        mod._blsGetPublicKey(pubPos, secPos);\n\n        pub._saveAndFree(pubPos);\n\n        _free(secPos);\n\n        return pub;\n      }\n      /*\r\n        input\r\n        m : message (string or Uint8Array)\r\n        return\r\n        BlsSignature\r\n      */\n\n\n      sign(m) {\n        const sig = new exports.Signature();\n\n        const secPos = this._allocAndCopy();\n\n        const sigPos = sig._alloc();\n\n        exports.blsSign(sigPos, secPos, m);\n\n        sig._saveAndFree(sigPos);\n\n        _free(secPos);\n\n        return sig;\n      }\n\n    };\n\n    exports.deserializeHexStrToSecretKey = s => {\n      const r = new exports.SecretKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.PublicKey = class extends Common {\n      constructor() {\n        super(BLS_PUBLICKEY_SIZE);\n      }\n\n      isZero() {\n        return this._getter(mod._blsPublicKeyIsZero) === 1;\n      }\n\n      isEqual(rhs) {\n        return this._isEqual(mod._blsPublicKeyIsEqual, rhs);\n      }\n\n      deserialize(s) {\n        this._setter(exports.blsPublicKeyDeserialize, s);\n      }\n\n      serialize() {\n        return this._getter(exports.blsPublicKeySerialize);\n      }\n\n      deserializeUncompressed(s) {\n        this._setter(exports.blsPublicKeyDeserializeUncompressed, s);\n      }\n\n      serializeUncompressed() {\n        return this._getter(exports.blsPublicKeySerializeUncompressed);\n      }\n\n      add(rhs) {\n        this._update(mod._blsPublicKeyAdd, rhs);\n      }\n\n      share(msk, id) {\n        callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, msk, id);\n      }\n\n      recover(secVec, idVec) {\n        callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec);\n      }\n\n      isValidOrder() {\n        return this._getter(mod._blsPublicKeyIsValidOrder);\n      }\n\n      verify(sig, m) {\n        const pubPos = this._allocAndCopy();\n\n        const sigPos = sig._allocAndCopy();\n\n        const r = exports.blsVerify(sigPos, pubPos, m);\n\n        _free(sigPos);\n\n        _free(pubPos);\n\n        return r != 0;\n      }\n\n    };\n\n    exports.deserializeHexStrToPublicKey = s => {\n      const r = new exports.PublicKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.Signature = class extends Common {\n      constructor() {\n        super(BLS_SIGNATURE_SIZE);\n      }\n\n      isZero() {\n        return this._getter(mod._blsSignatureIsZero) === 1;\n      }\n\n      isEqual(rhs) {\n        return this._isEqual(mod._blsSignatureIsEqual, rhs);\n      }\n\n      deserialize(s) {\n        this._setter(exports.blsSignatureDeserialize, s);\n      }\n\n      serialize() {\n        return this._getter(exports.blsSignatureSerialize);\n      }\n\n      deserializeUncompressed(s) {\n        this._setter(exports.blsSignatureDeserializeUncompressed, s);\n      }\n\n      serializeUncompressed() {\n        return this._getter(exports.blsSignatureSerializeUncompressed);\n      }\n\n      add(rhs) {\n        this._update(mod._blsSignatureAdd, rhs);\n      }\n\n      recover(secVec, idVec) {\n        callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec);\n      }\n\n      isValidOrder() {\n        return this._getter(mod._blsSignatureIsValidOrder);\n      } // this = aggSig\n\n\n      aggregate(sigVec) {\n        const n = sigVec.length;\n\n        const aggSigPos = this._allocAndCopy();\n\n        const sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n);\n\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4);\n        }\n\n        const r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n);\n\n        _free(sigVecPos);\n\n        this._saveAndFree(aggSigPos);\n\n        return r == 1;\n      } // this = aggSig\n\n\n      fastAggregateVerify(pubVec, msg) {\n        const n = pubVec.length;\n        const msgSize = msg.length;\n\n        const aggSigPos = this._allocAndCopy();\n\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n        const msgPos = _malloc(msgSize);\n\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        }\n\n        mod.HEAP8.set(msg, msgPos);\n\n        const r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize);\n\n        _free(msgPos);\n\n        _free(pubVecPos);\n\n        _free(aggSigPos);\n\n        return r == 1;\n      } // this = aggSig\n      // msgVec = (32 * pubVec.length)-size Uint8Array\n\n\n      aggregateVerifyNoCheck(pubVec, msgVec) {\n        const n = pubVec.length;\n        const msgSize = 32;\n\n        if (n == 0 || msgVec.length != msgSize * n) {\n          return false;\n        }\n\n        const aggSigPos = this._allocAndCopy();\n\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n        const msgPos = _malloc(msgVec.length);\n\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        }\n\n        mod.HEAP8.set(msgVec, msgPos);\n\n        const r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n);\n\n        _free(msgPos);\n\n        _free(pubVecPos);\n\n        _free(aggSigPos);\n\n        return r == 1;\n      }\n\n    };\n\n    exports.deserializeHexStrToSignature = s => {\n      const r = new exports.Signature();\n      r.deserializeHexStr(s);\n      return r;\n    }; // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n\n\n    exports.setETHmode = mode => {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(`bad setETHmode ${mode}`);\n    }; // make setter check the correctness of the order if doVerify\n\n\n    exports.verifySignatureOrder = doVerify => {\n      mod._blsSignatureVerifyOrder(doVerify);\n    }; // make setter check the correctness of the order if doVerify\n\n\n    exports.verifyPublicKeyOrder = doVerify => {\n      mod._blsPublicKeyVerifyOrder(doVerify);\n    };\n\n    exports.areAllMsgDifferent = (msgs, msgSize) => {\n      const n = msgs.length / msgSize;\n      if (msgs.length != n * msgSize) return false;\n      h = {};\n\n      for (let i = 0; i < n; i++) {\n        const m = msgs.subarray(i * msgSize, (i + 1) * msgSize);\n        if (m in h) return false;\n        h[m] = true;\n      }\n\n      return true;\n    };\n    /*\r\n      return true if all pub[i].verify(sigs[i], msgs[i])\r\n      msgs is array of 32-byte Uint8Array\r\n    */\n\n\n    exports.multiVerify = (pubs, sigs, msgs) => {\n      const MSG_SIZE = 32;\n      const RAND_SIZE = 8; // 64-bit rand\n\n      const threadNum = 0; // not used\n\n      const n = sigs.length;\n      if (pubs.length != n || msgs.length != n) return false;\n\n      for (let i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false;\n      }\n\n      const sigPos = _malloc(BLS_SIGNATURE_SIZE * n);\n\n      const pubPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n      const msgPos = _malloc(MSG_SIZE * n);\n\n      const randPos = _malloc(RAND_SIZE * n);\n\n      exports.getRandomValues(mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n));\n\n      for (let i = 0; i < n; i++) {\n        mod.HEAP32.set(sigs[i].a_, (sigPos + BLS_SIGNATURE_SIZE * i) / 4);\n        mod.HEAP32.set(pubs[i].a_, (pubPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        mod.HEAP8.set(msgs[i], msgPos + MSG_SIZE * i);\n      }\n\n      const r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum);\n\n      _free(randPos);\n\n      _free(msgPos);\n\n      _free(pubPos);\n\n      _free(sigPos);\n\n      return r == 1;\n    };\n\n    exports.blsInit(curveType);\n\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07);\n    }\n  }; // setup()\n\n\n  const _cryptoGetRandomValues = function (p, n) {\n    const a = new Uint8Array(n);\n    exports.getRandomValues(a);\n\n    for (let i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i];\n    }\n  }; // f(a:array) fills a with random value\n\n\n  exports.setRandFunc = f => {\n    exports.getRandomValues = f;\n  };\n\n  exports.init = function () {\n    let curveType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.BN254;\n    exports.curveType = curveType;\n    const name = 'bls_c';\n    return new Promise(resolve => {\n      if (isNodeJs) {\n        const crypto = require('crypto');\n\n        exports.getRandomValues = crypto.randomFillSync;\n\n        const path = require('path');\n\n        const js = require(`./${name}.js`);\n\n        const Module = {\n          cryptoGetRandomValues: _cryptoGetRandomValues,\n          locateFile: baseName => {\n            return path.join(__dirname, baseName);\n          }\n        };\n        js(Module).then(_mod => {\n          exports.mod = _mod;\n          setup(exports, curveType);\n          resolve();\n        });\n      } else {\n        const crypto = window.crypto || window.msCrypto;\n\n        exports.getRandomValues = x => crypto.getRandomValues(x);\n\n        fetch(`./${name}.wasm`) // eslint-disable-line\n        .then(response => response.arrayBuffer()).then(buffer => new Uint8Array(buffer)).then(() => {\n          if (typeof module !== 'undefined' && module.exports) {\n            exports.mod = require('./bls_c')();\n          } else {\n            exports.mod = Module(); // eslint-disable-line\n          }\n\n          exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues;\n\n          exports.mod.onRuntimeInitialized = () => {\n            setup(exports, curveType);\n            resolve();\n          };\n        });\n      }\n    });\n  };\n\n  return exports;\n});","map":{"version":3,"names":["generator","window","exports","module","bls","isNodeJs","BN254","BN381_1","BLS12_381","ethMode","ETH_MODE_DRAFT_05","ETH_MODE_DRAFT_06","ETH_MODE_DRAFT_07","setup","curveType","mod","MCLBN_FP_UNIT_SIZE","MCLBN_FR_UNIT_SIZE","BLS_COMPILER_TIME_VAR_ADJ","MCLBN_COMPILED_TIME_VAR","BLS_ID_SIZE","BLS_SECRETKEY_SIZE","BLS_PUBLICKEY_SIZE","BLS_SIGNATURE_SIZE","_malloc","size","_blsMalloc","_free","pos","_blsFree","ptrToAsciiStr","n","s","i","String","fromCharCode","HEAP8","asciiStrToPtr","length","charCodeAt","toHex","a","start","toString","slice","toHexStr","fromHexStr","Error","Uint8Array","parseInt","copyToUint32Array","set","HEAP32","subarray","copyFromUint32Array","_wrapGetStr","func","returnAsStr","x","ioMode","maxBufSize","_wrapSerialize","_wrapDeserialize","buf","r","_wrapInput","argNum","returnValue","args","arguments","typeStr","Object","prototype","apply","indexOf","callSetter","p1","p2","callGetter","callShare","vec","id","_allocAndCopy","idPos","vecPos","a_","_saveAndFree","callRecover","idVec","secPos","_alloc","idVecPos","blsInit","_blsInit","getCurveOrder","_blsGetCurveOrder","getFieldOrder","_blsGetFieldOrder","blsIdSetDecStr","_blsIdSetDecStr","blsIdSetHexStr","_blsIdSetHexStr","blsIdGetDecStr","_blsIdGetDecStr","blsIdGetHexStr","_blsIdGetHexStr","blsIdSerialize","_blsIdSerialize","blsSecretKeySerialize","_blsSecretKeySerialize","blsPublicKeySerialize","_blsPublicKeySerialize","blsSignatureSerialize","_blsSignatureSerialize","blsIdDeserialize","_blsIdDeserialize","blsSecretKeyDeserialize","_blsSecretKeyDeserialize","blsPublicKeyDeserialize","_blsPublicKeyDeserialize","blsSignatureDeserialize","_blsSignatureDeserialize","blsPublicKeySerializeUncompressed","_blsPublicKeySerializeUncompressed","blsSignatureSerializeUncompressed","_blsSignatureSerializeUncompressed","blsPublicKeyDeserializeUncompressed","_blsPublicKeyDeserializeUncompressed","blsSignatureDeserializeUncompressed","_blsSignatureDeserializeUncompressed","blsSecretKeySetLittleEndian","_blsSecretKeySetLittleEndian","blsSecretKeySetLittleEndianMod","_blsSecretKeySetLittleEndianMod","blsHashToSecretKey","_blsHashToSecretKey","blsSign","_blsSign","blsVerify","_blsVerify","Common","constructor","Uint32Array","deserializeHexStr","deserialize","serializeToHexStr","serialize","dump","msg","console","log","clear","fill","_save","_setter","_getter","_isEqual","rhs","xPos","yPos","_op1","y","_op2","Cstr","z","zPos","_update","Id","setInt","_blsIdSetInt","isEqual","_blsIdIsEqual","setStr","base","getStr","setLittleEndian","setLittleEndianMod","setByCSPRNG","getRandomValues","deserializeHexStrToId","SecretKey","isZero","_blsSecretKeyIsZero","_blsSecretKeyIsEqual","add","_blsSecretKeyAdd","share","msk","_blsSecretKeyShare","recover","secVec","_blsSecretKeyRecover","setHashOf","getPublicKey","pub","PublicKey","pubPos","_blsGetPublicKey","sign","m","sig","Signature","sigPos","deserializeHexStrToSecretKey","_blsPublicKeyIsZero","_blsPublicKeyIsEqual","deserializeUncompressed","serializeUncompressed","_blsPublicKeyAdd","_blsPublicKeyShare","_blsPublicKeyRecover","isValidOrder","_blsPublicKeyIsValidOrder","verify","deserializeHexStrToPublicKey","_blsSignatureIsZero","_blsSignatureIsEqual","_blsSignatureAdd","_blsSignatureRecover","_blsSignatureIsValidOrder","aggregate","sigVec","aggSigPos","sigVecPos","_blsAggregateSignature","fastAggregateVerify","pubVec","msgSize","pubVecPos","msgPos","_blsFastAggregateVerify","aggregateVerifyNoCheck","msgVec","_blsAggregateVerifyNoCheck","deserializeHexStrToSignature","setETHmode","mode","_blsSetETHmode","verifySignatureOrder","doVerify","_blsSignatureVerifyOrder","verifyPublicKeyOrder","_blsPublicKeyVerifyOrder","areAllMsgDifferent","msgs","h","multiVerify","pubs","sigs","MSG_SIZE","RAND_SIZE","threadNum","randPos","_blsMultiVerify","_cryptoGetRandomValues","p","setRandFunc","f","init","name","Promise","resolve","crypto","require","randomFillSync","path","js","Module","cryptoGetRandomValues","locateFile","baseName","join","__dirname","then","_mod","msCrypto","fetch","response","arrayBuffer","buffer","onRuntimeInitialized"],"sources":["C:/Users/Mmo-Omen/Documents/GitHub/NFT_Minting_dApp/node_modules/@elrondnetwork/bls-wasm/bls.js"],"sourcesContent":["(generator => {\r\n  if (typeof window === 'object') {\r\n    const exports = {}\r\n\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n      module.exports = generator(exports, false)\r\n    } else {\r\n      window.bls = generator(exports, false)\r\n    }\r\n  } else {\r\n    generator(exports, true)\r\n  }\r\n})((exports, isNodeJs) => {\r\n  /* eslint-disable */\r\n  exports.BN254 = 0\r\n  exports.BN381_1 = 1\r\n  exports.BLS12_381 = 5\r\n  exports.ethMode = false\r\n  exports.ETH_MODE_DRAFT_05 = 1\r\n  exports.ETH_MODE_DRAFT_06 = 2\r\n  exports.ETH_MODE_DRAFT_07 = 3\r\n\r\n  const setup = (exports, curveType) => {\r\n    const mod = exports.mod\r\n    const MCLBN_FP_UNIT_SIZE = 6\r\n    const MCLBN_FR_UNIT_SIZE = exports.ethMode ? 4 : 6\r\n    const BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0\r\n    const MCLBN_COMPILED_TIME_VAR = (MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE) + BLS_COMPILER_TIME_VAR_ADJ\r\n    const BLS_ID_SIZE = MCLBN_FR_UNIT_SIZE * 8\r\n    const BLS_SECRETKEY_SIZE = MCLBN_FP_UNIT_SIZE * 8\r\n    const BLS_PUBLICKEY_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 1 : 2)\r\n    const BLS_SIGNATURE_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 2 : 1)\r\n\r\n    const _malloc = size => {\r\n      return mod._blsMalloc(size)\r\n    }\r\n    const _free = pos => {\r\n      mod._blsFree(pos)\r\n    }\r\n    const ptrToAsciiStr = (pos, n) => {\r\n      let s = ''\r\n      for (let i = 0; i < n; i++) {\r\n        s += String.fromCharCode(mod.HEAP8[pos + i])\r\n      }\r\n      return s\r\n    }\r\n    const asciiStrToPtr = (pos, s) => {\r\n      for (let i = 0; i < s.length; i++) {\r\n        mod.HEAP8[pos + i] = s.charCodeAt(i)\r\n      }\r\n    }\r\n    exports.toHex = (a, start, n) => {\r\n      let s = ''\r\n      for (let i = 0; i < n; i++) {\r\n        s += ('0' + a[start + i].toString(16)).slice(-2)\r\n      }\r\n      return s\r\n    }\r\n    // Uint8Array to hex string\r\n    exports.toHexStr = a => {\r\n      return exports.toHex(a, 0, a.length)\r\n    }\r\n    // hex string to Uint8Array\r\n    exports.fromHexStr = s => {\r\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length)\r\n      const n = s.length / 2\r\n      const a = new Uint8Array(n)\r\n      for (let i = 0; i < n; i++) {\r\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16)\r\n      }\r\n      return a\r\n    }\r\n///////////////////////////\r\n    const copyToUint32Array = (a, pos) => {\r\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length))\r\n//    for (let i = 0; i < a.length; i++) {\r\n//      a[i] = mod.HEAP32[pos / 4 + i]\r\n//    }\r\n    }\r\n    const copyFromUint32Array = (pos, a) => {\r\n      mod.HEAP32.set(a, pos / 4)\r\n//    for (let i = 0; i < a.length; i++) {\r\n//      mod.HEAP32[pos / 4 + i] = a[i]\r\n//    }\r\n    }\r\n//////////////////////////////////\r\n    const _wrapGetStr = (func, returnAsStr = true) => {\r\n      return (x, ioMode = 0) => {\r\n        const maxBufSize = 3096\r\n        const pos = _malloc(maxBufSize)\r\n        const n = func(pos, maxBufSize, x, ioMode)\r\n        if (n <= 0) {\r\n          throw new Error('err gen_str:' + x)\r\n        }\r\n        let s = null\r\n        if (returnAsStr) {\r\n          s = ptrToAsciiStr(pos, n)\r\n        } else {\r\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n))\r\n        }\r\n        _free(pos)\r\n        return s\r\n      }\r\n    }\r\n    const _wrapSerialize = func => {\r\n      return _wrapGetStr(func, false)\r\n    }\r\n    const _wrapDeserialize = func => {\r\n      return (x, buf) => {\r\n        const pos = _malloc(buf.length)\r\n        mod.HEAP8.set(buf, pos)\r\n        const r = func(x, pos, buf.length)\r\n        _free(pos)\r\n        if (r === 0) throw new Error('err _wrapDeserialize', buf)\r\n      }\r\n    }\r\n    /*\r\n      argNum : n\r\n      func(x0, ..., x_(n-1), buf, ioMode)\r\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\r\n    */\r\n    const _wrapInput = (func, argNum, returnValue = false) => {\r\n      return function () {\r\n        const args = [...arguments]\r\n        const buf = args[argNum]\r\n        const typeStr = Object.prototype.toString.apply(buf)\r\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\r\n          throw new Error(`err bad type:\"${typeStr}\". Use String or Uint8Array.`)\r\n        }\r\n        const ioMode = args[argNum + 1] // may undefined\r\n        const pos = _malloc(buf.length)\r\n        if (typeStr === '[object String]') {\r\n          asciiStrToPtr(pos, buf)\r\n        } else {\r\n          mod.HEAP8.set(buf, pos)\r\n        }\r\n        const r = func(...args.slice(0, argNum), pos, buf.length, ioMode)\r\n        _free(pos)\r\n        if (returnValue) return r\r\n        if (r) throw new Error('err _wrapInput ' + buf)\r\n      }\r\n    }\r\n    const callSetter = (func, a, p1, p2) => {\r\n      const pos = _malloc(a.length * 4)\r\n      func(pos, p1, p2) // p1, p2 may be undefined\r\n      copyToUint32Array(a, pos)\r\n      _free(pos)\r\n    }\r\n    const callGetter = (func, a, p1, p2) => {\r\n      const pos = _malloc(a.length * 4)\r\n      mod.HEAP32.set(a, pos / 4)\r\n      const s = func(pos, p1, p2)\r\n      _free(pos)\r\n      return s\r\n    }\r\n    const callShare = (func, a, size, vec, id) => {\r\n      const pos = a._allocAndCopy()\r\n      const idPos = id._allocAndCopy()\r\n      const vecPos = _malloc(size * vec.length)\r\n      for (let i = 0; i < vec.length; i++) {\r\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\r\n      }\r\n      func(pos, vecPos, vec.length, idPos)\r\n      _free(vecPos)\r\n      _free(idPos)\r\n      a._saveAndFree(pos)\r\n    }\r\n    const callRecover = (func, a, size, vec, idVec) => {\r\n      const n = vec.length\r\n      if (n != idVec.length) throw ('recover:bad length')\r\n      const secPos = a._alloc()\r\n      const vecPos = _malloc(size * n)\r\n      const idVecPos = _malloc(BLS_ID_SIZE * n)\r\n      for (let i = 0; i < n; i++) {\r\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\r\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_)\r\n      }\r\n      const r = func(secPos, vecPos, idVecPos, n)\r\n      _free(idVecPos)\r\n      _free(vecPos)\r\n      a._saveAndFree(secPos)\r\n      if (r) throw ('callRecover')\r\n    }\r\n\r\n    // change curveType\r\n    exports.blsInit = (curveType = (exports.ethMode ? exports.BLS12_381 : exports.BN254)) => {\r\n      const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR)\r\n      if (r) throw ('blsInit err ' + r)\r\n    }\r\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder)\r\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder)\r\n\r\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1)\r\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1)\r\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr)\r\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr)\r\n\r\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize)\r\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize)\r\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize)\r\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize)\r\n\r\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize)\r\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize)\r\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize)\r\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize)\r\n\r\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed)\r\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed)\r\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed)\r\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed)\r\n\r\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1)\r\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1)\r\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1)\r\n    exports.blsSign = _wrapInput(mod._blsSign, 2)\r\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true)\r\n\r\n    class Common {\r\n      constructor (size) {\r\n        this.a_ = new Uint32Array(size / 4)\r\n      }\r\n      deserializeHexStr (s) {\r\n        this.deserialize(exports.fromHexStr(s))\r\n      }\r\n      serializeToHexStr () {\r\n        return exports.toHexStr(this.serialize())\r\n      }\r\n      dump (msg = '') {\r\n        console.log(msg + this.serializeToHexStr())\r\n      }\r\n      clear () {\r\n        this.a_.fill(0)\r\n      }\r\n      // alloc new array\r\n      _alloc () {\r\n        return _malloc(this.a_.length * 4)\r\n      }\r\n      // alloc and copy a_ to mod.HEAP32[pos / 4]\r\n      _allocAndCopy () {\r\n        const pos = this._alloc()\r\n        mod.HEAP32.set(this.a_, pos / 4)\r\n        return pos\r\n      }\r\n      // save pos to a_\r\n      _save (pos) {\r\n        this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length))\r\n      }\r\n      // save and free\r\n      _saveAndFree(pos) {\r\n        this._save(pos)\r\n        _free(pos)\r\n      }\r\n      // set parameter (p1, p2 may be undefined)\r\n      _setter (func, p1, p2) {\r\n        const pos = this._alloc()\r\n        const r = func(pos, p1, p2)\r\n        this._saveAndFree(pos)\r\n        if (r) throw new Error('_setter err')\r\n      }\r\n      // getter (p1, p2 may be undefined)\r\n      _getter (func, p1, p2) {\r\n        const pos = this._allocAndCopy()\r\n        const s = func(pos, p1, p2)\r\n        _free(pos)\r\n        return s\r\n      }\r\n      _isEqual (func, rhs) {\r\n        const xPos = this._allocAndCopy()\r\n        const yPos = rhs._allocAndCopy()\r\n        const r = func(xPos, yPos)\r\n        _free(yPos)\r\n        _free(xPos)\r\n        return r === 1\r\n      }\r\n      // func(y, this) and return y\r\n      _op1 (func) {\r\n        const y = new this.constructor()\r\n        const xPos = this._allocAndCopy()\r\n        const yPos = y._alloc()\r\n        func(yPos, xPos)\r\n        y._saveAndFree(yPos)\r\n        _free(xPos)\r\n        return y\r\n      }\r\n      // func(z, this, y) and return z\r\n      _op2 (func, y, Cstr = null) {\r\n        const z = Cstr ? new Cstr() : new this.constructor()\r\n        const xPos = this._allocAndCopy()\r\n        const yPos = y._allocAndCopy()\r\n        const zPos = z._alloc()\r\n        func(zPos, xPos, yPos)\r\n        z._saveAndFree(zPos)\r\n        _free(yPos)\r\n        _free(xPos)\r\n        return z\r\n      }\r\n      // func(self, y)\r\n      _update (func, y) {\r\n        const xPos = this._allocAndCopy()\r\n        const yPos = y._allocAndCopy()\r\n        func(xPos, yPos)\r\n        _free(yPos)\r\n        this._saveAndFree(xPos)\r\n      }\r\n    }\r\n\r\n    exports.Id = class extends Common {\r\n      constructor () {\r\n        super(BLS_ID_SIZE)\r\n      }\r\n      setInt (x) {\r\n        this._setter(mod._blsIdSetInt, x)\r\n      }\r\n      isEqual (rhs) {\r\n        return this._isEqual(mod._blsIdIsEqual, rhs)\r\n      }\r\n      deserialize (s) {\r\n        this._setter(exports.blsIdDeserialize, s)\r\n      }\r\n      serialize () {\r\n        return this._getter(exports.blsIdSerialize)\r\n      }\r\n      setStr (s, base = 10) {\r\n        switch (base) {\r\n          case 10:\r\n            this._setter(exports.blsIdSetDecStr, s)\r\n            return\r\n          case 16:\r\n            this._setter(exports.blsIdSetHexStr, s)\r\n            return\r\n          default:\r\n            throw ('BlsId.setStr:bad base:' + base)\r\n        }\r\n      }\r\n      getStr (base = 10) {\r\n        switch (base) {\r\n          case 10:\r\n            return this._getter(exports.blsIdGetDecStr)\r\n          case 16:\r\n            return this._getter(exports.blsIdGetHexStr)\r\n          default:\r\n            throw ('BlsId.getStr:bad base:' + base)\r\n        }\r\n      }\r\n      setLittleEndian (s) {\r\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\r\n      }\r\n      setLittleEndianMod (s) {\r\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\r\n      }\r\n      setByCSPRNG () {\r\n        const a = new Uint8Array(BLS_ID_SIZE)\r\n        exports.getRandomValues(a)\r\n        this.setLittleEndian(a)\r\n      }\r\n    }\r\n    exports.deserializeHexStrToId = s => {\r\n      const r = new exports.Id()\r\n      r.deserializeHexStr(s)\r\n      return r\r\n    }\r\n\r\n    exports.SecretKey = class extends Common {\r\n      constructor () {\r\n        super(BLS_SECRETKEY_SIZE)\r\n      }\r\n      setInt (x) {\r\n        this._setter(mod._blsIdSetInt, x) // same as Id\r\n      }\r\n      isZero () {\r\n        return this._getter(mod._blsSecretKeyIsZero) === 1\r\n      }\r\n      isEqual (rhs) {\r\n        return this._isEqual(mod._blsSecretKeyIsEqual, rhs)\r\n      }\r\n      deserialize (s) {\r\n        this._setter(exports.blsSecretKeyDeserialize, s)\r\n      }\r\n      serialize () {\r\n        return this._getter(exports.blsSecretKeySerialize)\r\n      }\r\n      add (rhs) {\r\n        this._update(mod._blsSecretKeyAdd, rhs)\r\n      }\r\n      share (msk, id) {\r\n        callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id)\r\n      }\r\n      recover (secVec, idVec) {\r\n        callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec)\r\n      }\r\n      setHashOf (s) {\r\n        this._setter(exports.blsHashToSecretKey, s)\r\n      }\r\n      setLittleEndian (s) {\r\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\r\n      }\r\n      setLittleEndianMod (s) {\r\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\r\n      }\r\n      setByCSPRNG () {\r\n        const a = new Uint8Array(BLS_SECRETKEY_SIZE)\r\n        exports.getRandomValues(a)\r\n        this.setLittleEndian(a)\r\n      }\r\n      getPublicKey () {\r\n        const pub = new exports.PublicKey()\r\n        const secPos = this._allocAndCopy()\r\n        const pubPos = pub._alloc()\r\n        mod._blsGetPublicKey(pubPos, secPos)\r\n        pub._saveAndFree(pubPos)\r\n        _free(secPos)\r\n        return pub\r\n      }\r\n      /*\r\n        input\r\n        m : message (string or Uint8Array)\r\n        return\r\n        BlsSignature\r\n      */\r\n      sign (m) {\r\n        const sig = new exports.Signature()\r\n        const secPos = this._allocAndCopy()\r\n        const sigPos = sig._alloc()\r\n        exports.blsSign(sigPos, secPos, m)\r\n        sig._saveAndFree(sigPos)\r\n        _free(secPos)\r\n        return sig\r\n      }\r\n    }\r\n    exports.deserializeHexStrToSecretKey = s => {\r\n      const r = new exports.SecretKey()\r\n      r.deserializeHexStr(s)\r\n      return r\r\n    }\r\n\r\n    exports.PublicKey = class extends Common {\r\n      constructor () {\r\n        super(BLS_PUBLICKEY_SIZE)\r\n      }\r\n      isZero () {\r\n        return this._getter(mod._blsPublicKeyIsZero) === 1\r\n      }\r\n      isEqual (rhs) {\r\n        return this._isEqual(mod._blsPublicKeyIsEqual, rhs)\r\n      }\r\n      deserialize (s) {\r\n        this._setter(exports.blsPublicKeyDeserialize, s)\r\n      }\r\n      serialize () {\r\n        return this._getter(exports.blsPublicKeySerialize)\r\n      }\r\n      deserializeUncompressed (s) {\r\n        this._setter(exports.blsPublicKeyDeserializeUncompressed, s)\r\n      }\r\n      serializeUncompressed () {\r\n        return this._getter(exports.blsPublicKeySerializeUncompressed)\r\n      }\r\n      add (rhs) {\r\n        this._update(mod._blsPublicKeyAdd, rhs)\r\n      }\r\n      share (msk, id) {\r\n        callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, msk, id)\r\n      }\r\n      recover (secVec, idVec) {\r\n        callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec)\r\n      }\r\n      isValidOrder () {\r\n        return this._getter(mod._blsPublicKeyIsValidOrder)\r\n      }\r\n      verify (sig, m) {\r\n        const pubPos = this._allocAndCopy()\r\n        const sigPos = sig._allocAndCopy()\r\n        const r = exports.blsVerify(sigPos, pubPos, m)\r\n        _free(sigPos)\r\n        _free(pubPos)\r\n        return r != 0\r\n      }\r\n    }\r\n    exports.deserializeHexStrToPublicKey = s => {\r\n      const r = new exports.PublicKey()\r\n      r.deserializeHexStr(s)\r\n      return r\r\n    }\r\n\r\n    exports.Signature = class extends Common {\r\n      constructor () {\r\n        super(BLS_SIGNATURE_SIZE)\r\n      }\r\n      isZero () {\r\n        return this._getter(mod._blsSignatureIsZero) === 1\r\n      }\r\n      isEqual (rhs) {\r\n        return this._isEqual(mod._blsSignatureIsEqual, rhs)\r\n      }\r\n      deserialize (s) {\r\n        this._setter(exports.blsSignatureDeserialize, s)\r\n      }\r\n      serialize () {\r\n        return this._getter(exports.blsSignatureSerialize)\r\n      }\r\n      deserializeUncompressed (s) {\r\n        this._setter(exports.blsSignatureDeserializeUncompressed, s)\r\n      }\r\n      serializeUncompressed () {\r\n        return this._getter(exports.blsSignatureSerializeUncompressed)\r\n      }\r\n      add (rhs) {\r\n        this._update(mod._blsSignatureAdd, rhs)\r\n      }\r\n      recover (secVec, idVec) {\r\n        callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec)\r\n      }\r\n      isValidOrder () {\r\n        return this._getter(mod._blsSignatureIsValidOrder)\r\n      }\r\n      // this = aggSig\r\n      aggregate (sigVec) {\r\n        const n = sigVec.length\r\n        const aggSigPos = this._allocAndCopy()\r\n        const sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n)\r\n        for (let i = 0; i < n; i++) {\r\n          mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4)\r\n        }\r\n        const r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n)\r\n        _free(sigVecPos)\r\n        this._saveAndFree(aggSigPos)\r\n        return r == 1\r\n      }\r\n      // this = aggSig\r\n      fastAggregateVerify (pubVec, msg) {\r\n        const n = pubVec.length\r\n        const msgSize = msg.length\r\n        const aggSigPos = this._allocAndCopy()\r\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\r\n        const msgPos = _malloc(msgSize)\r\n        for (let i = 0; i < n; i++) {\r\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\r\n        }\r\n        mod.HEAP8.set(msg, msgPos)\r\n        const r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize)\r\n        _free(msgPos)\r\n        _free(pubVecPos)\r\n        _free(aggSigPos)\r\n        return r == 1\r\n      }\r\n      // this = aggSig\r\n      // msgVec = (32 * pubVec.length)-size Uint8Array\r\n      aggregateVerifyNoCheck (pubVec, msgVec) {\r\n        const n = pubVec.length\r\n        const msgSize = 32\r\n        if (n == 0 || msgVec.length != msgSize * n) {\r\n          return false\r\n        }\r\n        const aggSigPos = this._allocAndCopy()\r\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\r\n        const msgPos = _malloc(msgVec.length)\r\n        for (let i = 0; i < n; i++) {\r\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\r\n        }\r\n        mod.HEAP8.set(msgVec, msgPos)\r\n        const r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n)\r\n        _free(msgPos)\r\n        _free(pubVecPos)\r\n        _free(aggSigPos)\r\n        return r == 1\r\n      }\r\n    }\r\n    exports.deserializeHexStrToSignature = s => {\r\n      const r = new exports.Signature()\r\n      r.deserializeHexStr(s)\r\n      return r\r\n    }\r\n    // 1 (draft-05) 2 (draft-06) 3 (draft-07)\r\n    exports.setETHmode = (mode) => {\r\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(`bad setETHmode ${mode}`)\r\n    }\r\n    // make setter check the correctness of the order if doVerify\r\n    exports.verifySignatureOrder = (doVerify) => {\r\n      mod._blsSignatureVerifyOrder(doVerify)\r\n    }\r\n    // make setter check the correctness of the order if doVerify\r\n    exports.verifyPublicKeyOrder = (doVerify) => {\r\n      mod._blsPublicKeyVerifyOrder(doVerify)\r\n    }\r\n    exports.areAllMsgDifferent = (msgs, msgSize) => {\r\n      const n = msgs.length / msgSize\r\n      if (msgs.length != n * msgSize) return false\r\n      h = {}\r\n      for (let i = 0; i < n; i++) {\r\n        const m = msgs.subarray(i * msgSize, (i + 1) * msgSize)\r\n        if (m in h) return false\r\n        h[m] = true\r\n      }\r\n      return true\r\n    }\r\n    /*\r\n      return true if all pub[i].verify(sigs[i], msgs[i])\r\n      msgs is array of 32-byte Uint8Array\r\n    */\r\n    exports.multiVerify = (pubs, sigs, msgs) => {\r\n      const MSG_SIZE = 32\r\n      const RAND_SIZE = 8 // 64-bit rand\r\n      const threadNum = 0 // not used\r\n      const n = sigs.length\r\n      if (pubs.length != n || msgs.length != n) return false\r\n      for (let i = 0; i < n; i++) {\r\n        if (msgs[i].length != MSG_SIZE) return false\r\n      }\r\n      const sigPos = _malloc(BLS_SIGNATURE_SIZE * n)\r\n      const pubPos = _malloc(BLS_PUBLICKEY_SIZE * n)\r\n      const msgPos = _malloc(MSG_SIZE * n)\r\n      const randPos = _malloc(RAND_SIZE * n)\r\n\r\n      exports.getRandomValues(mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n))\r\n      for (let i = 0; i < n; i++) {\r\n        mod.HEAP32.set(sigs[i].a_, (sigPos + BLS_SIGNATURE_SIZE * i) / 4)\r\n        mod.HEAP32.set(pubs[i].a_, (pubPos + BLS_PUBLICKEY_SIZE * i) / 4)\r\n        mod.HEAP8.set(msgs[i], msgPos + MSG_SIZE * i)\r\n      }\r\n      const r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum)\r\n\r\n      _free(randPos)\r\n      _free(msgPos)\r\n      _free(pubPos)\r\n      _free(sigPos)\r\n      return r == 1\r\n    }\r\n    exports.blsInit(curveType)\r\n    if (exports.ethMode) {\r\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07)\r\n    }\r\n  } // setup()\r\n  const _cryptoGetRandomValues = function(p, n) {\r\n    const a = new Uint8Array(n)\r\n    exports.getRandomValues(a)\r\n    for (let i = 0; i < n; i++) {\r\n      exports.mod.HEAP8[p + i] = a[i]\r\n    }\r\n  }\r\n  // f(a:array) fills a with random value\r\n  exports.setRandFunc = f => {\r\n    exports.getRandomValues = f\r\n  }\r\n  exports.init = (curveType = exports.BN254) => {\r\n    exports.curveType = curveType\r\n    const name = 'bls_c'\r\n    return new Promise(resolve => {\r\n      if (isNodeJs) {\r\n        const crypto = require('crypto')\r\n        exports.getRandomValues = crypto.randomFillSync\r\n        const path = require('path')\r\n        const js = require(`./${name}.js`)\r\n        const Module = {\r\n          cryptoGetRandomValues : _cryptoGetRandomValues,\r\n          locateFile: baseName => { return path.join(__dirname, baseName) }\r\n        }\r\n        js(Module)\r\n          .then(_mod => {\r\n            exports.mod = _mod\r\n            setup(exports, curveType)\r\n            resolve()\r\n          })\r\n      } else {\r\n        const crypto = window.crypto || window.msCrypto\r\n        exports.getRandomValues = x => crypto.getRandomValues(x)\r\n        fetch(`./${name}.wasm`) // eslint-disable-line\r\n          .then(response => response.arrayBuffer())\r\n          .then(buffer => new Uint8Array(buffer))\r\n          .then(() => {\r\n            if (typeof module !== 'undefined' && module.exports) {\r\n              exports.mod = require('./bls_c')()\r\n            } else {\r\n              exports.mod = Module() // eslint-disable-line\r\n            }\r\n\r\n            exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues\r\n            exports.mod.onRuntimeInitialized = () => {\r\n              setup(exports, curveType)\r\n              resolve()\r\n            }\r\n          })\r\n      }\r\n    })\r\n  }\r\n  return exports\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}