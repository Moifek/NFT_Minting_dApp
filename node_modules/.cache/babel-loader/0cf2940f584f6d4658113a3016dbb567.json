{"ast":null,"code":"import { INTERNAL_ERROR, SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP } from \"./constants\";\nexport function isServerErrorCode(code) {\n  return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\n}\nexport function isReservedErrorCode(code) {\n  return RESERVED_ERROR_CODES.includes(code);\n}\nexport function isValidErrorCode(code) {\n  return typeof code === \"number\";\n}\nexport function getError(type) {\n  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\n    return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n  }\n\n  return STANDARD_ERROR_MAP[type];\n}\nexport function getErrorByCode(code) {\n  const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);\n\n  if (!match) {\n    return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n  }\n\n  return match;\n}\nexport function validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n    };\n  }\n\n  if (isReservedErrorCode(response.error.code)) {\n    const error = getErrorByCode(response.error.code);\n\n    if (error.message !== STANDARD_ERROR_MAP[INTERNAL_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n      };\n    }\n  }\n\n  return {\n    valid: true\n  };\n}\nexport function parseConnectionError(e, url, type) {\n  return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;\n}","map":{"version":3,"sources":["../../src/error.ts"],"names":[],"mappings":"AACA,SACE,cADF,EAEE,uBAFF,EAGE,oBAHF,EAIE,kBAJF,QAKO,aALP;AAQA,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAwC;EAC5C,OAAO,IAAI,IAAI,uBAAuB,CAAC,CAAD,CAA/B,IAAsC,IAAI,IAAI,uBAAuB,CAAC,CAAD,CAA5E;AACD;AAED,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAA0C;EAC9C,OAAO,oBAAoB,CAAC,QAArB,CAA8B,IAA9B,CAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAuC;EAC3C,OAAO,OAAO,IAAP,KAAgB,QAAvB;AACD;AAED,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAA+B;EACnC,IAAI,CAAC,MAAM,CAAC,IAAP,CAAY,kBAAZ,EAAgC,QAAhC,CAAyC,IAAzC,CAAL,EAAqD;IACnD,OAAO,kBAAkB,CAAC,cAAD,CAAzB;EACD;;EACD,OAAO,kBAAkB,CAAC,IAAD,CAAzB;AACD;AAED,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAAqC;EACzC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,kBAAd,EAAkC,IAAlC,CAAuC,CAAC,IAAI,CAAC,CAAC,IAAF,KAAW,IAAvD,CAAd;;EACA,IAAI,CAAC,KAAL,EAAY;IACV,OAAO,kBAAkB,CAAC,cAAD,CAAzB;EACD;;EACD,OAAO,KAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,QAA/B,EAAqD;EACzD,IAAI,OAAO,QAAQ,CAAC,KAAT,CAAe,IAAtB,KAA+B,WAAnC,EAAgD;IAC9C,OAAO;MAAE,KAAK,EAAE,KAAT;MAAgB,KAAK,EAAE;IAAvB,CAAP;EACD;;EACD,IAAI,OAAO,QAAQ,CAAC,KAAT,CAAe,OAAtB,KAAkC,WAAtC,EAAmD;IACjD,OAAO;MAAE,KAAK,EAAE,KAAT;MAAgB,KAAK,EAAE;IAAvB,CAAP;EACD;;EACD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAArB,EAA4C;IAC1C,OAAO;MACL,KAAK,EAAE,KADF;MAEL,KAAK,EAAE,yCAAyC,QAAQ,CAAC,KAAT,CAAe,IAAI;IAF9D,CAAP;EAID;;EACD,IAAI,mBAAmB,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAAvB,EAA8C;IAC5C,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAA5B;;IACA,IACE,KAAK,CAAC,OAAN,KAAkB,kBAAkB,CAAC,cAAD,CAAlB,CAAmC,OAArD,IACA,QAAQ,CAAC,KAAT,CAAe,OAAf,KAA2B,KAAK,CAAC,OAFnC,EAGE;MACA,OAAO;QACL,KAAK,EAAE,KADF;QAEL,KAAK,EAAE,4CAA4C,QAAQ,CAAC,KAAT,CAAe,IAAI;MAFjE,CAAP;IAID;EACF;;EACD,OAAO;IAAE,KAAK,EAAE;EAAT,CAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,CAA/B,EAAyC,GAAzC,EAAsD,IAAtD,EAAkE;EACtE,OAAO,CAAC,CAAC,OAAF,CAAU,QAAV,CAAmB,uBAAnB,KAA+C,CAAC,CAAC,OAAF,CAAU,QAAV,CAAmB,sBAAnB,CAA/C,GACH,IAAI,KAAJ,CAAU,eAAe,IAAI,eAAe,GAAG,EAA/C,CADG,GAEH,CAFJ;AAGD","sourceRoot":"","sourcesContent":["import { INTERNAL_ERROR, SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP, } from \"./constants\";\r\nexport function isServerErrorCode(code) {\r\n    return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\r\n}\r\nexport function isReservedErrorCode(code) {\r\n    return RESERVED_ERROR_CODES.includes(code);\r\n}\r\nexport function isValidErrorCode(code) {\r\n    return typeof code === \"number\";\r\n}\r\nexport function getError(type) {\r\n    if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\r\n        return STANDARD_ERROR_MAP[INTERNAL_ERROR];\r\n    }\r\n    return STANDARD_ERROR_MAP[type];\r\n}\r\nexport function getErrorByCode(code) {\r\n    const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);\r\n    if (!match) {\r\n        return STANDARD_ERROR_MAP[INTERNAL_ERROR];\r\n    }\r\n    return match;\r\n}\r\nexport function validateJsonRpcError(response) {\r\n    if (typeof response.error.code === \"undefined\") {\r\n        return { valid: false, error: \"Missing code for JSON-RPC error\" };\r\n    }\r\n    if (typeof response.error.message === \"undefined\") {\r\n        return { valid: false, error: \"Missing message for JSON-RPC error\" };\r\n    }\r\n    if (!isValidErrorCode(response.error.code)) {\r\n        return {\r\n            valid: false,\r\n            error: `Invalid error code type for JSON-RPC: ${response.error.code}`,\r\n        };\r\n    }\r\n    if (isReservedErrorCode(response.error.code)) {\r\n        const error = getErrorByCode(response.error.code);\r\n        if (error.message !== STANDARD_ERROR_MAP[INTERNAL_ERROR].message &&\r\n            response.error.message === error.message) {\r\n            return {\r\n                valid: false,\r\n                error: `Invalid error code message for JSON-RPC: ${response.error.code}`,\r\n            };\r\n        }\r\n    }\r\n    return { valid: true };\r\n}\r\nexport function parseConnectionError(e, url, type) {\r\n    return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\")\r\n        ? new Error(`Unavailable ${type} RPC url at ${url}`)\r\n        : e;\r\n}\r\n//# sourceMappingURL=error.js.map"]},"metadata":{},"sourceType":"module"}