{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigIntValue = exports.BigUIntValue = exports.I64Value = exports.U64Value = exports.I32Value = exports.U32Value = exports.I16Value = exports.U16Value = exports.I8Value = exports.U8Value = exports.NumericalValue = exports.BigIntType = exports.BigUIntType = exports.I64Type = exports.U64Type = exports.I32Type = exports.U32Type = exports.I16Type = exports.U16Type = exports.I8Type = exports.U8Type = exports.NumericalType = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst types_1 = require(\"./types\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nclass NumericalType extends types_1.PrimitiveType {\n  constructor(name, sizeInBytes, withSign) {\n    super(name);\n    this.sizeInBytes = sizeInBytes;\n    this.withSign = withSign;\n  }\n\n  getClassName() {\n    return NumericalType.ClassName;\n  }\n\n  hasFixedSize() {\n    return this.sizeInBytes ? true : false;\n  }\n\n  hasArbitrarySize() {\n    return !this.hasFixedSize();\n  }\n\n}\n\nexports.NumericalType = NumericalType;\nNumericalType.ClassName = \"NumericalType\";\n\nclass U8Type extends NumericalType {\n  constructor() {\n    super(\"u8\", 1, false);\n  }\n\n  getClassName() {\n    return U8Type.ClassName;\n  }\n\n}\n\nexports.U8Type = U8Type;\nU8Type.ClassName = \"U8Type\";\n\nclass I8Type extends NumericalType {\n  constructor() {\n    super(\"i8\", 1, true);\n  }\n\n  getClassName() {\n    return I8Type.ClassName;\n  }\n\n}\n\nexports.I8Type = I8Type;\nI8Type.ClassName = \"I8Type\";\n\nclass U16Type extends NumericalType {\n  constructor() {\n    super(\"u16\", 2, false);\n  }\n\n  getClassName() {\n    return U16Type.ClassName;\n  }\n\n}\n\nexports.U16Type = U16Type;\nU16Type.ClassName = \"U16Type\";\n\nclass I16Type extends NumericalType {\n  constructor() {\n    super(\"i16\", 2, true);\n  }\n\n  getClassName() {\n    return I16Type.ClassName;\n  }\n\n}\n\nexports.I16Type = I16Type;\nI16Type.ClassName = \"I16Type\";\n\nclass U32Type extends NumericalType {\n  constructor() {\n    super(\"u32\", 4, false);\n  }\n\n  getClassName() {\n    return U32Type.ClassName;\n  }\n\n}\n\nexports.U32Type = U32Type;\nU32Type.ClassName = \"U32Type\";\n\nclass I32Type extends NumericalType {\n  constructor() {\n    super(\"i32\", 4, true);\n  }\n\n  getClassName() {\n    return I32Type.ClassName;\n  }\n\n}\n\nexports.I32Type = I32Type;\nI32Type.ClassName = \"I32Type\";\n\nclass U64Type extends NumericalType {\n  constructor() {\n    super(\"u64\", 8, false);\n  }\n\n  getClassName() {\n    return U64Type.ClassName;\n  }\n\n}\n\nexports.U64Type = U64Type;\nU64Type.ClassName = \"U64Type\";\n\nclass I64Type extends NumericalType {\n  constructor() {\n    super(\"i64\", 8, true);\n  }\n\n  getClassName() {\n    return I64Type.ClassName;\n  }\n\n}\n\nexports.I64Type = I64Type;\nI64Type.ClassName = \"I64Type\";\n\nclass BigUIntType extends NumericalType {\n  constructor() {\n    super(\"BigUint\", 0, false);\n  }\n\n  getClassName() {\n    return BigUIntType.ClassName;\n  }\n\n}\n\nexports.BigUIntType = BigUIntType;\nBigUIntType.ClassName = \"BigUIntType\";\n\nclass BigIntType extends NumericalType {\n  constructor() {\n    super(\"Bigint\", 0, true);\n  }\n\n  getClassName() {\n    return BigIntType.ClassName;\n  }\n\n}\n\nexports.BigIntType = BigIntType;\nBigIntType.ClassName = \"BigIntType\";\n/**\n * A numerical value fed to or fetched from a Smart Contract contract, as a strongly-typed, immutable abstraction.\n */\n\nclass NumericalValue extends types_1.PrimitiveValue {\n  constructor(type, value) {\n    super(type);\n    this.value = new bignumber_js_1.default(value);\n    this.sizeInBytes = type.sizeInBytes;\n    this.withSign = type.withSign;\n\n    if (this.value.isNaN()) {\n      throw new errors.ErrInvalidArgument(\"value\", value, \"not a number\");\n    }\n\n    if (!this.withSign && this.value.isNegative()) {\n      throw new errors.ErrInvalidArgument(\"value\", value.toString(10), \"negative, but type is unsigned\");\n    }\n  }\n\n  getClassName() {\n    return NumericalValue.ClassName;\n  }\n  /**\n   * Returns whether two objects have the same value.\n   *\n   * @param other another NumericalValue\n   */\n\n\n  equals(other) {\n    return this.value.isEqualTo(other.value);\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n  toString() {\n    return this.value.toString();\n  }\n\n}\n\nexports.NumericalValue = NumericalValue;\nNumericalValue.ClassName = \"NumericalValue\";\n\nclass U8Value extends NumericalValue {\n  constructor(value) {\n    super(new U8Type(), new bignumber_js_1.default(value));\n  }\n\n  getClassName() {\n    return U8Value.ClassName;\n  }\n\n}\n\nexports.U8Value = U8Value;\nU8Value.ClassName = \"U8Value\";\n\nclass I8Value extends NumericalValue {\n  constructor(value) {\n    super(new I8Type(), new bignumber_js_1.default(value));\n  }\n\n  getClassName() {\n    return I8Value.ClassName;\n  }\n\n}\n\nexports.I8Value = I8Value;\nI8Value.ClassName = \"I8Value\";\n\nclass U16Value extends NumericalValue {\n  constructor(value) {\n    super(new U16Type(), new bignumber_js_1.default(value));\n  }\n\n  getClassName() {\n    return U16Value.ClassName;\n  }\n\n}\n\nexports.U16Value = U16Value;\nU16Value.ClassName = \"U16Value\";\n\nclass I16Value extends NumericalValue {\n  constructor(value) {\n    super(new I16Type(), new bignumber_js_1.default(value));\n  }\n\n  getClassName() {\n    return I16Value.ClassName;\n  }\n\n}\n\nexports.I16Value = I16Value;\nI16Value.ClassName = \"I16Value\";\n\nclass U32Value extends NumericalValue {\n  constructor(value) {\n    super(new U32Type(), new bignumber_js_1.default(value));\n  }\n\n  getClassName() {\n    return U32Value.ClassName;\n  }\n\n}\n\nexports.U32Value = U32Value;\nU32Value.ClassName = \"U32Value\";\n\nclass I32Value extends NumericalValue {\n  constructor(value) {\n    super(new I32Type(), new bignumber_js_1.default(value));\n  }\n\n  getClassName() {\n    return I32Value.ClassName;\n  }\n\n}\n\nexports.I32Value = I32Value;\nI32Value.ClassName = \"I32Value\";\n\nclass U64Value extends NumericalValue {\n  constructor(value) {\n    super(new U64Type(), value);\n  }\n\n  getClassName() {\n    return U64Value.ClassName;\n  }\n\n}\n\nexports.U64Value = U64Value;\nU64Value.ClassName = \"U64Value\";\n\nclass I64Value extends NumericalValue {\n  constructor(value) {\n    super(new I64Type(), value);\n  }\n\n  getClassName() {\n    return I64Value.ClassName;\n  }\n\n}\n\nexports.I64Value = I64Value;\nI64Value.ClassName = \"I64Value\";\n\nclass BigUIntValue extends NumericalValue {\n  constructor(value) {\n    super(new BigUIntType(), value);\n  }\n\n  getClassName() {\n    return BigUIntValue.ClassName;\n  }\n\n}\n\nexports.BigUIntValue = BigUIntValue;\nBigUIntValue.ClassName = \"BigUIntValue\";\n\nclass BigIntValue extends NumericalValue {\n  constructor(value) {\n    super(new BigIntType(), value);\n  }\n\n  getClassName() {\n    return BigIntValue.ClassName;\n  }\n\n}\n\nexports.BigIntValue = BigIntValue;\nBigIntValue.ClassName = \"BigIntValue\";","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/numerical.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BigIntValue = exports.BigUIntValue = exports.I64Value = exports.U64Value = exports.I32Value = exports.U32Value = exports.I16Value = exports.U16Value = exports.I8Value = exports.U8Value = exports.NumericalValue = exports.BigIntType = exports.BigUIntType = exports.I64Type = exports.U64Type = exports.I32Type = exports.U32Type = exports.I16Type = exports.U16Type = exports.I8Type = exports.U8Type = exports.NumericalType = void 0;\nconst errors = __importStar(require(\"../../errors\"));\nconst types_1 = require(\"./types\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nclass NumericalType extends types_1.PrimitiveType {\n    constructor(name, sizeInBytes, withSign) {\n        super(name);\n        this.sizeInBytes = sizeInBytes;\n        this.withSign = withSign;\n    }\n    getClassName() {\n        return NumericalType.ClassName;\n    }\n    hasFixedSize() {\n        return this.sizeInBytes ? true : false;\n    }\n    hasArbitrarySize() {\n        return !this.hasFixedSize();\n    }\n}\nexports.NumericalType = NumericalType;\nNumericalType.ClassName = \"NumericalType\";\nclass U8Type extends NumericalType {\n    constructor() {\n        super(\"u8\", 1, false);\n    }\n    getClassName() {\n        return U8Type.ClassName;\n    }\n}\nexports.U8Type = U8Type;\nU8Type.ClassName = \"U8Type\";\nclass I8Type extends NumericalType {\n    constructor() {\n        super(\"i8\", 1, true);\n    }\n    getClassName() {\n        return I8Type.ClassName;\n    }\n}\nexports.I8Type = I8Type;\nI8Type.ClassName = \"I8Type\";\nclass U16Type extends NumericalType {\n    constructor() {\n        super(\"u16\", 2, false);\n    }\n    getClassName() {\n        return U16Type.ClassName;\n    }\n}\nexports.U16Type = U16Type;\nU16Type.ClassName = \"U16Type\";\nclass I16Type extends NumericalType {\n    constructor() {\n        super(\"i16\", 2, true);\n    }\n    getClassName() {\n        return I16Type.ClassName;\n    }\n}\nexports.I16Type = I16Type;\nI16Type.ClassName = \"I16Type\";\nclass U32Type extends NumericalType {\n    constructor() {\n        super(\"u32\", 4, false);\n    }\n    getClassName() {\n        return U32Type.ClassName;\n    }\n}\nexports.U32Type = U32Type;\nU32Type.ClassName = \"U32Type\";\nclass I32Type extends NumericalType {\n    constructor() {\n        super(\"i32\", 4, true);\n    }\n    getClassName() {\n        return I32Type.ClassName;\n    }\n}\nexports.I32Type = I32Type;\nI32Type.ClassName = \"I32Type\";\nclass U64Type extends NumericalType {\n    constructor() {\n        super(\"u64\", 8, false);\n    }\n    getClassName() {\n        return U64Type.ClassName;\n    }\n}\nexports.U64Type = U64Type;\nU64Type.ClassName = \"U64Type\";\nclass I64Type extends NumericalType {\n    constructor() {\n        super(\"i64\", 8, true);\n    }\n    getClassName() {\n        return I64Type.ClassName;\n    }\n}\nexports.I64Type = I64Type;\nI64Type.ClassName = \"I64Type\";\nclass BigUIntType extends NumericalType {\n    constructor() {\n        super(\"BigUint\", 0, false);\n    }\n    getClassName() {\n        return BigUIntType.ClassName;\n    }\n}\nexports.BigUIntType = BigUIntType;\nBigUIntType.ClassName = \"BigUIntType\";\nclass BigIntType extends NumericalType {\n    constructor() {\n        super(\"Bigint\", 0, true);\n    }\n    getClassName() {\n        return BigIntType.ClassName;\n    }\n}\nexports.BigIntType = BigIntType;\nBigIntType.ClassName = \"BigIntType\";\n/**\n * A numerical value fed to or fetched from a Smart Contract contract, as a strongly-typed, immutable abstraction.\n */\nclass NumericalValue extends types_1.PrimitiveValue {\n    constructor(type, value) {\n        super(type);\n        this.value = new bignumber_js_1.default(value);\n        this.sizeInBytes = type.sizeInBytes;\n        this.withSign = type.withSign;\n        if (this.value.isNaN()) {\n            throw new errors.ErrInvalidArgument(\"value\", value, \"not a number\");\n        }\n        if (!this.withSign && this.value.isNegative()) {\n            throw new errors.ErrInvalidArgument(\"value\", value.toString(10), \"negative, but type is unsigned\");\n        }\n    }\n    getClassName() {\n        return NumericalValue.ClassName;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     *\n     * @param other another NumericalValue\n     */\n    equals(other) {\n        return this.value.isEqualTo(other.value);\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString() {\n        return this.value.toString();\n    }\n}\nexports.NumericalValue = NumericalValue;\nNumericalValue.ClassName = \"NumericalValue\";\nclass U8Value extends NumericalValue {\n    constructor(value) {\n        super(new U8Type(), new bignumber_js_1.default(value));\n    }\n    getClassName() {\n        return U8Value.ClassName;\n    }\n}\nexports.U8Value = U8Value;\nU8Value.ClassName = \"U8Value\";\nclass I8Value extends NumericalValue {\n    constructor(value) {\n        super(new I8Type(), new bignumber_js_1.default(value));\n    }\n    getClassName() {\n        return I8Value.ClassName;\n    }\n}\nexports.I8Value = I8Value;\nI8Value.ClassName = \"I8Value\";\nclass U16Value extends NumericalValue {\n    constructor(value) {\n        super(new U16Type(), new bignumber_js_1.default(value));\n    }\n    getClassName() {\n        return U16Value.ClassName;\n    }\n}\nexports.U16Value = U16Value;\nU16Value.ClassName = \"U16Value\";\nclass I16Value extends NumericalValue {\n    constructor(value) {\n        super(new I16Type(), new bignumber_js_1.default(value));\n    }\n    getClassName() {\n        return I16Value.ClassName;\n    }\n}\nexports.I16Value = I16Value;\nI16Value.ClassName = \"I16Value\";\nclass U32Value extends NumericalValue {\n    constructor(value) {\n        super(new U32Type(), new bignumber_js_1.default(value));\n    }\n    getClassName() {\n        return U32Value.ClassName;\n    }\n}\nexports.U32Value = U32Value;\nU32Value.ClassName = \"U32Value\";\nclass I32Value extends NumericalValue {\n    constructor(value) {\n        super(new I32Type(), new bignumber_js_1.default(value));\n    }\n    getClassName() {\n        return I32Value.ClassName;\n    }\n}\nexports.I32Value = I32Value;\nI32Value.ClassName = \"I32Value\";\nclass U64Value extends NumericalValue {\n    constructor(value) {\n        super(new U64Type(), value);\n    }\n    getClassName() {\n        return U64Value.ClassName;\n    }\n}\nexports.U64Value = U64Value;\nU64Value.ClassName = \"U64Value\";\nclass I64Value extends NumericalValue {\n    constructor(value) {\n        super(new I64Type(), value);\n    }\n    getClassName() {\n        return I64Value.ClassName;\n    }\n}\nexports.I64Value = I64Value;\nI64Value.ClassName = \"I64Value\";\nclass BigUIntValue extends NumericalValue {\n    constructor(value) {\n        super(new BigUIntType(), value);\n    }\n    getClassName() {\n        return BigUIntValue.ClassName;\n    }\n}\nexports.BigUIntValue = BigUIntValue;\nBigUIntValue.ClassName = \"BigUIntValue\";\nclass BigIntValue extends NumericalValue {\n    constructor(value) {\n        super(new BigIntType(), value);\n    }\n    getClassName() {\n        return BigIntValue.ClassName;\n    }\n}\nexports.BigIntValue = BigIntValue;\nBigIntValue.ClassName = \"BigIntValue\";\n//# sourceMappingURL=numerical.js.map"]},"metadata":{},"sourceType":"script"}