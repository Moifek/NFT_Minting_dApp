{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApiProvider = void 0;\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst errors = __importStar(require(\"./errors\"));\n\nconst logger_1 = require(\"./logger\");\n\nconst networkStake_1 = require(\"./networkStake\");\n\nconst stats_1 = require(\"./stats\");\n\nconst transaction_1 = require(\"./transaction\");\n\nconst transactionOnNetwork_1 = require(\"./transactionOnNetwork\");\n\nconst token_1 = require(\"./token\");\n\nconst nftToken_1 = require(\"./nftToken\");\n\nconst constants_1 = require(\"./constants\");\n/**\r\n * This is a temporary change, this will be the only provider used, ProxyProvider will be deprecated\r\n */\n\n\nclass ApiProvider {\n  /**\r\n   * Creates a new ApiProvider.\r\n   * @param url the URL of the Elrond Api\r\n   * @param config axios request config options\r\n   */\n  constructor(url, config) {\n    this.url = url;\n    this.config = Object.assign(Object.assign({}, constants_1.defaultConfig), config);\n  }\n  /**\r\n   * Fetches the Network Stake.\r\n   */\n\n\n  getNetworkStake() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(\"stake\", response => networkStake_1.NetworkStake.fromHttpResponse(response));\n    });\n  }\n  /**\r\n   * Fetches the Network Stats.\r\n   */\n\n\n  getNetworkStats() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(\"stats\", response => stats_1.Stats.fromHttpResponse(response));\n    });\n  }\n  /**\r\n   * Fetches the state of a {@link Transaction}.\r\n   */\n\n\n  getTransaction(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`transactions/${txHash.toString()}`, response => transactionOnNetwork_1.TransactionOnNetwork.fromHttpResponse(response));\n    });\n  }\n  /**\r\n   * Queries the status of a {@link Transaction}.\r\n   */\n\n\n  getTransactionStatus(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`transactions/${txHash.toString()}?fields=status`, response => new transaction_1.TransactionStatus(response.status));\n    });\n  }\n\n  getToken(tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`tokens/${tokenIdentifier}`, response => token_1.Token.fromHttpResponse(response));\n    });\n  }\n\n  getNFTToken(tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`nfts/${tokenIdentifier}`, response => nftToken_1.NFTToken.fromHttpResponse(response));\n    });\n  }\n  /**\r\n   * Get method that receives the resource url and on callback the method used to map the response.\r\n   */\n\n\n  doGetGeneric(resourceUrl, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGet(resourceUrl);\n      return callback(response);\n    });\n  }\n\n  doGet(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let url = `${this.url}/${resourceUrl}`;\n        let response = yield axios_1.default.get(url, this.config);\n        return response.data;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  handleApiError(error, resourceUrl) {\n    if (!error.response) {\n      logger_1.Logger.warn(error);\n      throw new errors.ErrApiProviderGet(resourceUrl, error.toString(), error);\n    }\n\n    let errorData = error.response.data;\n    let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\n    throw new errors.ErrApiProviderGet(resourceUrl, originalErrorMessage, error);\n  }\n\n}\n\nexports.ApiProvider = ApiProvider;","map":{"version":3,"sources":["../src/apiProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ApiProvider = void 0;\r\nconst axios_1 = __importDefault(require(\"axios\"));\r\nconst errors = __importStar(require(\"./errors\"));\r\nconst logger_1 = require(\"./logger\");\r\nconst networkStake_1 = require(\"./networkStake\");\r\nconst stats_1 = require(\"./stats\");\r\nconst transaction_1 = require(\"./transaction\");\r\nconst transactionOnNetwork_1 = require(\"./transactionOnNetwork\");\r\nconst token_1 = require(\"./token\");\r\nconst nftToken_1 = require(\"./nftToken\");\r\nconst constants_1 = require(\"./constants\");\r\n/**\r\n * This is a temporary change, this will be the only provider used, ProxyProvider will be deprecated\r\n */\r\nclass ApiProvider {\r\n    /**\r\n     * Creates a new ApiProvider.\r\n     * @param url the URL of the Elrond Api\r\n     * @param config axios request config options\r\n     */\r\n    constructor(url, config) {\r\n        this.url = url;\r\n        this.config = Object.assign(Object.assign({}, constants_1.defaultConfig), config);\r\n    }\r\n    /**\r\n     * Fetches the Network Stake.\r\n     */\r\n    getNetworkStake() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.doGetGeneric(\"stake\", (response) => networkStake_1.NetworkStake.fromHttpResponse(response));\r\n        });\r\n    }\r\n    /**\r\n     * Fetches the Network Stats.\r\n     */\r\n    getNetworkStats() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.doGetGeneric(\"stats\", (response) => stats_1.Stats.fromHttpResponse(response));\r\n        });\r\n    }\r\n    /**\r\n     * Fetches the state of a {@link Transaction}.\r\n     */\r\n    getTransaction(txHash) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.doGetGeneric(`transactions/${txHash.toString()}`, (response) => transactionOnNetwork_1.TransactionOnNetwork.fromHttpResponse(response));\r\n        });\r\n    }\r\n    /**\r\n     * Queries the status of a {@link Transaction}.\r\n     */\r\n    getTransactionStatus(txHash) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.doGetGeneric(`transactions/${txHash.toString()}?fields=status`, (response) => new transaction_1.TransactionStatus(response.status));\r\n        });\r\n    }\r\n    getToken(tokenIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.doGetGeneric(`tokens/${tokenIdentifier}`, (response) => token_1.Token.fromHttpResponse(response));\r\n        });\r\n    }\r\n    getNFTToken(tokenIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.doGetGeneric(`nfts/${tokenIdentifier}`, (response) => nftToken_1.NFTToken.fromHttpResponse(response));\r\n        });\r\n    }\r\n    /**\r\n     * Get method that receives the resource url and on callback the method used to map the response.\r\n     */\r\n    doGetGeneric(resourceUrl, callback) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let response = yield this.doGet(resourceUrl);\r\n            return callback(response);\r\n        });\r\n    }\r\n    doGet(resourceUrl) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let url = `${this.url}/${resourceUrl}`;\r\n                let response = yield axios_1.default.get(url, this.config);\r\n                return response.data;\r\n            }\r\n            catch (error) {\r\n                this.handleApiError(error, resourceUrl);\r\n            }\r\n        });\r\n    }\r\n    handleApiError(error, resourceUrl) {\r\n        if (!error.response) {\r\n            logger_1.Logger.warn(error);\r\n            throw new errors.ErrApiProviderGet(resourceUrl, error.toString(), error);\r\n        }\r\n        let errorData = error.response.data;\r\n        let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\r\n        throw new errors.ErrApiProviderGet(resourceUrl, originalErrorMessage, error);\r\n    }\r\n}\r\nexports.ApiProvider = ApiProvider;\r\n//# sourceMappingURL=apiProvider.js.map"]},"metadata":{},"sourceType":"script"}