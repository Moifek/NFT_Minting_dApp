{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareVersions = void 0;\n\nfunction compareVersions(versionA, versionB) {\n  let i, diff;\n  const regExStrip0 = /(\\.0+)+$/;\n  const segmentsA = versionA.replace(regExStrip0, '').split('.');\n  const segmentsB = versionB.replace(regExStrip0, '').split('.');\n  const minVersionLength = Math.min(segmentsA.length, segmentsB.length);\n\n  for (i = 0; i < minVersionLength; i++) {\n    diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);\n\n    if (diff == 0) {\n      continue;\n    }\n\n    if (diff < 0) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  return segmentsA.length - segmentsB.length;\n}\n\nexports.compareVersions = compareVersions;","map":{"version":3,"sources":["../src/versioning.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAgB,eAAhB,CAAgC,QAAhC,EAAkD,QAAlD,EAAkE;EAC9D,IAAI,CAAJ,EAAO,IAAP;EACA,MAAM,WAAW,GAAG,UAApB;EACA,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAT,CAAiB,WAAjB,EAA8B,EAA9B,EAAkC,KAAlC,CAAwC,GAAxC,CAAlB;EACA,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAT,CAAiB,WAAjB,EAA8B,EAA9B,EAAkC,KAAlC,CAAwC,GAAxC,CAAlB;EACA,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAL,CAAS,SAAS,CAAC,MAAnB,EAA2B,SAAS,CAAC,MAArC,CAAzB;;EAEA,KAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,gBAAhB,EAAkC,CAAC,EAAnC,EAAuC;IACnC,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAD,CAAV,EAAe,EAAf,CAAR,GAA6B,QAAQ,CAAC,SAAS,CAAC,CAAD,CAAV,EAAe,EAAf,CAA5C;;IACA,IAAG,IAAI,IAAI,CAAX,EAAc;MACV;IACH;;IAED,IAAG,IAAI,GAAG,CAAV,EAAc;MACV,OAAO,CAAC,CAAR;IACH;;IAED,OAAO,CAAP;EACH;;EAED,OAAO,SAAS,CAAC,MAAV,GAAmB,SAAS,CAAC,MAApC;AACH;;AArBD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.compareVersions = void 0;\r\nfunction compareVersions(versionA, versionB) {\r\n    let i, diff;\r\n    const regExStrip0 = /(\\.0+)+$/;\r\n    const segmentsA = versionA.replace(regExStrip0, '').split('.');\r\n    const segmentsB = versionB.replace(regExStrip0, '').split('.');\r\n    const minVersionLength = Math.min(segmentsA.length, segmentsB.length);\r\n    for (i = 0; i < minVersionLength; i++) {\r\n        diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);\r\n        if (diff == 0) {\r\n            continue;\r\n        }\r\n        if (diff < 0) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    }\r\n    return segmentsA.length - segmentsB.length;\r\n}\r\nexports.compareVersions = compareVersions;\r\n//# sourceMappingURL=versioning.js.map"]},"metadata":{},"sourceType":"script"}