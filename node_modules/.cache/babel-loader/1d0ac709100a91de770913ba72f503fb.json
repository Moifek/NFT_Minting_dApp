{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionOnNetwork = void 0;\n\nconst transactionStatus_1 = require(\"./transactionStatus\");\n\nconst contractResults_1 = require(\"./contractResults\");\n\nconst primitives_1 = require(\"./primitives\");\n\nconst transactionCompletionStrategy_1 = require(\"./transactionCompletionStrategy\");\n\nconst transactionLogs_1 = require(\"./transactionLogs\");\n\nconst transactionReceipt_1 = require(\"./transactionReceipt\");\n\nclass TransactionOnNetwork {\n  constructor(init) {\n    this.isCompleted = false;\n    this.hash = \"\";\n    this.type = \"\";\n    this.nonce = 0;\n    this.round = 0;\n    this.epoch = 0;\n    this.value = \"\";\n    this.receiver = new primitives_1.Address(\"\");\n    this.sender = new primitives_1.Address(\"\");\n    this.gasLimit = 0;\n    this.gasPrice = 0;\n    this.data = Buffer.from([]);\n    this.signature = \"\";\n    this.status = transactionStatus_1.TransactionStatus.createUnknown();\n    this.timestamp = 0;\n    this.blockNonce = 0;\n    this.hyperblockNonce = 0;\n    this.hyperblockHash = \"\";\n    this.receipt = new transactionReceipt_1.TransactionReceipt();\n    this.contractResults = new contractResults_1.ContractResults([]);\n    this.logs = new transactionLogs_1.TransactionLogs();\n    Object.assign(this, init);\n  }\n\n  static fromProxyHttpResponse(txHash, response) {\n    let result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n    result.contractResults = contractResults_1.ContractResults.fromProxyHttpResponse(response.smartContractResults || []);\n    result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnProxy().isCompleted(result); // TODO: uniformize transaction status.\n\n    return result;\n  }\n\n  static fromApiHttpResponse(txHash, response) {\n    let result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n    result.contractResults = contractResults_1.ContractResults.fromApiHttpResponse(response.results || []);\n    result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnAPI().isCompleted(result); // TODO: uniformize transaction status.\n\n    return result;\n  }\n\n  static fromHttpResponse(txHash, response) {\n    let result = new TransactionOnNetwork();\n    result.hash = txHash;\n    result.type = response.type || \"\";\n    result.nonce = response.nonce || 0;\n    result.round = response.round;\n    result.epoch = response.epoch || 0;\n    result.value = (response.value || 0).toString();\n    result.sender = new primitives_1.Address(response.sender);\n    result.receiver = new primitives_1.Address(response.receiver);\n    result.gasPrice = response.gasPrice || 0;\n    result.gasLimit = response.gasLimit || 0;\n    result.data = Buffer.from(response.data || \"\", \"base64\");\n    result.status = new transactionStatus_1.TransactionStatus(response.status);\n    result.timestamp = response.timestamp || 0;\n    result.blockNonce = response.blockNonce || 0;\n    result.hyperblockNonce = response.hyperblockNonce || 0;\n    result.hyperblockHash = response.hyperblockHash || \"\";\n    result.receipt = transactionReceipt_1.TransactionReceipt.fromHttpResponse(response.receipt || {});\n    result.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n    return result;\n  }\n\n  getDateTime() {\n    return new Date(this.timestamp * 1000);\n  }\n\n}\n\nexports.TransactionOnNetwork = TransactionOnNetwork;","map":{"version":3,"sources":["../src/transactions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionOnNetwork = void 0;\nconst transactionStatus_1 = require(\"./transactionStatus\");\nconst contractResults_1 = require(\"./contractResults\");\nconst primitives_1 = require(\"./primitives\");\nconst transactionCompletionStrategy_1 = require(\"./transactionCompletionStrategy\");\nconst transactionLogs_1 = require(\"./transactionLogs\");\nconst transactionReceipt_1 = require(\"./transactionReceipt\");\nclass TransactionOnNetwork {\n    constructor(init) {\n        this.isCompleted = false;\n        this.hash = \"\";\n        this.type = \"\";\n        this.nonce = 0;\n        this.round = 0;\n        this.epoch = 0;\n        this.value = \"\";\n        this.receiver = new primitives_1.Address(\"\");\n        this.sender = new primitives_1.Address(\"\");\n        this.gasLimit = 0;\n        this.gasPrice = 0;\n        this.data = Buffer.from([]);\n        this.signature = \"\";\n        this.status = transactionStatus_1.TransactionStatus.createUnknown();\n        this.timestamp = 0;\n        this.blockNonce = 0;\n        this.hyperblockNonce = 0;\n        this.hyperblockHash = \"\";\n        this.receipt = new transactionReceipt_1.TransactionReceipt();\n        this.contractResults = new contractResults_1.ContractResults([]);\n        this.logs = new transactionLogs_1.TransactionLogs();\n        Object.assign(this, init);\n    }\n    static fromProxyHttpResponse(txHash, response) {\n        let result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n        result.contractResults = contractResults_1.ContractResults.fromProxyHttpResponse(response.smartContractResults || []);\n        result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnProxy().isCompleted(result);\n        // TODO: uniformize transaction status.\n        return result;\n    }\n    static fromApiHttpResponse(txHash, response) {\n        let result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n        result.contractResults = contractResults_1.ContractResults.fromApiHttpResponse(response.results || []);\n        result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnAPI().isCompleted(result);\n        // TODO: uniformize transaction status.\n        return result;\n    }\n    static fromHttpResponse(txHash, response) {\n        let result = new TransactionOnNetwork();\n        result.hash = txHash;\n        result.type = response.type || \"\";\n        result.nonce = response.nonce || 0;\n        result.round = response.round;\n        result.epoch = response.epoch || 0;\n        result.value = (response.value || 0).toString();\n        result.sender = new primitives_1.Address(response.sender);\n        result.receiver = new primitives_1.Address(response.receiver);\n        result.gasPrice = response.gasPrice || 0;\n        result.gasLimit = response.gasLimit || 0;\n        result.data = Buffer.from(response.data || \"\", \"base64\");\n        result.status = new transactionStatus_1.TransactionStatus(response.status);\n        result.timestamp = response.timestamp || 0;\n        result.blockNonce = response.blockNonce || 0;\n        result.hyperblockNonce = response.hyperblockNonce || 0;\n        result.hyperblockHash = response.hyperblockHash || \"\";\n        result.receipt = transactionReceipt_1.TransactionReceipt.fromHttpResponse(response.receipt || {});\n        result.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n        return result;\n    }\n    getDateTime() {\n        return new Date(this.timestamp * 1000);\n    }\n}\nexports.TransactionOnNetwork = TransactionOnNetwork;\n//# sourceMappingURL=transactions.js.map"]},"metadata":{},"sourceType":"script"}