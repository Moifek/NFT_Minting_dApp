{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TupleBinaryCodec = void 0;\n\nconst struct_1 = require(\"./struct\");\n\nclass TupleBinaryCodec {\n  constructor(binaryCodec) {\n    this.structCodec = new struct_1.StructBinaryCodec(binaryCodec);\n  }\n\n  decodeTopLevel(buffer, type) {\n    return this.structCodec.decodeTopLevel(buffer, type);\n  }\n\n  decodeNested(buffer, type) {\n    return this.structCodec.decodeNested(buffer, type);\n  }\n\n  encodeNested(struct) {\n    return this.structCodec.encodeNested(struct);\n  }\n\n  encodeTopLevel(struct) {\n    return this.structCodec.encodeTopLevel(struct);\n  }\n\n}\n\nexports.TupleBinaryCodec = TupleBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/tuple.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAa,gBAAb,CAA6B;EAGzB,WAAA,CAAY,WAAZ,EAAoC;IAChC,KAAK,WAAL,GAAmB,IAAI,QAAA,CAAA,iBAAJ,CAAsB,WAAtB,CAAnB;EACH;;EAED,cAAc,CAAC,MAAD,EAAiB,IAAjB,EAAgC;IAC1C,OAAO,KAAK,WAAL,CAAiB,cAAjB,CAAgC,MAAhC,EAAwC,IAAxC,CAAP;EACH;;EAED,YAAY,CAAC,MAAD,EAAiB,IAAjB,EAAgC;IACxC,OAAO,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,EAAsC,IAAtC,CAAP;EACH;;EAED,YAAY,CAAC,MAAD,EAAc;IACtB,OAAO,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,CAAP;EACH;;EAED,cAAc,CAAC,MAAD,EAAe;IACzB,OAAO,KAAK,WAAL,CAAiB,cAAjB,CAAgC,MAAhC,CAAP;EACH;;AArBwB;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TupleBinaryCodec = void 0;\r\nconst struct_1 = require(\"./struct\");\r\nclass TupleBinaryCodec {\r\n    constructor(binaryCodec) {\r\n        this.structCodec = new struct_1.StructBinaryCodec(binaryCodec);\r\n    }\r\n    decodeTopLevel(buffer, type) {\r\n        return this.structCodec.decodeTopLevel(buffer, type);\r\n    }\r\n    decodeNested(buffer, type) {\r\n        return this.structCodec.decodeNested(buffer, type);\r\n    }\r\n    encodeNested(struct) {\r\n        return this.structCodec.encodeNested(struct);\r\n    }\r\n    encodeTopLevel(struct) {\r\n        return this.structCodec.encodeTopLevel(struct);\r\n    }\r\n}\r\nexports.TupleBinaryCodec = TupleBinaryCodec;\r\n//# sourceMappingURL=tuple.js.map"]},"metadata":{},"sourceType":"script"}