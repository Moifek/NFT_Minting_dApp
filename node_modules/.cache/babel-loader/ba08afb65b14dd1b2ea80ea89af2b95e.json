{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VariadicValue = exports.VariadicType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass VariadicType extends types_1.Type {\n  constructor(typeParameter) {\n    super(\"Variadic\", [typeParameter], types_1.TypeCardinality.variable());\n  }\n\n}\n\nexports.VariadicType = VariadicType;\n/**\r\n * An abstraction that represents a sequence of values held under the umbrella of a variadic input / output parameter.\r\n *\r\n * Since at the time of constructing input parameters or decoding output parameters, the length is known,\r\n * this TypedValue behaves similar to a List.\r\n */\n\nclass VariadicValue extends types_1.TypedValue {\n  /**\r\n   *\r\n   * @param type the type of this TypedValue (an instance of VariadicType), not the type parameter of the VariadicType\r\n   * @param items the items, having the type type.getFirstTypeParameter()\r\n   */\n  constructor(type, items) {\n    super(type); // TODO: assert items are of type type.getFirstTypeParameter()\n\n    this.items = items;\n  }\n\n  static fromItems() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    if (items.length == 0) {\n      return new VariadicValue(new VariadicType(new types_1.TypePlaceholder()), []);\n    }\n\n    let typeParameter = items[0].getType();\n    return new VariadicValue(new VariadicType(typeParameter), items);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  valueOf() {\n    return this.items.map(item => item.valueOf());\n  }\n\n  equals(other) {\n    if (this.getType().differs(other.getType())) {\n      return false;\n    }\n\n    for (let i = 0; i < this.items.length; i++) {\n      let selfItem = this.items[i];\n      let otherItem = other.items[i];\n\n      if (!selfItem.equals(otherItem)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.VariadicValue = VariadicValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/variadic.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,YAAb,SAAkC,OAAA,CAAA,IAAlC,CAAsC;EAClC,WAAA,CAAY,aAAZ,EAA+B;IAC3B,MAAM,UAAN,EAAkB,CAAC,aAAD,CAAlB,EAAmC,OAAA,CAAA,eAAA,CAAgB,QAAhB,EAAnC;EACH;;AAHiC;;AAAtC,OAAA,CAAA,YAAA,GAAA,YAAA;AAMA;;;;;AAKG;;AACH,MAAa,aAAb,SAAmC,OAAA,CAAA,UAAnC,CAA6C;EAGzC;;;;AAIG;EACH,WAAA,CAAY,IAAZ,EAAgC,KAAhC,EAAmD;IAC/C,MAAM,IAAN,EAD+C,CAG/C;;IAEA,KAAK,KAAL,GAAa,KAAb;EACH;;EAEe,OAAT,SAAS,GAAuB;IAAA,kCAAnB,KAAmB;MAAnB,KAAmB;IAAA;;IACnC,IAAI,KAAK,CAAC,MAAN,IAAgB,CAApB,EAAuB;MACnB,OAAO,IAAI,aAAJ,CAAkB,IAAI,YAAJ,CAAiB,IAAI,OAAA,CAAA,eAAJ,EAAjB,CAAlB,EAA2D,EAA3D,CAAP;IACH;;IAED,IAAI,aAAa,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,OAAT,EAApB;IACA,OAAO,IAAI,aAAJ,CAAkB,IAAI,YAAJ,CAAiB,aAAjB,CAAlB,EAAmD,KAAnD,CAAP;EACH;;EAED,QAAQ,GAAA;IACJ,OAAO,KAAK,KAAZ;EACH;;EAED,OAAO,GAAA;IACH,OAAO,KAAK,KAAL,CAAW,GAAX,CAAe,IAAI,IAAI,IAAI,CAAC,OAAL,EAAvB,CAAP;EACH;;EAED,MAAM,CAAC,KAAD,EAAqB;IACvB,IAAI,KAAK,OAAL,GAAe,OAAf,CAAuB,KAAK,CAAC,OAAN,EAAvB,CAAJ,EAA6C;MACzC,OAAO,KAAP;IACH;;IAED,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,KAAL,CAAW,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;MACxC,IAAI,QAAQ,GAAG,KAAK,KAAL,CAAW,CAAX,CAAf;MACA,IAAI,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAhB;;MAEA,IAAI,CAAC,QAAQ,CAAC,MAAT,CAAgB,SAAhB,CAAL,EAAiC;QAC7B,OAAO,KAAP;MACH;IACJ;;IAED,OAAO,IAAP;EACH;;AAhDwC;;AAA7C,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.VariadicValue = exports.VariadicType = void 0;\r\nconst types_1 = require(\"./types\");\r\nclass VariadicType extends types_1.Type {\r\n    constructor(typeParameter) {\r\n        super(\"Variadic\", [typeParameter], types_1.TypeCardinality.variable());\r\n    }\r\n}\r\nexports.VariadicType = VariadicType;\r\n/**\r\n * An abstraction that represents a sequence of values held under the umbrella of a variadic input / output parameter.\r\n *\r\n * Since at the time of constructing input parameters or decoding output parameters, the length is known,\r\n * this TypedValue behaves similar to a List.\r\n */\r\nclass VariadicValue extends types_1.TypedValue {\r\n    /**\r\n     *\r\n     * @param type the type of this TypedValue (an instance of VariadicType), not the type parameter of the VariadicType\r\n     * @param items the items, having the type type.getFirstTypeParameter()\r\n     */\r\n    constructor(type, items) {\r\n        super(type);\r\n        // TODO: assert items are of type type.getFirstTypeParameter()\r\n        this.items = items;\r\n    }\r\n    static fromItems(...items) {\r\n        if (items.length == 0) {\r\n            return new VariadicValue(new VariadicType(new types_1.TypePlaceholder()), []);\r\n        }\r\n        let typeParameter = items[0].getType();\r\n        return new VariadicValue(new VariadicType(typeParameter), items);\r\n    }\r\n    getItems() {\r\n        return this.items;\r\n    }\r\n    valueOf() {\r\n        return this.items.map(item => item.valueOf());\r\n    }\r\n    equals(other) {\r\n        if (this.getType().differs(other.getType())) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            let selfItem = this.items[i];\r\n            let otherItem = other.items[i];\r\n            if (!selfItem.equals(otherItem)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.VariadicValue = VariadicValue;\r\n//# sourceMappingURL=variadic.js.map"]},"metadata":{},"sourceType":"script"}