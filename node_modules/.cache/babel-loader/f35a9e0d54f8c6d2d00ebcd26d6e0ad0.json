{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionLogs = void 0;\n\nconst errors_1 = require(\"./errors\");\n\nconst primitives_1 = require(\"./primitives\");\n\nconst transactionEvents_1 = require(\"./transactionEvents\");\n\nclass TransactionLogs {\n  constructor(init) {\n    this.address = new primitives_1.Address(\"\");\n    this.events = [];\n    Object.assign(this, init);\n  }\n\n  static fromHttpResponse(logs) {\n    let result = new TransactionLogs();\n    result.address = new primitives_1.Address(logs.address);\n    result.events = (logs.events || []).map(event => transactionEvents_1.TransactionEvent.fromHttpResponse(event));\n    return result;\n  }\n\n  findSingleOrNoneEvent(identifier, predicate) {\n    let events = this.findEvents(identifier, predicate);\n\n    if (events.length > 1) {\n      throw new errors_1.ErrUnexpectedCondition(`more than one event of type ${identifier}`);\n    }\n\n    return events[0];\n  }\n\n  findFirstOrNoneEvent(identifier, predicate) {\n    return this.findEvents(identifier, predicate)[0];\n  }\n\n  findEvents(identifier, predicate) {\n    let events = this.events.filter(event => event.identifier == identifier);\n\n    if (predicate) {\n      events = events.filter(event => predicate(event));\n    }\n\n    return events;\n  }\n\n}\n\nexports.TransactionLogs = TransactionLogs;","map":{"version":3,"sources":["../src/transactionLogs.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAEA,MAAa,eAAb,CAA4B;EAIxB,WAAA,CAAY,IAAZ,EAA2C;IAH3C,KAAA,OAAA,GAAoB,IAAI,YAAA,CAAA,OAAJ,CAAY,EAAZ,CAApB;IACA,KAAA,MAAA,GAA6B,EAA7B;IAGI,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,IAApB;EACH;;EAEsB,OAAhB,gBAAgB,CAAC,IAAD,EAAU;IAC7B,IAAI,MAAM,GAAG,IAAI,eAAJ,EAAb;IACA,MAAM,CAAC,OAAP,GAAiB,IAAI,YAAA,CAAA,OAAJ,CAAY,IAAI,CAAC,OAAjB,CAAjB;IACA,MAAM,CAAC,MAAP,GAAgB,CAAC,IAAI,CAAC,MAAL,IAAe,EAAhB,EAAoB,GAApB,CAAyB,KAAD,IAAgB,mBAAA,CAAA,gBAAA,CAAiB,gBAAjB,CAAkC,KAAlC,CAAxC,CAAhB;IAEA,OAAO,MAAP;EACH;;EAED,qBAAqB,CAAC,UAAD,EAAqB,SAArB,EAAqE;IACtF,IAAI,MAAM,GAAG,KAAK,UAAL,CAAgB,UAAhB,EAA4B,SAA5B,CAAb;;IAEA,IAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;MACnB,MAAM,IAAI,QAAA,CAAA,sBAAJ,CAA2B,+BAA+B,UAAU,EAApE,CAAN;IACH;;IAED,OAAO,MAAM,CAAC,CAAD,CAAb;EACH;;EAED,oBAAoB,CAAC,UAAD,EAAqB,SAArB,EAAqE;IACrF,OAAO,KAAK,UAAL,CAAgB,UAAhB,EAA4B,SAA5B,EAAuC,CAAvC,CAAP;EACH;;EAED,UAAU,CAAC,UAAD,EAAqB,SAArB,EAAqE;IAC3E,IAAI,MAAM,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,KAAK,IAAI,KAAK,CAAC,UAAN,IAAoB,UAAhD,CAAb;;IAEA,IAAI,SAAJ,EAAe;MACX,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,KAAK,IAAI,SAAS,CAAC,KAAD,CAAhC,CAAT;IACH;;IAED,OAAO,MAAP;EACH;;AAtCuB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TransactionLogs = void 0;\r\nconst errors_1 = require(\"./errors\");\r\nconst primitives_1 = require(\"./primitives\");\r\nconst transactionEvents_1 = require(\"./transactionEvents\");\r\nclass TransactionLogs {\r\n    constructor(init) {\r\n        this.address = new primitives_1.Address(\"\");\r\n        this.events = [];\r\n        Object.assign(this, init);\r\n    }\r\n    static fromHttpResponse(logs) {\r\n        let result = new TransactionLogs();\r\n        result.address = new primitives_1.Address(logs.address);\r\n        result.events = (logs.events || []).map((event) => transactionEvents_1.TransactionEvent.fromHttpResponse(event));\r\n        return result;\r\n    }\r\n    findSingleOrNoneEvent(identifier, predicate) {\r\n        let events = this.findEvents(identifier, predicate);\r\n        if (events.length > 1) {\r\n            throw new errors_1.ErrUnexpectedCondition(`more than one event of type ${identifier}`);\r\n        }\r\n        return events[0];\r\n    }\r\n    findFirstOrNoneEvent(identifier, predicate) {\r\n        return this.findEvents(identifier, predicate)[0];\r\n    }\r\n    findEvents(identifier, predicate) {\r\n        let events = this.events.filter(event => event.identifier == identifier);\r\n        if (predicate) {\r\n            events = events.filter(event => predicate(event));\r\n        }\r\n        return events;\r\n    }\r\n}\r\nexports.TransactionLogs = TransactionLogs;\r\n//# sourceMappingURL=transactionLogs.js.map"]},"metadata":{},"sourceType":"script"}