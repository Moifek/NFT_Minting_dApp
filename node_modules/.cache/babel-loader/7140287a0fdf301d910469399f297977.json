{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionCompletionStrategyOnAPI = exports.TransactionCompletionStrategyOnProxy = void 0;\n\nconst primitives_1 = require(\"./primitives\");\n\nconst WellKnownCompletionEvents = [\"completedTxEvent\", \"SCDeploy\", \"signalError\"];\n/**\n * Algorithm for detecting transaction completion.\n * Based on some heuristics (a bit imprecise therefore, at this moment).\n */\n\nclass TransactionCompletionStrategyOnProxy {\n  isCompleted(transaction) {\n    if (transaction.status.isPending()) {\n      // Certainly not completed.\n      return false;\n    } // Handle gateway mechanics:\n\n\n    for (const completionEvent of WellKnownCompletionEvents) {\n      if (transaction.logs.findFirstOrNoneEvent(completionEvent)) {\n        // Certainly completed.\n        console.debug(\"TransactionCompletionStrategy.isCompleted(), found event:\", completionEvent);\n        return true;\n      }\n    }\n\n    if (this.isCertainlyMoveBalance(transaction.data)) {\n      return transaction.status.isExecuted();\n    }\n\n    let hyperblockNonce = transaction.hyperblockNonce; // Imprecise condition, uncertain completion (usually sufficient, though).\n    // This is WRONG when (at least): timeOf(block with execution at destination is notarized) < timeOf(the \"completedTxEvent\" occurs).\n\n    if (hyperblockNonce > 0) {\n      console.debug(\"TransactionCompletionStrategy.isCompleted(), found hyperblock nonce:\", hyperblockNonce);\n      return true;\n    }\n\n    return false;\n  }\n\n  isCertainlyMoveBalance(transactionData) {\n    let parts = transactionData.toString().split(\"@\");\n    let prefix = parts[0];\n    let otherParts = parts.slice(1);\n    let emptyPrefix = !prefix;\n    let somePartsAreNotValidArguments = !otherParts.every(part => this.looksLikeValidArgument(part));\n    return emptyPrefix || somePartsAreNotValidArguments;\n  }\n\n  looksLikeValidArgument(arg) {\n    return primitives_1.isPaddedHex(arg);\n  }\n\n}\n\nexports.TransactionCompletionStrategyOnProxy = TransactionCompletionStrategyOnProxy;\n\nclass TransactionCompletionStrategyOnAPI {\n  isCompleted(transaction) {\n    return !transaction.status.isPending();\n  }\n\n}\n\nexports.TransactionCompletionStrategyOnAPI = TransactionCompletionStrategyOnAPI;","map":{"version":3,"mappings":";;;;;;;AAEA;;AASA,MAAMA,yBAAyB,GAAG,CAAC,kBAAD,EAAqB,UAArB,EAAiC,aAAjC,CAAlC;AAEA;;;;;AAIA,MAAaC,oCAAb,CAAiD;AAC7CC,aAAW,CAACC,WAAD,EAAmC;AAC1C,QAAIA,WAAW,CAACC,MAAZ,CAAmBC,SAAnB,EAAJ,EAAoC;AAChC;AACA,aAAO,KAAP;AACH,KAJyC,CAM1C;;;AACA,SAAK,MAAMC,eAAX,IAA8BN,yBAA9B,EAAyD;AACrD,UAAIG,WAAW,CAACI,IAAZ,CAAiBC,oBAAjB,CAAsCF,eAAtC,CAAJ,EAA4D;AACxD;AACAG,eAAO,CAACC,KAAR,CAAc,2DAAd,EAA2EJ,eAA3E;AACA,eAAO,IAAP;AACH;AACJ;;AAED,QAAI,KAAKK,sBAAL,CAA4BR,WAAW,CAACS,IAAxC,CAAJ,EAAmD;AAC/C,aAAOT,WAAW,CAACC,MAAZ,CAAmBS,UAAnB,EAAP;AACH;;AAED,QAAIC,eAAe,GAAGX,WAAW,CAACW,eAAlC,CAnB0C,CAqB1C;AACA;;AACA,QAAIA,eAAe,GAAG,CAAtB,EAAyB;AACrBL,aAAO,CAACC,KAAR,CAAc,sEAAd,EAAsFI,eAAtF;AACA,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEOH,wBAAsB,CAACI,eAAD,EAAwB;AAClD,QAAIC,KAAK,GAAGD,eAAe,CAACE,QAAhB,GAA2BC,KAA3B,CAAiC,GAAjC,CAAZ;AACA,QAAIC,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAlB;AACA,QAAII,UAAU,GAAGJ,KAAK,CAACK,KAAN,CAAY,CAAZ,CAAjB;AACA,QAAIC,WAAW,GAAG,CAACH,MAAnB;AACA,QAAII,6BAA6B,GAAG,CAACH,UAAU,CAACI,KAAX,CAAiBC,IAAI,IAAI,KAAKC,sBAAL,CAA4BD,IAA5B,CAAzB,CAArC;AAEA,WAAOH,WAAW,IAAIC,6BAAtB;AACH;;AAEOG,wBAAsB,CAACC,GAAD,EAAY;AACtC,WAAOC,yBAAYD,GAAZ,CAAP;AACH;;AA5C4C;;AAAjDE;;AA+CA,MAAaC,kCAAb,CAA+C;AAC3C5B,aAAW,CAACC,WAAD,EAAmC;AAC1C,WAAO,CAACA,WAAW,CAACC,MAAZ,CAAmBC,SAAnB,EAAR;AACH;;AAH0C;;AAA/CwB","names":["WellKnownCompletionEvents","TransactionCompletionStrategyOnProxy","isCompleted","transaction","status","isPending","completionEvent","logs","findFirstOrNoneEvent","console","debug","isCertainlyMoveBalance","data","isExecuted","hyperblockNonce","transactionData","parts","toString","split","prefix","otherParts","slice","emptyPrefix","somePartsAreNotValidArguments","every","part","looksLikeValidArgument","arg","primitives_1","exports","TransactionCompletionStrategyOnAPI"],"sourceRoot":"","sources":["../src/transactionCompletionStrategy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}