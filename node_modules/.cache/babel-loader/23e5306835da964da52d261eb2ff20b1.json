{"ast":null,"code":"var backslash = require('backslash');\n\nmodule.exports = {\n  validate: validate,\n  parse: parse\n};\n/**\r\n * Validates a json string.\r\n * Errors are returned\r\n * @param jsonString\r\n * @param allowDuplicatedKeys\r\n * @returns {String} error. undefined if no error\r\n */\n\nfunction validate(jsonString, allowDuplicatedKeys) {\n  var error;\n  allowDuplicatedKeys = allowDuplicatedKeys || false;\n\n  if (typeof jsonString !== 'string') {\n    error = 'Input must be a string';\n  } else {\n    try {\n      // Try to find a value starting from index 0\n      _findValue(jsonString, 0, allowDuplicatedKeys, false);\n    } catch (e) {\n      error = e.message;\n    }\n  }\n\n  return error;\n}\n/**\r\n * Parses a json. Errors are thrown if any\r\n * @param jsonString\r\n * @param allowDuplicatedKeys\r\n * @returns {Object}\r\n */\n\n\nfunction parse(jsonString, allowDuplicatedKeys) {\n  if (typeof jsonString !== 'string') {\n    throw new Error('Input must be a string');\n  }\n\n  allowDuplicatedKeys = allowDuplicatedKeys || false; // Try to find a value starting from index 0\n\n  var value = _findValue(jsonString, 0, allowDuplicatedKeys, true);\n\n  return value.value;\n}\n/**\r\n * Find the comma separator, ], } or end of file\r\n * @param {String} str - original json string\r\n * @param {Number} startInd - starting index\r\n * @returns {{start: Number, end: Number, value: String}} value: the separator found\r\n * @private\r\n */\n\n\nfunction _findSeparator(str, startInd) {\n  var len = str.length;\n  var sepStartInd = startInd;\n  var sepEndInd;\n\n  for (var i = startInd; i < len; i++) {\n    var ch = str[i];\n\n    if (ch === ',') {\n      sepEndInd = i;\n      break;\n    } else if (ch === ']' || ch === '}') {\n      sepEndInd = i - 1;\n      break;\n    } else if (!_isWhiteSpace(ch)) {\n      throw _syntaxError(str, i, 'expecting end of expression or separator');\n    }\n  }\n\n  var value;\n\n  if (sepEndInd === undefined) {\n    sepEndInd = len;\n    value = str[sepEndInd];\n  } else {\n    value = str[sepEndInd];\n    sepEndInd++;\n  }\n\n  return {\n    start: sepStartInd,\n    end: sepEndInd,\n    value: value\n  };\n}\n/**\r\n * Find the semi-colon separator ':'\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @returns {{start: Number, end: Number}}\r\n * @private\r\n */\n\n\nfunction _findSemiColonSeparator(str, startInd) {\n  var len = str.length;\n  var semiColStartInd = startInd;\n  var semiColEndInd;\n\n  for (var i = startInd; i < len; i++) {\n    var ch = str[i];\n\n    if (ch === ':') {\n      semiColEndInd = i;\n      break;\n    } else if (!_isWhiteSpace(ch)) {\n      throw _syntaxError(str, i, 'expecting \\':\\'');\n    }\n  }\n\n  if (semiColEndInd === undefined) {\n    throw _syntaxError(str, i, 'expecting \\':\\'');\n  }\n\n  semiColEndInd++;\n  return {\n    start: semiColStartInd,\n    end: semiColEndInd\n  };\n}\n/**\r\n * Find a value it can be number, array, object, strings or boolean\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @param {Boolean} allowDuplicatedKeys - allow duplicated keys in objects or not\r\n * @returns {{value: *, start: Number, end: Number}}\r\n * @private\r\n */\n\n\nfunction _findValue(str, startInd, allowDuplicatedKeys, parse) {\n  var len = str.length;\n  var valueStartInd;\n  var valueEndInd;\n  var isArray = false;\n  var isObject = false;\n  var isString = false;\n  var isNumber = false;\n  var dotFound = false;\n  var whiteSpaceInNumber = false;\n  var value;\n\n  for (var i = startInd; i < len; i++) {\n    var ch = str[i];\n\n    if (valueStartInd === undefined) {\n      if (!_isWhiteSpace(ch)) {\n        if (ch === '[') {\n          isArray = true;\n        } else if (ch === '{') {\n          isObject = true;\n        } else if (ch === '\"') {\n          isString = true;\n        } else if (_isTrueFromIndex(str, i)) {\n          valueStartInd = i;\n          i = i + 3;\n          valueEndInd = i;\n          value = true;\n          break;\n        } else if (_isFalseFromIndex(str, i)) {\n          valueStartInd = i;\n          i = i + 4;\n          valueEndInd = i;\n          value = false;\n          break;\n        } else if (_isNullFromIndex(str, i)) {\n          valueStartInd = i;\n          i = i + 3;\n          valueEndInd = i;\n          value = null;\n          break;\n        } else if (_isNumber(ch)) {\n          isNumber = true;\n        } else if (ch === '-') {\n          isNumber = true;\n        } else {\n          throw _syntaxError(str, i, '');\n        }\n\n        valueStartInd = i;\n      }\n    } else {\n      if (isArray) {\n        var arr = _findArray(str, i, allowDuplicatedKeys, parse);\n\n        valueEndInd = arr.end;\n        value = arr.value;\n        break;\n      } else if (isObject) {\n        var obj = _findObject(str, i, allowDuplicatedKeys, parse);\n\n        valueEndInd = obj.end;\n        value = obj.value;\n        break;\n      } else if (isString && ch === '\"' && _hasEvenNumberOfBackSlash(str, i - 1)) {\n        valueEndInd = i;\n        value = backslash(str.substring(valueStartInd + 1, valueEndInd));\n        break;\n      } else if (isNumber) {\n        if (_isWhiteSpace(ch)) {\n          whiteSpaceInNumber = true;\n        } else if (ch === ',' || ch === ']' || ch === '}') {\n          value = parseFloat(str.substring(valueStartInd, valueEndInd), 10);\n          valueEndInd = i - 1;\n          break;\n        } else if (_isNumber(ch) && !whiteSpaceInNumber) {\n          continue;\n        } else if (ch === '.' && !dotFound && !whiteSpaceInNumber) {\n          dotFound = true;\n        } else {\n          throw _syntaxError(str, i, 'expecting number');\n        }\n      }\n    }\n  }\n\n  if (valueEndInd === undefined) {\n    if (isNumber) {\n      value = parseFloat(str.substring(valueStartInd, i), 10);\n      valueEndInd = i - 1;\n    } else {\n      throw _syntaxError(str, i, 'unclosed statement');\n    }\n  }\n\n  valueEndInd++;\n  return {\n    value: value,\n    start: valueStartInd,\n    end: valueEndInd\n  };\n}\n/**\r\n * Find a key in an object\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @returns {{start: Number, end: Number, value: String}}\r\n * @private\r\n */\n\n\nfunction _findKey(str, startInd) {\n  var len = str.length;\n  var keyStartInd;\n  var keyEndInd;\n\n  for (var i = startInd; i < len; i++) {\n    var ch = str[i];\n\n    if (keyStartInd === undefined) {\n      if (!_isWhiteSpace(ch)) {\n        if (ch !== '\"') {\n          throw _syntaxError(str, i, 'expecting String');\n        }\n\n        keyStartInd = i;\n      }\n    } else {\n      if (ch === '\"' && _hasEvenNumberOfBackSlash(str, i - 1)) {\n        keyEndInd = i;\n        break;\n      }\n    }\n  }\n\n  if (keyEndInd === undefined) {\n    throw _syntaxError(str, len, 'expecting String');\n  }\n\n  var value = backslash(str.substring(keyStartInd + 1, keyEndInd));\n\n  if (value === '') {\n    throw _syntaxError(str, keyStartInd, 'empty string');\n  }\n\n  keyEndInd++;\n  return {\n    start: keyStartInd,\n    end: keyEndInd,\n    value: value\n  };\n}\n/**\r\n * Find an object by identifying the key, ':' separator and value\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @param {Boolean} allowDuplicatedKeys\r\n * @returns {{start: Number, end: Number, value: Object}}\r\n * @private\r\n */\n\n\nfunction _findObject(str, startInd, allowDuplicatedKeys, parse) {\n  var i = startInd;\n  var sepValue = ',';\n  var obj = {};\n  var keys = [];\n  var values = [];\n  var j = startInd;\n\n  while (_isWhiteSpace(str[j])) {\n    j++;\n  }\n\n  if (str[j] === '}') {\n    return {\n      start: startInd,\n      end: j,\n      value: obj\n    };\n  }\n\n  while (sepValue === ',') {\n    var key = _findKey(str, i);\n\n    var semi = _findSemiColonSeparator(str, key.end);\n\n    var value = _findValue(str, semi.end, allowDuplicatedKeys, parse);\n\n    var sepIndex = _findSeparator(str, value.end);\n\n    if (!allowDuplicatedKeys) {\n      if (keys.indexOf(key.value) !== -1) {\n        key.value = key.value + '1'; // throw _syntaxError(str, key.end, 'duplicated keys \"' + key.value + '\"');\n      }\n    }\n\n    keys.push(key.value);\n    values.push(value.value);\n    i = sepIndex.end;\n    sepValue = sepIndex.value;\n  }\n\n  if (parse) {\n    var indx = 0;\n\n    for (indx = 0; indx < keys.length; indx++) {\n      obj[keys[indx]] = values[indx];\n    }\n  }\n\n  return {\n    start: startInd,\n    end: i,\n    value: obj\n  };\n}\n/**\r\n * Going backward from an index, determine if there are even number\r\n * of consecutive backslashes in the string\r\n * @param {String} str - original json string\r\n * @param {Number} endInd\r\n * @returns {Boolean}\r\n * @private\r\n */\n\n\nfunction _hasEvenNumberOfBackSlash(str, endInd) {\n  var i = endInd;\n  var count = 0;\n\n  while (i > -1 && str[i] === '\\\\') {\n    count++;\n    i--;\n  }\n\n  return count % 2 === 0;\n}\n/**\r\n * Find an array by identifying values separated by ',' separator\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @returns {{start: Number, end: Number, value: Array}}\r\n * @private\r\n */\n\n\nfunction _findArray(str, startInd, allowDuplicatedKeys, parse) {\n  var i = startInd;\n  var sepValue = ',';\n  var arr = [];\n  var j = startInd;\n\n  while (_isWhiteSpace(str[j])) {\n    j++;\n  }\n\n  if (str[j] === ']') {\n    return {\n      start: startInd,\n      end: j,\n      value: arr\n    };\n  }\n\n  while (sepValue === ',') {\n    var value = _findValue(str, i, allowDuplicatedKeys, parse);\n\n    var sepIndex = _findSeparator(str, value.end);\n\n    if (parse) {\n      arr.push(value.value);\n    }\n\n    i = sepIndex.end;\n    sepValue = sepIndex.value;\n  }\n\n  return {\n    start: startInd,\n    end: i,\n    value: arr\n  };\n}\n/**\r\n * Determine if the string is 'true' from specified index\r\n * @param {String} str - original json string\r\n * @param {Number} ind\r\n * @returns {Boolean}\r\n * @private\r\n */\n\n\nfunction _isTrueFromIndex(str, ind) {\n  return str.substr(ind, 4) === 'true';\n}\n/**\r\n * Determine if the string is 'false' from specified index\r\n * @param {String} str - original json string\r\n * @param {Number} ind\r\n * @returns {Boolean}\r\n * @private\r\n */\n\n\nfunction _isFalseFromIndex(str, ind) {\n  return str.substr(ind, 5) === 'false';\n}\n/**\r\n * Determine if the string is 'null' from specified index\r\n * @param {String} str - original json string\r\n * @param {Number} ind\r\n * @returns {Boolean}\r\n * @private\r\n */\n\n\nfunction _isNullFromIndex(str, ind) {\n  return str.substr(ind, 4) === 'null';\n}\n\nvar white = new RegExp(/^\\s$/);\n/**\r\n * Determine if this character is a white space\r\n * @param {String} ch - single character string\r\n * @returns {Boolean}\r\n * @private\r\n */\n\nfunction _isWhiteSpace(ch) {\n  return white.test(ch);\n}\n\nvar numberReg = new RegExp(/^\\d$/);\n/**\r\n * Determine if this character is a numeric character\r\n * @param {String} ch - single character string\r\n * @returns {Boolean}\r\n * @private\r\n */\n\nfunction _isNumber(ch) {\n  return numberReg.test(ch);\n}\n/**\r\n * Generate syntax error\r\n * @param {String} str - original json string\r\n * @param {Number} index - index in which the error was detected\r\n * @param {String} reason\r\n * @returns {Error}\r\n * @private\r\n */\n\n\nfunction _syntaxError(str, index, reason) {\n  var regionLen = 10;\n  var regionStr;\n\n  if (str.length < index + regionLen) {\n    regionStr = str.substr(_normalizeNegativeNumber(str.length - regionLen), str.length);\n  } else if (index - regionLen / 2 < 0) {\n    regionStr = str.substr(0, regionLen);\n  } else {\n    regionStr = str.substr(_normalizeNegativeNumber(index - regionLen / 2), regionLen);\n  }\n\n  var message;\n\n  if (reason) {\n    message = 'Syntax error: ' + reason + ' near ' + regionStr;\n  } else {\n    message = 'Syntax error near ' + regionStr;\n  }\n\n  return new Error(message);\n}\n/**\r\n * Return 0 if number is negative, the original number otherwise\r\n * @param {Number} num\r\n * @returns {Number}\r\n * @private\r\n */\n\n\nfunction _normalizeNegativeNumber(num) {\n  return num < 0 ? 0 : num;\n}","map":{"version":3,"names":["backslash","require","module","exports","validate","parse","jsonString","allowDuplicatedKeys","error","_findValue","e","message","Error","value","_findSeparator","str","startInd","len","length","sepStartInd","sepEndInd","i","ch","_isWhiteSpace","_syntaxError","undefined","start","end","_findSemiColonSeparator","semiColStartInd","semiColEndInd","valueStartInd","valueEndInd","isArray","isObject","isString","isNumber","dotFound","whiteSpaceInNumber","_isTrueFromIndex","_isFalseFromIndex","_isNullFromIndex","_isNumber","arr","_findArray","obj","_findObject","_hasEvenNumberOfBackSlash","substring","parseFloat","_findKey","keyStartInd","keyEndInd","sepValue","keys","values","j","key","semi","sepIndex","indexOf","push","indx","endInd","count","ind","substr","white","RegExp","test","numberReg","index","reason","regionLen","regionStr","_normalizeNegativeNumber","num"],"sources":["C:/Users/Mmo-Omen/Documents/GitHub/NFT_Minting_dApp/node_modules/json-duplicate-key-handle/index.js"],"sourcesContent":["var backslash = require('backslash');\r\nmodule.exports = {\r\n  validate: validate,\r\n  parse: parse\r\n};\r\n\r\n/**\r\n * Validates a json string.\r\n * Errors are returned\r\n * @param jsonString\r\n * @param allowDuplicatedKeys\r\n * @returns {String} error. undefined if no error\r\n */\r\nfunction validate(jsonString, allowDuplicatedKeys) {\r\n  var error;\r\n  allowDuplicatedKeys = allowDuplicatedKeys || false;\r\n  if (typeof jsonString !== 'string') {\r\n    error = 'Input must be a string';\r\n  } else {\r\n    try {\r\n      // Try to find a value starting from index 0\r\n      _findValue(jsonString, 0, allowDuplicatedKeys, false);\r\n    } catch(e) {\r\n      error = e.message;\r\n    }\r\n  }\r\n  return error;\r\n}\r\n\r\n/**\r\n * Parses a json. Errors are thrown if any\r\n * @param jsonString\r\n * @param allowDuplicatedKeys\r\n * @returns {Object}\r\n */\r\nfunction parse(jsonString, allowDuplicatedKeys) {\r\n  if (typeof jsonString !== 'string') {\r\n    throw new Error('Input must be a string');\r\n  }\r\n\r\n  allowDuplicatedKeys = allowDuplicatedKeys || false;\r\n\r\n  // Try to find a value starting from index 0\r\n  var value = _findValue(jsonString, 0, allowDuplicatedKeys, true);\r\n  return value.value;\r\n}\r\n\r\n/**\r\n * Find the comma separator, ], } or end of file\r\n * @param {String} str - original json string\r\n * @param {Number} startInd - starting index\r\n * @returns {{start: Number, end: Number, value: String}} value: the separator found\r\n * @private\r\n */\r\nfunction _findSeparator(str, startInd) {\r\n  var len = str.length;\r\n  var sepStartInd = startInd;\r\n  var sepEndInd;\r\n  for (var i = startInd; i < len; i++) {\r\n    var ch = str[i];\r\n    if (ch === ',') {\r\n      sepEndInd = i;\r\n      break;\r\n    } else if ( ch === ']' || ch === '}') {\r\n      sepEndInd = i - 1;\r\n      break;\r\n    } else if (!_isWhiteSpace(ch)) {\r\n      throw _syntaxError(str, i, 'expecting end of expression or separator');\r\n    }\r\n  }\r\n\r\n  var value;\r\n  if (sepEndInd === undefined) {\r\n    sepEndInd = len;\r\n    value = str[sepEndInd];\r\n  } else {\r\n    value = str[sepEndInd];\r\n    sepEndInd++;\r\n  }\r\n  return {\r\n    start: sepStartInd,\r\n    end: sepEndInd,\r\n    value: value\r\n  };\r\n}\r\n\r\n/**\r\n * Find the semi-colon separator ':'\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @returns {{start: Number, end: Number}}\r\n * @private\r\n */\r\nfunction _findSemiColonSeparator(str, startInd) {\r\n  var len = str.length;\r\n  var semiColStartInd = startInd;\r\n  var semiColEndInd;\r\n  for (var i = startInd; i < len; i++) {\r\n    var ch = str[i];\r\n    if (ch === ':') {\r\n      semiColEndInd = i;\r\n      break;\r\n    } else if (!_isWhiteSpace(ch)) {\r\n      throw _syntaxError(str, i, 'expecting \\':\\'');\r\n    }\r\n  }\r\n  if (semiColEndInd === undefined) {\r\n    throw _syntaxError(str, i, 'expecting \\':\\'');\r\n  }\r\n  semiColEndInd++;\r\n  return {\r\n    start: semiColStartInd,\r\n    end: semiColEndInd\r\n  };\r\n}\r\n\r\n/**\r\n * Find a value it can be number, array, object, strings or boolean\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @param {Boolean} allowDuplicatedKeys - allow duplicated keys in objects or not\r\n * @returns {{value: *, start: Number, end: Number}}\r\n * @private\r\n */\r\nfunction _findValue(str, startInd, allowDuplicatedKeys, parse) {\r\n  var len = str.length;\r\n  var valueStartInd;\r\n  var valueEndInd;\r\n  var isArray = false;\r\n  var isObject = false;\r\n  var isString = false;\r\n  var isNumber = false;\r\n  var dotFound = false;\r\n  var whiteSpaceInNumber = false;\r\n  var value;\r\n\r\n  for (var i = startInd; i < len; i++) {\r\n\r\n    var ch = str[i];\r\n    if (valueStartInd === undefined) {\r\n      if (!_isWhiteSpace(ch)) {\r\n        if (ch === '[') {\r\n          isArray = true;\r\n        } else if (ch === '{') {\r\n          isObject = true;\r\n        } else if (ch === '\"') {\r\n          isString = true;\r\n        } else if (_isTrueFromIndex(str, i)) {\r\n          valueStartInd = i;\r\n          i = i + 3;\r\n          valueEndInd = i;\r\n          value = true;\r\n          break;\r\n        } else if (_isFalseFromIndex(str, i)) {\r\n          valueStartInd = i;\r\n          i = i + 4;\r\n          valueEndInd = i;\r\n          value = false;\r\n          break;\r\n        } else if (_isNullFromIndex(str, i)) {\r\n          valueStartInd = i;\r\n          i = i + 3;\r\n          valueEndInd = i;\r\n          value = null;\r\n          break;\r\n        } else if (_isNumber(ch)) {\r\n          isNumber = true;\r\n        } else if (ch === '-') {\r\n          isNumber = true;\r\n        } else {\r\n          throw _syntaxError(str, i, '');\r\n        }\r\n        valueStartInd = i;\r\n      }\r\n    } else {\r\n      if (isArray) {\r\n        var arr = _findArray(str, i, allowDuplicatedKeys, parse);\r\n        valueEndInd = arr.end;\r\n        value = arr.value;\r\n        break;\r\n      } else if (isObject) {\r\n        var obj = _findObject(str, i, allowDuplicatedKeys, parse);\r\n        valueEndInd = obj.end;\r\n        value = obj.value;\r\n        break;\r\n      } else if (isString && ch === '\"' && _hasEvenNumberOfBackSlash(str, i - 1)) {\r\n        valueEndInd = i;\r\n        value = backslash(str.substring(valueStartInd + 1, valueEndInd));\r\n        break;\r\n      } else if (isNumber) {\r\n        if(_isWhiteSpace(ch)) {\r\n          whiteSpaceInNumber = true;\r\n        } else if (ch === ',' || ch === ']' || ch === '}') {\r\n          value = parseFloat(str.substring(valueStartInd, valueEndInd), 10);\r\n          valueEndInd = i - 1;\r\n          break;\r\n        } else if (_isNumber(ch) && !whiteSpaceInNumber) {\r\n          continue;\r\n        } else if (ch === '.' && !dotFound && !whiteSpaceInNumber) {\r\n          dotFound = true;\r\n        } else {\r\n          throw _syntaxError(str, i, 'expecting number');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (valueEndInd === undefined) {\r\n    if (isNumber) {\r\n      value = parseFloat(str.substring(valueStartInd, i), 10);\r\n      valueEndInd = i - 1;\r\n    } else {\r\n      throw _syntaxError(str, i, 'unclosed statement');\r\n    }\r\n  }\r\n  valueEndInd++;\r\n  return {\r\n    value: value,\r\n    start: valueStartInd,\r\n    end: valueEndInd\r\n  };\r\n}\r\n\r\n/**\r\n * Find a key in an object\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @returns {{start: Number, end: Number, value: String}}\r\n * @private\r\n */\r\nfunction _findKey(str, startInd) {\r\n  var len = str.length;\r\n  var keyStartInd;\r\n  var keyEndInd;\r\n  for (var i = startInd; i < len; i++) {\r\n    var ch = str[i];\r\n    if (keyStartInd === undefined) {\r\n      if (!_isWhiteSpace(ch)) {\r\n        if (ch !== '\"') {\r\n          throw _syntaxError(str, i, 'expecting String');\r\n        }\r\n        keyStartInd = i;\r\n      }\r\n    } else {\r\n      if (ch === '\"' && _hasEvenNumberOfBackSlash(str, i - 1)) {\r\n        keyEndInd = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (keyEndInd === undefined) {\r\n    throw _syntaxError(str, len, 'expecting String');\r\n  }\r\n\r\n  var value = backslash(str.substring(keyStartInd + 1, keyEndInd));\r\n  if (value === '') {\r\n    throw _syntaxError(str, keyStartInd, 'empty string');\r\n  }\r\n  keyEndInd++;\r\n  return {\r\n    start: keyStartInd,\r\n    end: keyEndInd,\r\n    value: value\r\n  };\r\n}\r\n\r\n/**\r\n * Find an object by identifying the key, ':' separator and value\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @param {Boolean} allowDuplicatedKeys\r\n * @returns {{start: Number, end: Number, value: Object}}\r\n * @private\r\n */\r\nfunction _findObject(str, startInd, allowDuplicatedKeys, parse) {\r\n  var i = startInd;\r\n  var sepValue = ',';\r\n  var obj = {};\r\n  var keys = [];\r\n  var values = [];\r\n\r\n  var j = startInd;\r\n  while (_isWhiteSpace(str[j])) {\r\n    j++;\r\n  }\r\n\r\n  if (str[j] === '}') {\r\n    return {\r\n      start: startInd,\r\n      end: j,\r\n      value: obj\r\n    };\r\n  }\r\n\r\n  while (sepValue === ',') {\r\n    var key = _findKey(str, i);\r\n    var semi = _findSemiColonSeparator(str, key.end);\r\n    var value = _findValue(str, semi.end, allowDuplicatedKeys, parse);\r\n    var sepIndex = _findSeparator(str, value.end);\r\n\r\n    if (!allowDuplicatedKeys) {\r\n      if(keys.indexOf(key.value) !== -1) {\r\n        key.value = key.value + '1';\r\n        // throw _syntaxError(str, key.end, 'duplicated keys \"' + key.value + '\"');\r\n      }\r\n    }\r\n    keys.push(key.value);\r\n    values.push(value.value);\r\n    i = sepIndex.end;\r\n    sepValue = sepIndex.value;\r\n  }\r\n\r\n  if (parse) {\r\n    var indx = 0;\r\n    for(indx = 0; indx < keys.length; indx++) {\r\n      obj[keys[indx]] = values[indx];\r\n    }\r\n  }\r\n\r\n  return {\r\n    start: startInd,\r\n    end: i,\r\n    value: obj\r\n  };\r\n}\r\n\r\n/**\r\n * Going backward from an index, determine if there are even number\r\n * of consecutive backslashes in the string\r\n * @param {String} str - original json string\r\n * @param {Number} endInd\r\n * @returns {Boolean}\r\n * @private\r\n */\r\nfunction _hasEvenNumberOfBackSlash(str, endInd) {\r\n  var i = endInd;\r\n  var count = 0;\r\n  while(i > -1 && str[i] === '\\\\') {\r\n    count++;\r\n    i--;\r\n  }\r\n  return (count % 2) === 0;\r\n}\r\n\r\n/**\r\n * Find an array by identifying values separated by ',' separator\r\n * @param {String} str - original json string\r\n * @param {Number} startInd\r\n * @returns {{start: Number, end: Number, value: Array}}\r\n * @private\r\n */\r\nfunction _findArray(str, startInd, allowDuplicatedKeys, parse) {\r\n  var i = startInd;\r\n  var sepValue = ',';\r\n  var arr = [];\r\n\r\n  var j = startInd;\r\n  while (_isWhiteSpace(str[j])) {\r\n    j++;\r\n  }\r\n\r\n  if (str[j] === ']') {\r\n    return {\r\n      start: startInd,\r\n      end: j,\r\n      value: arr\r\n    };\r\n  }\r\n\r\n  while (sepValue === ',') {\r\n    var value = _findValue(str, i, allowDuplicatedKeys, parse);\r\n    var sepIndex = _findSeparator(str, value.end);\r\n\r\n    if (parse) {\r\n      arr.push(value.value);\r\n    }\r\n    i = sepIndex.end;\r\n    sepValue = sepIndex.value;\r\n  }\r\n  return {\r\n    start: startInd,\r\n    end: i,\r\n    value: arr\r\n  };\r\n}\r\n\r\n/**\r\n * Determine if the string is 'true' from specified index\r\n * @param {String} str - original json string\r\n * @param {Number} ind\r\n * @returns {Boolean}\r\n * @private\r\n */\r\nfunction _isTrueFromIndex(str, ind) {\r\n  return (str.substr(ind, 4) === 'true');\r\n}\r\n\r\n/**\r\n * Determine if the string is 'false' from specified index\r\n * @param {String} str - original json string\r\n * @param {Number} ind\r\n * @returns {Boolean}\r\n * @private\r\n */\r\nfunction _isFalseFromIndex(str, ind) {\r\n  return (str.substr(ind, 5) === 'false');\r\n}\r\n\r\n/**\r\n * Determine if the string is 'null' from specified index\r\n * @param {String} str - original json string\r\n * @param {Number} ind\r\n * @returns {Boolean}\r\n * @private\r\n */\r\nfunction _isNullFromIndex(str, ind) {\r\n  return (str.substr(ind, 4) === 'null');\r\n}\r\n\r\nvar white = new RegExp(/^\\s$/);\r\n/**\r\n * Determine if this character is a white space\r\n * @param {String} ch - single character string\r\n * @returns {Boolean}\r\n * @private\r\n */\r\nfunction _isWhiteSpace(ch){\r\n  return white.test(ch);\r\n}\r\n\r\nvar numberReg = new RegExp(/^\\d$/);\r\n/**\r\n * Determine if this character is a numeric character\r\n * @param {String} ch - single character string\r\n * @returns {Boolean}\r\n * @private\r\n */\r\nfunction _isNumber(ch) {\r\n  return numberReg.test(ch);\r\n}\r\n\r\n/**\r\n * Generate syntax error\r\n * @param {String} str - original json string\r\n * @param {Number} index - index in which the error was detected\r\n * @param {String} reason\r\n * @returns {Error}\r\n * @private\r\n */\r\nfunction _syntaxError(str, index, reason) {\r\n  var regionLen = 10;\r\n\r\n  var regionStr;\r\n  if (str.length < index + regionLen) {\r\n    regionStr = str.substr(_normalizeNegativeNumber(str.length - regionLen), str.length);\r\n  } else if (index - (regionLen/2) < 0) {\r\n    regionStr = str.substr(0, regionLen);\r\n  } else {\r\n    regionStr = str.substr(_normalizeNegativeNumber(index - (regionLen/2)), regionLen);\r\n  }\r\n\r\n  var message;\r\n  if (reason) {\r\n    message = 'Syntax error: ' + reason + ' near ' + regionStr;\r\n  } else {\r\n    message = 'Syntax error near ' + regionStr;\r\n  }\r\n  return new Error(message);\r\n}\r\n\r\n/**\r\n * Return 0 if number is negative, the original number otherwise\r\n * @param {Number} num\r\n * @returns {Number}\r\n * @private\r\n */\r\nfunction _normalizeNegativeNumber(num) {\r\n  return (num < 0) ? 0 : num;\r\n}"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACAC,MAAM,CAACC,OAAP,GAAiB;EACfC,QAAQ,EAAEA,QADK;EAEfC,KAAK,EAAEA;AAFQ,CAAjB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,QAAT,CAAkBE,UAAlB,EAA8BC,mBAA9B,EAAmD;EACjD,IAAIC,KAAJ;EACAD,mBAAmB,GAAGA,mBAAmB,IAAI,KAA7C;;EACA,IAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;IAClCE,KAAK,GAAG,wBAAR;EACD,CAFD,MAEO;IACL,IAAI;MACF;MACAC,UAAU,CAACH,UAAD,EAAa,CAAb,EAAgBC,mBAAhB,EAAqC,KAArC,CAAV;IACD,CAHD,CAGE,OAAMG,CAAN,EAAS;MACTF,KAAK,GAAGE,CAAC,CAACC,OAAV;IACD;EACF;;EACD,OAAOH,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,KAAT,CAAeC,UAAf,EAA2BC,mBAA3B,EAAgD;EAC9C,IAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;IAClC,MAAM,IAAIM,KAAJ,CAAU,wBAAV,CAAN;EACD;;EAEDL,mBAAmB,GAAGA,mBAAmB,IAAI,KAA7C,CAL8C,CAO9C;;EACA,IAAIM,KAAK,GAAGJ,UAAU,CAACH,UAAD,EAAa,CAAb,EAAgBC,mBAAhB,EAAqC,IAArC,CAAtB;;EACA,OAAOM,KAAK,CAACA,KAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,QAA7B,EAAuC;EACrC,IAAIC,GAAG,GAAGF,GAAG,CAACG,MAAd;EACA,IAAIC,WAAW,GAAGH,QAAlB;EACA,IAAII,SAAJ;;EACA,KAAK,IAAIC,CAAC,GAAGL,QAAb,EAAuBK,CAAC,GAAGJ,GAA3B,EAAgCI,CAAC,EAAjC,EAAqC;IACnC,IAAIC,EAAE,GAAGP,GAAG,CAACM,CAAD,CAAZ;;IACA,IAAIC,EAAE,KAAK,GAAX,EAAgB;MACdF,SAAS,GAAGC,CAAZ;MACA;IACD,CAHD,MAGO,IAAKC,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAA1B,EAA+B;MACpCF,SAAS,GAAGC,CAAC,GAAG,CAAhB;MACA;IACD,CAHM,MAGA,IAAI,CAACE,aAAa,CAACD,EAAD,CAAlB,EAAwB;MAC7B,MAAME,YAAY,CAACT,GAAD,EAAMM,CAAN,EAAS,0CAAT,CAAlB;IACD;EACF;;EAED,IAAIR,KAAJ;;EACA,IAAIO,SAAS,KAAKK,SAAlB,EAA6B;IAC3BL,SAAS,GAAGH,GAAZ;IACAJ,KAAK,GAAGE,GAAG,CAACK,SAAD,CAAX;EACD,CAHD,MAGO;IACLP,KAAK,GAAGE,GAAG,CAACK,SAAD,CAAX;IACAA,SAAS;EACV;;EACD,OAAO;IACLM,KAAK,EAAEP,WADF;IAELQ,GAAG,EAAEP,SAFA;IAGLP,KAAK,EAAEA;EAHF,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,uBAAT,CAAiCb,GAAjC,EAAsCC,QAAtC,EAAgD;EAC9C,IAAIC,GAAG,GAAGF,GAAG,CAACG,MAAd;EACA,IAAIW,eAAe,GAAGb,QAAtB;EACA,IAAIc,aAAJ;;EACA,KAAK,IAAIT,CAAC,GAAGL,QAAb,EAAuBK,CAAC,GAAGJ,GAA3B,EAAgCI,CAAC,EAAjC,EAAqC;IACnC,IAAIC,EAAE,GAAGP,GAAG,CAACM,CAAD,CAAZ;;IACA,IAAIC,EAAE,KAAK,GAAX,EAAgB;MACdQ,aAAa,GAAGT,CAAhB;MACA;IACD,CAHD,MAGO,IAAI,CAACE,aAAa,CAACD,EAAD,CAAlB,EAAwB;MAC7B,MAAME,YAAY,CAACT,GAAD,EAAMM,CAAN,EAAS,iBAAT,CAAlB;IACD;EACF;;EACD,IAAIS,aAAa,KAAKL,SAAtB,EAAiC;IAC/B,MAAMD,YAAY,CAACT,GAAD,EAAMM,CAAN,EAAS,iBAAT,CAAlB;EACD;;EACDS,aAAa;EACb,OAAO;IACLJ,KAAK,EAAEG,eADF;IAELF,GAAG,EAAEG;EAFA,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASrB,UAAT,CAAoBM,GAApB,EAAyBC,QAAzB,EAAmCT,mBAAnC,EAAwDF,KAAxD,EAA+D;EAC7D,IAAIY,GAAG,GAAGF,GAAG,CAACG,MAAd;EACA,IAAIa,aAAJ;EACA,IAAIC,WAAJ;EACA,IAAIC,OAAO,GAAG,KAAd;EACA,IAAIC,QAAQ,GAAG,KAAf;EACA,IAAIC,QAAQ,GAAG,KAAf;EACA,IAAIC,QAAQ,GAAG,KAAf;EACA,IAAIC,QAAQ,GAAG,KAAf;EACA,IAAIC,kBAAkB,GAAG,KAAzB;EACA,IAAIzB,KAAJ;;EAEA,KAAK,IAAIQ,CAAC,GAAGL,QAAb,EAAuBK,CAAC,GAAGJ,GAA3B,EAAgCI,CAAC,EAAjC,EAAqC;IAEnC,IAAIC,EAAE,GAAGP,GAAG,CAACM,CAAD,CAAZ;;IACA,IAAIU,aAAa,KAAKN,SAAtB,EAAiC;MAC/B,IAAI,CAACF,aAAa,CAACD,EAAD,CAAlB,EAAwB;QACtB,IAAIA,EAAE,KAAK,GAAX,EAAgB;UACdW,OAAO,GAAG,IAAV;QACD,CAFD,MAEO,IAAIX,EAAE,KAAK,GAAX,EAAgB;UACrBY,QAAQ,GAAG,IAAX;QACD,CAFM,MAEA,IAAIZ,EAAE,KAAK,GAAX,EAAgB;UACrBa,QAAQ,GAAG,IAAX;QACD,CAFM,MAEA,IAAII,gBAAgB,CAACxB,GAAD,EAAMM,CAAN,CAApB,EAA8B;UACnCU,aAAa,GAAGV,CAAhB;UACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;UACAW,WAAW,GAAGX,CAAd;UACAR,KAAK,GAAG,IAAR;UACA;QACD,CANM,MAMA,IAAI2B,iBAAiB,CAACzB,GAAD,EAAMM,CAAN,CAArB,EAA+B;UACpCU,aAAa,GAAGV,CAAhB;UACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;UACAW,WAAW,GAAGX,CAAd;UACAR,KAAK,GAAG,KAAR;UACA;QACD,CANM,MAMA,IAAI4B,gBAAgB,CAAC1B,GAAD,EAAMM,CAAN,CAApB,EAA8B;UACnCU,aAAa,GAAGV,CAAhB;UACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;UACAW,WAAW,GAAGX,CAAd;UACAR,KAAK,GAAG,IAAR;UACA;QACD,CANM,MAMA,IAAI6B,SAAS,CAACpB,EAAD,CAAb,EAAmB;UACxBc,QAAQ,GAAG,IAAX;QACD,CAFM,MAEA,IAAId,EAAE,KAAK,GAAX,EAAgB;UACrBc,QAAQ,GAAG,IAAX;QACD,CAFM,MAEA;UACL,MAAMZ,YAAY,CAACT,GAAD,EAAMM,CAAN,EAAS,EAAT,CAAlB;QACD;;QACDU,aAAa,GAAGV,CAAhB;MACD;IACF,CAnCD,MAmCO;MACL,IAAIY,OAAJ,EAAa;QACX,IAAIU,GAAG,GAAGC,UAAU,CAAC7B,GAAD,EAAMM,CAAN,EAASd,mBAAT,EAA8BF,KAA9B,CAApB;;QACA2B,WAAW,GAAGW,GAAG,CAAChB,GAAlB;QACAd,KAAK,GAAG8B,GAAG,CAAC9B,KAAZ;QACA;MACD,CALD,MAKO,IAAIqB,QAAJ,EAAc;QACnB,IAAIW,GAAG,GAAGC,WAAW,CAAC/B,GAAD,EAAMM,CAAN,EAASd,mBAAT,EAA8BF,KAA9B,CAArB;;QACA2B,WAAW,GAAGa,GAAG,CAAClB,GAAlB;QACAd,KAAK,GAAGgC,GAAG,CAAChC,KAAZ;QACA;MACD,CALM,MAKA,IAAIsB,QAAQ,IAAIb,EAAE,KAAK,GAAnB,IAA0ByB,yBAAyB,CAAChC,GAAD,EAAMM,CAAC,GAAG,CAAV,CAAvD,EAAqE;QAC1EW,WAAW,GAAGX,CAAd;QACAR,KAAK,GAAGb,SAAS,CAACe,GAAG,CAACiC,SAAJ,CAAcjB,aAAa,GAAG,CAA9B,EAAiCC,WAAjC,CAAD,CAAjB;QACA;MACD,CAJM,MAIA,IAAII,QAAJ,EAAc;QACnB,IAAGb,aAAa,CAACD,EAAD,CAAhB,EAAsB;UACpBgB,kBAAkB,GAAG,IAArB;QACD,CAFD,MAEO,IAAIhB,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAArB,IAA4BA,EAAE,KAAK,GAAvC,EAA4C;UACjDT,KAAK,GAAGoC,UAAU,CAAClC,GAAG,CAACiC,SAAJ,CAAcjB,aAAd,EAA6BC,WAA7B,CAAD,EAA4C,EAA5C,CAAlB;UACAA,WAAW,GAAGX,CAAC,GAAG,CAAlB;UACA;QACD,CAJM,MAIA,IAAIqB,SAAS,CAACpB,EAAD,CAAT,IAAiB,CAACgB,kBAAtB,EAA0C;UAC/C;QACD,CAFM,MAEA,IAAIhB,EAAE,KAAK,GAAP,IAAc,CAACe,QAAf,IAA2B,CAACC,kBAAhC,EAAoD;UACzDD,QAAQ,GAAG,IAAX;QACD,CAFM,MAEA;UACL,MAAMb,YAAY,CAACT,GAAD,EAAMM,CAAN,EAAS,kBAAT,CAAlB;QACD;MACF;IACF;EACF;;EAED,IAAIW,WAAW,KAAKP,SAApB,EAA+B;IAC7B,IAAIW,QAAJ,EAAc;MACZvB,KAAK,GAAGoC,UAAU,CAAClC,GAAG,CAACiC,SAAJ,CAAcjB,aAAd,EAA6BV,CAA7B,CAAD,EAAkC,EAAlC,CAAlB;MACAW,WAAW,GAAGX,CAAC,GAAG,CAAlB;IACD,CAHD,MAGO;MACL,MAAMG,YAAY,CAACT,GAAD,EAAMM,CAAN,EAAS,oBAAT,CAAlB;IACD;EACF;;EACDW,WAAW;EACX,OAAO;IACLnB,KAAK,EAAEA,KADF;IAELa,KAAK,EAAEK,aAFF;IAGLJ,GAAG,EAAEK;EAHA,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,QAAT,CAAkBnC,GAAlB,EAAuBC,QAAvB,EAAiC;EAC/B,IAAIC,GAAG,GAAGF,GAAG,CAACG,MAAd;EACA,IAAIiC,WAAJ;EACA,IAAIC,SAAJ;;EACA,KAAK,IAAI/B,CAAC,GAAGL,QAAb,EAAuBK,CAAC,GAAGJ,GAA3B,EAAgCI,CAAC,EAAjC,EAAqC;IACnC,IAAIC,EAAE,GAAGP,GAAG,CAACM,CAAD,CAAZ;;IACA,IAAI8B,WAAW,KAAK1B,SAApB,EAA+B;MAC7B,IAAI,CAACF,aAAa,CAACD,EAAD,CAAlB,EAAwB;QACtB,IAAIA,EAAE,KAAK,GAAX,EAAgB;UACd,MAAME,YAAY,CAACT,GAAD,EAAMM,CAAN,EAAS,kBAAT,CAAlB;QACD;;QACD8B,WAAW,GAAG9B,CAAd;MACD;IACF,CAPD,MAOO;MACL,IAAIC,EAAE,KAAK,GAAP,IAAcyB,yBAAyB,CAAChC,GAAD,EAAMM,CAAC,GAAG,CAAV,CAA3C,EAAyD;QACvD+B,SAAS,GAAG/B,CAAZ;QACA;MACD;IACF;EACF;;EAED,IAAI+B,SAAS,KAAK3B,SAAlB,EAA6B;IAC3B,MAAMD,YAAY,CAACT,GAAD,EAAME,GAAN,EAAW,kBAAX,CAAlB;EACD;;EAED,IAAIJ,KAAK,GAAGb,SAAS,CAACe,GAAG,CAACiC,SAAJ,CAAcG,WAAW,GAAG,CAA5B,EAA+BC,SAA/B,CAAD,CAArB;;EACA,IAAIvC,KAAK,KAAK,EAAd,EAAkB;IAChB,MAAMW,YAAY,CAACT,GAAD,EAAMoC,WAAN,EAAmB,cAAnB,CAAlB;EACD;;EACDC,SAAS;EACT,OAAO;IACL1B,KAAK,EAAEyB,WADF;IAELxB,GAAG,EAAEyB,SAFA;IAGLvC,KAAK,EAAEA;EAHF,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiC,WAAT,CAAqB/B,GAArB,EAA0BC,QAA1B,EAAoCT,mBAApC,EAAyDF,KAAzD,EAAgE;EAC9D,IAAIgB,CAAC,GAAGL,QAAR;EACA,IAAIqC,QAAQ,GAAG,GAAf;EACA,IAAIR,GAAG,GAAG,EAAV;EACA,IAAIS,IAAI,GAAG,EAAX;EACA,IAAIC,MAAM,GAAG,EAAb;EAEA,IAAIC,CAAC,GAAGxC,QAAR;;EACA,OAAOO,aAAa,CAACR,GAAG,CAACyC,CAAD,CAAJ,CAApB,EAA8B;IAC5BA,CAAC;EACF;;EAED,IAAIzC,GAAG,CAACyC,CAAD,CAAH,KAAW,GAAf,EAAoB;IAClB,OAAO;MACL9B,KAAK,EAAEV,QADF;MAELW,GAAG,EAAE6B,CAFA;MAGL3C,KAAK,EAAEgC;IAHF,CAAP;EAKD;;EAED,OAAOQ,QAAQ,KAAK,GAApB,EAAyB;IACvB,IAAII,GAAG,GAAGP,QAAQ,CAACnC,GAAD,EAAMM,CAAN,CAAlB;;IACA,IAAIqC,IAAI,GAAG9B,uBAAuB,CAACb,GAAD,EAAM0C,GAAG,CAAC9B,GAAV,CAAlC;;IACA,IAAId,KAAK,GAAGJ,UAAU,CAACM,GAAD,EAAM2C,IAAI,CAAC/B,GAAX,EAAgBpB,mBAAhB,EAAqCF,KAArC,CAAtB;;IACA,IAAIsD,QAAQ,GAAG7C,cAAc,CAACC,GAAD,EAAMF,KAAK,CAACc,GAAZ,CAA7B;;IAEA,IAAI,CAACpB,mBAAL,EAA0B;MACxB,IAAG+C,IAAI,CAACM,OAAL,CAAaH,GAAG,CAAC5C,KAAjB,MAA4B,CAAC,CAAhC,EAAmC;QACjC4C,GAAG,CAAC5C,KAAJ,GAAY4C,GAAG,CAAC5C,KAAJ,GAAY,GAAxB,CADiC,CAEjC;MACD;IACF;;IACDyC,IAAI,CAACO,IAAL,CAAUJ,GAAG,CAAC5C,KAAd;IACA0C,MAAM,CAACM,IAAP,CAAYhD,KAAK,CAACA,KAAlB;IACAQ,CAAC,GAAGsC,QAAQ,CAAChC,GAAb;IACA0B,QAAQ,GAAGM,QAAQ,CAAC9C,KAApB;EACD;;EAED,IAAIR,KAAJ,EAAW;IACT,IAAIyD,IAAI,GAAG,CAAX;;IACA,KAAIA,IAAI,GAAG,CAAX,EAAcA,IAAI,GAAGR,IAAI,CAACpC,MAA1B,EAAkC4C,IAAI,EAAtC,EAA0C;MACxCjB,GAAG,CAACS,IAAI,CAACQ,IAAD,CAAL,CAAH,GAAkBP,MAAM,CAACO,IAAD,CAAxB;IACD;EACF;;EAED,OAAO;IACLpC,KAAK,EAAEV,QADF;IAELW,GAAG,EAAEN,CAFA;IAGLR,KAAK,EAAEgC;EAHF,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,yBAAT,CAAmChC,GAAnC,EAAwCgD,MAAxC,EAAgD;EAC9C,IAAI1C,CAAC,GAAG0C,MAAR;EACA,IAAIC,KAAK,GAAG,CAAZ;;EACA,OAAM3C,CAAC,GAAG,CAAC,CAAL,IAAUN,GAAG,CAACM,CAAD,CAAH,KAAW,IAA3B,EAAiC;IAC/B2C,KAAK;IACL3C,CAAC;EACF;;EACD,OAAQ2C,KAAK,GAAG,CAAT,KAAgB,CAAvB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASpB,UAAT,CAAoB7B,GAApB,EAAyBC,QAAzB,EAAmCT,mBAAnC,EAAwDF,KAAxD,EAA+D;EAC7D,IAAIgB,CAAC,GAAGL,QAAR;EACA,IAAIqC,QAAQ,GAAG,GAAf;EACA,IAAIV,GAAG,GAAG,EAAV;EAEA,IAAIa,CAAC,GAAGxC,QAAR;;EACA,OAAOO,aAAa,CAACR,GAAG,CAACyC,CAAD,CAAJ,CAApB,EAA8B;IAC5BA,CAAC;EACF;;EAED,IAAIzC,GAAG,CAACyC,CAAD,CAAH,KAAW,GAAf,EAAoB;IAClB,OAAO;MACL9B,KAAK,EAAEV,QADF;MAELW,GAAG,EAAE6B,CAFA;MAGL3C,KAAK,EAAE8B;IAHF,CAAP;EAKD;;EAED,OAAOU,QAAQ,KAAK,GAApB,EAAyB;IACvB,IAAIxC,KAAK,GAAGJ,UAAU,CAACM,GAAD,EAAMM,CAAN,EAASd,mBAAT,EAA8BF,KAA9B,CAAtB;;IACA,IAAIsD,QAAQ,GAAG7C,cAAc,CAACC,GAAD,EAAMF,KAAK,CAACc,GAAZ,CAA7B;;IAEA,IAAItB,KAAJ,EAAW;MACTsC,GAAG,CAACkB,IAAJ,CAAShD,KAAK,CAACA,KAAf;IACD;;IACDQ,CAAC,GAAGsC,QAAQ,CAAChC,GAAb;IACA0B,QAAQ,GAAGM,QAAQ,CAAC9C,KAApB;EACD;;EACD,OAAO;IACLa,KAAK,EAAEV,QADF;IAELW,GAAG,EAAEN,CAFA;IAGLR,KAAK,EAAE8B;EAHF,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASJ,gBAAT,CAA0BxB,GAA1B,EAA+BkD,GAA/B,EAAoC;EAClC,OAAQlD,GAAG,CAACmD,MAAJ,CAAWD,GAAX,EAAgB,CAAhB,MAAuB,MAA/B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASzB,iBAAT,CAA2BzB,GAA3B,EAAgCkD,GAAhC,EAAqC;EACnC,OAAQlD,GAAG,CAACmD,MAAJ,CAAWD,GAAX,EAAgB,CAAhB,MAAuB,OAA/B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASxB,gBAAT,CAA0B1B,GAA1B,EAA+BkD,GAA/B,EAAoC;EAClC,OAAQlD,GAAG,CAACmD,MAAJ,CAAWD,GAAX,EAAgB,CAAhB,MAAuB,MAA/B;AACD;;AAED,IAAIE,KAAK,GAAG,IAAIC,MAAJ,CAAW,MAAX,CAAZ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS7C,aAAT,CAAuBD,EAAvB,EAA0B;EACxB,OAAO6C,KAAK,CAACE,IAAN,CAAW/C,EAAX,CAAP;AACD;;AAED,IAAIgD,SAAS,GAAG,IAAIF,MAAJ,CAAW,MAAX,CAAhB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS1B,SAAT,CAAmBpB,EAAnB,EAAuB;EACrB,OAAOgD,SAAS,CAACD,IAAV,CAAe/C,EAAf,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,YAAT,CAAsBT,GAAtB,EAA2BwD,KAA3B,EAAkCC,MAAlC,EAA0C;EACxC,IAAIC,SAAS,GAAG,EAAhB;EAEA,IAAIC,SAAJ;;EACA,IAAI3D,GAAG,CAACG,MAAJ,GAAaqD,KAAK,GAAGE,SAAzB,EAAoC;IAClCC,SAAS,GAAG3D,GAAG,CAACmD,MAAJ,CAAWS,wBAAwB,CAAC5D,GAAG,CAACG,MAAJ,GAAauD,SAAd,CAAnC,EAA6D1D,GAAG,CAACG,MAAjE,CAAZ;EACD,CAFD,MAEO,IAAIqD,KAAK,GAAIE,SAAS,GAAC,CAAnB,GAAwB,CAA5B,EAA+B;IACpCC,SAAS,GAAG3D,GAAG,CAACmD,MAAJ,CAAW,CAAX,EAAcO,SAAd,CAAZ;EACD,CAFM,MAEA;IACLC,SAAS,GAAG3D,GAAG,CAACmD,MAAJ,CAAWS,wBAAwB,CAACJ,KAAK,GAAIE,SAAS,GAAC,CAApB,CAAnC,EAA4DA,SAA5D,CAAZ;EACD;;EAED,IAAI9D,OAAJ;;EACA,IAAI6D,MAAJ,EAAY;IACV7D,OAAO,GAAG,mBAAmB6D,MAAnB,GAA4B,QAA5B,GAAuCE,SAAjD;EACD,CAFD,MAEO;IACL/D,OAAO,GAAG,uBAAuB+D,SAAjC;EACD;;EACD,OAAO,IAAI9D,KAAJ,CAAUD,OAAV,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgE,wBAAT,CAAkCC,GAAlC,EAAuC;EACrC,OAAQA,GAAG,GAAG,CAAP,GAAY,CAAZ,GAAgBA,GAAvB;AACD"},"metadata":{},"sourceType":"script"}