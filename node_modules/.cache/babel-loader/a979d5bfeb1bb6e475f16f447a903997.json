{"ast":null,"code":"import { SmartContract, Account, parseUserKey, UserSigner, GasLimit, Address, ContractFunction, Balance, U32Value } from \"@elrondnetwork/erdjs\";\nimport { transactionServices } from \"@elrondnetwork/dapp-core\";\n//import { Provider } from \"react\";\nimport data from \"./wallet.json\";\nimport axios from \"axios\";\nimport { contractAddress, GateWay } from \"../../config\";\nlet LoggedUseraddress = \"\";\nexport const getMintTransaction = (contractAddress, baseGasLimit, tokensAmount, tokenSellingPrice) => {\n  const contract = new SmartContract({\n    address: new Address(contractAddress)\n  });\n  return contract.call({\n    func: new ContractFunction(\"mint\"),\n    gasLimit: new GasLimit(baseGasLimit * tokensAmount),\n    args: [new U32Value(tokensAmount)],\n    value: Balance.fromString(tokenSellingPrice.toString()).times(tokensAmount)\n  });\n};\nexport const GetPrice = (contractAddress, baseGasLimit) => {\n  const contract = new SmartContract({\n    address: new Address(contractAddress)\n  });\n  return contract.call({\n    func: new ContractFunction(\"getNftPrice\"),\n    gasLimit: new GasLimit(baseGasLimit)\n  });\n};\n_c = GetPrice;\nexport const GetAddress = async LoggedUserAddress => {\n  LoggedUseraddress = LoggedUserAddress;\n};\n_c2 = GetAddress;\nexport const prepareUserAccount = async walletPemKey => {\n  const userKey = parseUserKey(walletPemKey);\n  const address = userKey.generatePublicKey().toAddress();\n  return new Account(address);\n};\nexport const publicEndpointSetup = async provider => {\n  let keyFileObject = JSON.parse(JSON.stringify(data)); // Provider type based on initial configuration\n\n  let LoggedUserAddress = new Address(LoggedUseraddress);\n  let LoggedUserAccount = new Account(LoggedUserAddress);\n  let syncc = await LoggedUserAccount.sync(provider);\n  console.log(syncc);\n  const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\n  return {\n    signer,\n    LoggedUserAccount,\n    provider\n  };\n};\nexport const MintTransaction = async (price, tokens, signer, UserAccount, provider) => {\n  let mintx = getMintTransaction(contractAddress, 18000000, tokens, price);\n  const {\n    sendTransactions\n  } = transactionServices;\n  const sessionId = await sendTransactions({\n    transactions: mintx,\n    transactionsDisplayInfo: {\n      processingMessage: 'Processing Mint transaction',\n      errorMessage: 'An error has occured during Mint',\n      successMessage: 'Mint transaction successful'\n    }\n  });\n  const mnttxHash = mintx.getHash();\n  return mnttxHash;\n};\n_c3 = MintTransaction;\nexport const PriceTransaction = async provider => {\n  let pricetx = GetPrice(contractAddress, 18000000);\n  const {\n    sendTransactions\n  } = transactionServices;\n  const sessionId = await sendTransactions({\n    transactions: pricetx,\n    transactionsDisplayInfo: {\n      processingMessage: 'Processing Mint transaction',\n      errorMessage: 'An error has occured during Mint',\n      successMessage: 'Mint transaction successful'\n    }\n  });\n  const txHash = pricetx.getHash();\n  axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n  console.log(`Transaction: https://devnet-explorer.elrond.com/transactions/${txHash}`);\n  let explorer = `${GateWay}/transaction/${txHash}?withResults=true`;\n  let res = await axios.get(explorer);\n  let value = res.data.data.transaction.smartContractResults[0].data;\n  console.log(value);\n  var result = value.substring(value.lastIndexOf(\"@\") + 1);\n  return parseInt(result, 16);\n};\n_c4 = PriceTransaction;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"GetPrice\");\n$RefreshReg$(_c2, \"GetAddress\");\n$RefreshReg$(_c3, \"MintTransaction\");\n$RefreshReg$(_c4, \"PriceTransaction\");","map":{"version":3,"names":["SmartContract","Account","parseUserKey","UserSigner","GasLimit","Address","ContractFunction","Balance","U32Value","transactionServices","data","axios","contractAddress","GateWay","LoggedUseraddress","getMintTransaction","baseGasLimit","tokensAmount","tokenSellingPrice","contract","address","call","func","gasLimit","args","value","fromString","toString","times","GetPrice","GetAddress","LoggedUserAddress","prepareUserAccount","walletPemKey","userKey","generatePublicKey","toAddress","publicEndpointSetup","provider","keyFileObject","JSON","parse","stringify","LoggedUserAccount","syncc","sync","console","log","signer","fromWallet","MintTransaction","price","tokens","UserAccount","mintx","sendTransactions","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","mnttxHash","getHash","PriceTransaction","pricetx","txHash","defaults","headers","post","explorer","res","get","transaction","smartContractResults","result","substring","lastIndexOf","parseInt"],"sources":["C:/Users/Mmo-Omen/Documents/GitHub/NFT_Minting_dApp/src/pages/Home/utils.ts"],"sourcesContent":["import {\r\n  ProxyProvider,\r\n  SmartContract,\r\n  Account,\r\n  parseUserKey,\r\n  UserSigner,\r\n  GasLimit,\r\n  Address,\r\n  ContractFunction,\r\n  Balance,\r\n  U32Value,\r\n  Transaction,\r\n  ISigner,\r\n  QueryResponse,\r\n  ErrInvalidTxSignReturnValue,\r\n} from \"@elrondnetwork/erdjs\";\r\nimport {\r\n  transactionServices,\r\n  useGetAccountInfo,\r\n  useGetNetworkConfig,\r\n  refreshAccount,\r\n} from \"@elrondnetwork/dapp-core\";\r\nimport { Provider } from \"react\";\r\n//import { Provider } from \"react\";\r\nimport data from \"./wallet.json\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport { contractAddress, GateWay } from \"../../config\";\r\n\r\n\r\nlet LoggedUseraddress = \"\";\r\n\r\n\r\nexport const getMintTransaction = (\r\n  contractAddress: string,\r\n  baseGasLimit: number,\r\n  tokensAmount: number,\r\n  tokenSellingPrice: number,\r\n) => {\r\n  const contract = new SmartContract({\r\n    address: new Address(contractAddress),\r\n  });\r\n  return contract.call({\r\n    func: new ContractFunction(\"mint\"),\r\n    gasLimit: new GasLimit(\r\n      baseGasLimit * (tokensAmount)\r\n    ),\r\n    args: [new U32Value(tokensAmount)],\r\n    value: Balance.fromString(tokenSellingPrice.toString()).times(tokensAmount),\r\n  });\r\n};\r\n\r\nexport const GetPrice = (\r\n  contractAddress: string,\r\n  baseGasLimit: number,\r\n) => {\r\n  const contract = new SmartContract({\r\n    address: new Address(contractAddress),\r\n  });\r\n  return contract.call({\r\n    func: new ContractFunction(\"getNftPrice\"),\r\n    gasLimit: new GasLimit(\r\n      baseGasLimit\r\n    )\r\n  });\r\n};\r\n\r\nexport const GetAddress = async (LoggedUserAddress: string) => {\r\n  LoggedUseraddress = LoggedUserAddress;\r\n};\r\nexport const prepareUserAccount = async (walletPemKey: string) => {\r\n  const userKey = parseUserKey(walletPemKey);\r\n  const address = userKey.generatePublicKey().toAddress();\r\n  return new Account(address);\r\n};\r\n\r\nexport const publicEndpointSetup = async (provider: ProxyProvider) => {\r\n  let keyFileObject = JSON.parse(JSON.stringify(data));\r\n  // Provider type based on initial configuration\r\n  let LoggedUserAddress = new Address(LoggedUseraddress);\r\n  let LoggedUserAccount = new Account(LoggedUserAddress);\r\n  let syncc = await LoggedUserAccount.sync(provider);\r\n  console.log(syncc);\r\n  const signer = UserSigner.fromWallet(keyFileObject, \"u!D?G8Tf48fYL28\");\r\n  return {\r\n    signer,\r\n    LoggedUserAccount,\r\n    provider,\r\n  };\r\n};\r\n\r\nexport const MintTransaction = async (\r\n    price: number, tokens: number, signer: ISigner, UserAccount: Account, provider: ProxyProvider\r\n    ) => {\r\n    let mintx = getMintTransaction(\r\n      contractAddress,\r\n      18000000,\r\n      tokens,\r\n      price,\r\n    );\r\n    const { sendTransactions } = transactionServices; \r\n    const sessionId = await sendTransactions({\r\n      transactions: mintx,\r\n      transactionsDisplayInfo: {\r\n        processingMessage: 'Processing Mint transaction',\r\n        errorMessage: 'An error has occured during Mint',\r\n        successMessage: 'Mint transaction successful'\r\n      },\r\n    });\r\n    const mnttxHash = mintx.getHash();\r\n    return mnttxHash;\r\n}\r\n\r\nexport const PriceTransaction = async (\r\n  provider: ProxyProvider\r\n  ) => {\r\n    let pricetx = GetPrice(\r\n      contractAddress,\r\n      18000000,\r\n    );\r\n    const { sendTransactions } = transactionServices; \r\n    const sessionId = await sendTransactions({\r\n      transactions: pricetx,\r\n      transactionsDisplayInfo: {\r\n        processingMessage: 'Processing Mint transaction',\r\n        errorMessage: 'An error has occured during Mint',\r\n        successMessage: 'Mint transaction successful'\r\n      },\r\n    });\r\n    const txHash = pricetx.getHash();\r\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\r\n    console.log(`Transaction: https://devnet-explorer.elrond.com/transactions/${txHash}`);\r\n    let explorer = `${GateWay}/transaction/${txHash}?withResults=true`;\r\n    let res = await axios.get(explorer);\r\n    let value = res.data.data.transaction.smartContractResults[0].data;\r\n    console.log(value);\r\n    var result = value.substring(value.lastIndexOf(\"@\") + 1);\r\n    return parseInt(result, 16);\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}