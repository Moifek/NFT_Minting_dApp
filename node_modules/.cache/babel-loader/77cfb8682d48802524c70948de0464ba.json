{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApiNetworkProvider = void 0;\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst accounts_1 = require(\"./accounts\");\n\nconst networkStake_1 = require(\"./networkStake\");\n\nconst networkGeneralStatistics_1 = require(\"./networkGeneralStatistics\");\n\nconst proxyNetworkProvider_1 = require(\"./proxyNetworkProvider\");\n\nconst tokenDefinitions_1 = require(\"./tokenDefinitions\");\n\nconst tokens_1 = require(\"./tokens\");\n\nconst transactions_1 = require(\"./transactions\");\n\nconst transactionStatus_1 = require(\"./transactionStatus\");\n\nconst primitives_1 = require(\"./primitives\");\n\nconst errors_1 = require(\"./errors\");\n\nconst config_1 = require(\"./config\");\n\nconst contractQueryResponse_1 = require(\"./contractQueryResponse\");\n\nconst contractQueryRequest_1 = require(\"./contractQueryRequest\"); // TODO: Find & remove duplicate code between \"ProxyNetworkProvider\" and \"ApiNetworkProvider\".\n\n\nclass ApiNetworkProvider {\n  constructor(url, config) {\n    this.url = url;\n    this.config = Object.assign(Object.assign({}, config_1.defaultAxiosConfig), config);\n    this.backingProxyNetworkProvider = new proxyNetworkProvider_1.ProxyNetworkProvider(url, config);\n  }\n\n  getNetworkConfig() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.backingProxyNetworkProvider.getNetworkConfig();\n    });\n  }\n\n  getNetworkStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.backingProxyNetworkProvider.getNetworkStatus();\n    });\n  }\n\n  getNetworkStakeStatistics() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(\"stake\");\n      let networkStake = networkStake_1.NetworkStake.fromHttpResponse(response);\n      return networkStake;\n    });\n  }\n\n  getNetworkGeneralStatistics() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(\"stats\");\n      let stats = networkGeneralStatistics_1.NetworkGeneralStatistics.fromHttpResponse(response);\n      return stats;\n    });\n  }\n\n  getAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`accounts/${address.bech32()}`);\n      let account = accounts_1.AccountOnNetwork.fromHttpResponse(response);\n      return account;\n    });\n  }\n\n  getFungibleTokensOfAccount(address, pagination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      pagination = pagination || config_1.defaultPagination;\n      let url = `accounts/${address.bech32()}/tokens?${this.buildPaginationParams(pagination)}`;\n      let response = yield this.doGetGeneric(url);\n      let tokens = response.map(item => tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(item)); // TODO: Fix sorting\n\n      tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n      return tokens;\n    });\n  }\n\n  getNonFungibleTokensOfAccount(address, pagination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      pagination = pagination || config_1.defaultPagination;\n      let url = `accounts/${address.bech32()}/nfts?${this.buildPaginationParams(pagination)}`;\n      let response = yield this.doGetGeneric(url);\n      let tokens = response.map(item => tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(item)); // TODO: Fix sorting\n\n      tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n      return tokens;\n    });\n  }\n\n  getFungibleTokenOfAccount(address, tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`accounts/${address.bech32()}/tokens/${tokenIdentifier}`);\n      let tokenData = tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(response);\n      return tokenData;\n    });\n  }\n\n  getNonFungibleTokenOfAccount(address, collection, nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let nonceAsHex = new primitives_1.Nonce(nonce).hex();\n      let response = yield this.doGetGeneric(`accounts/${address.bech32()}/nfts/${collection}-${nonceAsHex}`);\n      let tokenData = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(response);\n      return tokenData;\n    });\n  }\n\n  getTransaction(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`transactions/${txHash}`);\n      let transaction = transactions_1.TransactionOnNetwork.fromApiHttpResponse(txHash, response);\n      return transaction;\n    });\n  }\n\n  getTransactionStatus(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`transactions/${txHash}?fields=status`);\n      let status = new transactionStatus_1.TransactionStatus(response.status);\n      return status;\n    });\n  }\n\n  sendTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPostGeneric(\"transactions\", tx.toSendable());\n      return response.txHash;\n    });\n  }\n\n  simulateTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.backingProxyNetworkProvider.simulateTransaction(tx);\n    });\n  }\n\n  queryContract(query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let request = new contractQueryRequest_1.ContractQueryRequest(query).toHttpRequest();\n        let response = yield this.doPostGeneric(\"query\", request);\n        return contractQueryResponse_1.ContractQueryResponse.fromHttpResponse(response);\n      } catch (error) {\n        throw new errors_1.ErrContractQuery(error);\n      }\n    });\n  }\n\n  getDefinitionOfFungibleToken(tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`tokens/${tokenIdentifier}`);\n      let definition = tokenDefinitions_1.DefinitionOfFungibleTokenOnNetwork.fromApiHttpResponse(response);\n      return definition;\n    });\n  }\n\n  getDefinitionOfTokenCollection(collection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`collections/${collection}`);\n      let definition = tokenDefinitions_1.DefinitionOfTokenCollectionOnNetwork.fromApiHttpResponse(response);\n      return definition;\n    });\n  }\n\n  getNonFungibleToken(collection, nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let nonceAsHex = new primitives_1.Nonce(nonce).hex();\n      let response = yield this.doGetGeneric(`nfts/${collection}-${nonceAsHex}`);\n      let token = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(response);\n      return token;\n    });\n  }\n\n  doGetGeneric(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGet(resourceUrl);\n      return response;\n    });\n  }\n\n  doPostGeneric(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPost(resourceUrl, payload);\n      return response;\n    });\n  }\n\n  buildPaginationParams(pagination) {\n    return `from=${pagination.from}&size=${pagination.size}`;\n  }\n\n  doGet(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `${this.url}/${resourceUrl}`;\n\n      try {\n        let response = yield axios_1.default.get(url, this.config);\n        return response.data;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  doPost(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `${this.url}/${resourceUrl}`;\n\n      try {\n        let response = yield axios_1.default.post(url, payload, Object.assign(Object.assign({}, this.config), {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }));\n        let responsePayload = response.data;\n        return responsePayload;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  handleApiError(error, resourceUrl) {\n    if (!error.response) {\n      console.warn(error);\n      throw new errors_1.ErrNetworkProvider(resourceUrl, error.toString(), error);\n    }\n\n    let errorData = error.response.data;\n    let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\n    throw new errors_1.ErrNetworkProvider(resourceUrl, originalErrorMessage, error);\n  }\n\n}\n\nexports.ApiNetworkProvider = ApiNetworkProvider;","map":{"version":3,"sources":["../src/apiNetworkProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiNetworkProvider = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst accounts_1 = require(\"./accounts\");\nconst networkStake_1 = require(\"./networkStake\");\nconst networkGeneralStatistics_1 = require(\"./networkGeneralStatistics\");\nconst proxyNetworkProvider_1 = require(\"./proxyNetworkProvider\");\nconst tokenDefinitions_1 = require(\"./tokenDefinitions\");\nconst tokens_1 = require(\"./tokens\");\nconst transactions_1 = require(\"./transactions\");\nconst transactionStatus_1 = require(\"./transactionStatus\");\nconst primitives_1 = require(\"./primitives\");\nconst errors_1 = require(\"./errors\");\nconst config_1 = require(\"./config\");\nconst contractQueryResponse_1 = require(\"./contractQueryResponse\");\nconst contractQueryRequest_1 = require(\"./contractQueryRequest\");\n// TODO: Find & remove duplicate code between \"ProxyNetworkProvider\" and \"ApiNetworkProvider\".\nclass ApiNetworkProvider {\n    constructor(url, config) {\n        this.url = url;\n        this.config = Object.assign(Object.assign({}, config_1.defaultAxiosConfig), config);\n        this.backingProxyNetworkProvider = new proxyNetworkProvider_1.ProxyNetworkProvider(url, config);\n    }\n    getNetworkConfig() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.backingProxyNetworkProvider.getNetworkConfig();\n        });\n    }\n    getNetworkStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.backingProxyNetworkProvider.getNetworkStatus();\n        });\n    }\n    getNetworkStakeStatistics() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(\"stake\");\n            let networkStake = networkStake_1.NetworkStake.fromHttpResponse(response);\n            return networkStake;\n        });\n    }\n    getNetworkGeneralStatistics() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(\"stats\");\n            let stats = networkGeneralStatistics_1.NetworkGeneralStatistics.fromHttpResponse(response);\n            return stats;\n        });\n    }\n    getAccount(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`accounts/${address.bech32()}`);\n            let account = accounts_1.AccountOnNetwork.fromHttpResponse(response);\n            return account;\n        });\n    }\n    getFungibleTokensOfAccount(address, pagination) {\n        return __awaiter(this, void 0, void 0, function* () {\n            pagination = pagination || config_1.defaultPagination;\n            let url = `accounts/${address.bech32()}/tokens?${this.buildPaginationParams(pagination)}`;\n            let response = yield this.doGetGeneric(url);\n            let tokens = response.map(item => tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(item));\n            // TODO: Fix sorting\n            tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n            return tokens;\n        });\n    }\n    getNonFungibleTokensOfAccount(address, pagination) {\n        return __awaiter(this, void 0, void 0, function* () {\n            pagination = pagination || config_1.defaultPagination;\n            let url = `accounts/${address.bech32()}/nfts?${this.buildPaginationParams(pagination)}`;\n            let response = yield this.doGetGeneric(url);\n            let tokens = response.map(item => tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(item));\n            // TODO: Fix sorting\n            tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n            return tokens;\n        });\n    }\n    getFungibleTokenOfAccount(address, tokenIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`accounts/${address.bech32()}/tokens/${tokenIdentifier}`);\n            let tokenData = tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(response);\n            return tokenData;\n        });\n    }\n    getNonFungibleTokenOfAccount(address, collection, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let nonceAsHex = new primitives_1.Nonce(nonce).hex();\n            let response = yield this.doGetGeneric(`accounts/${address.bech32()}/nfts/${collection}-${nonceAsHex}`);\n            let tokenData = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(response);\n            return tokenData;\n        });\n    }\n    getTransaction(txHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`transactions/${txHash}`);\n            let transaction = transactions_1.TransactionOnNetwork.fromApiHttpResponse(txHash, response);\n            return transaction;\n        });\n    }\n    getTransactionStatus(txHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`transactions/${txHash}?fields=status`);\n            let status = new transactionStatus_1.TransactionStatus(response.status);\n            return status;\n        });\n    }\n    sendTransaction(tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doPostGeneric(\"transactions\", tx.toSendable());\n            return response.txHash;\n        });\n    }\n    simulateTransaction(tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.backingProxyNetworkProvider.simulateTransaction(tx);\n        });\n    }\n    queryContract(query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let request = new contractQueryRequest_1.ContractQueryRequest(query).toHttpRequest();\n                let response = yield this.doPostGeneric(\"query\", request);\n                return contractQueryResponse_1.ContractQueryResponse.fromHttpResponse(response);\n            }\n            catch (error) {\n                throw new errors_1.ErrContractQuery(error);\n            }\n        });\n    }\n    getDefinitionOfFungibleToken(tokenIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`tokens/${tokenIdentifier}`);\n            let definition = tokenDefinitions_1.DefinitionOfFungibleTokenOnNetwork.fromApiHttpResponse(response);\n            return definition;\n        });\n    }\n    getDefinitionOfTokenCollection(collection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGetGeneric(`collections/${collection}`);\n            let definition = tokenDefinitions_1.DefinitionOfTokenCollectionOnNetwork.fromApiHttpResponse(response);\n            return definition;\n        });\n    }\n    getNonFungibleToken(collection, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let nonceAsHex = new primitives_1.Nonce(nonce).hex();\n            let response = yield this.doGetGeneric(`nfts/${collection}-${nonceAsHex}`);\n            let token = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(response);\n            return token;\n        });\n    }\n    doGetGeneric(resourceUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doGet(resourceUrl);\n            return response;\n        });\n    }\n    doPostGeneric(resourceUrl, payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.doPost(resourceUrl, payload);\n            return response;\n        });\n    }\n    buildPaginationParams(pagination) {\n        return `from=${pagination.from}&size=${pagination.size}`;\n    }\n    doGet(resourceUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = `${this.url}/${resourceUrl}`;\n            try {\n                let response = yield axios_1.default.get(url, this.config);\n                return response.data;\n            }\n            catch (error) {\n                this.handleApiError(error, resourceUrl);\n            }\n        });\n    }\n    doPost(resourceUrl, payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = `${this.url}/${resourceUrl}`;\n            try {\n                let response = yield axios_1.default.post(url, payload, Object.assign(Object.assign({}, this.config), { headers: {\n                        \"Content-Type\": \"application/json\",\n                    } }));\n                let responsePayload = response.data;\n                return responsePayload;\n            }\n            catch (error) {\n                this.handleApiError(error, resourceUrl);\n            }\n        });\n    }\n    handleApiError(error, resourceUrl) {\n        if (!error.response) {\n            console.warn(error);\n            throw new errors_1.ErrNetworkProvider(resourceUrl, error.toString(), error);\n        }\n        let errorData = error.response.data;\n        let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\n        throw new errors_1.ErrNetworkProvider(resourceUrl, originalErrorMessage, error);\n    }\n}\nexports.ApiNetworkProvider = ApiNetworkProvider;\n//# sourceMappingURL=apiNetworkProvider.js.map"]},"metadata":{},"sourceType":"script"}